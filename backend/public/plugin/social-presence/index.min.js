/**
   * @license
   * author: pantajoe
   * revealjs-plugin-social-presence.js v1.0.0
   * Released under the MIT license.
   */
this.RevealSocialPresence=function(e,t,n){"use strict";function r(e){var t=Object.create(null);return e&&Object.keys(e).forEach((function(n){if("default"!==n){var r=Object.getOwnPropertyDescriptor(e,n);Object.defineProperty(t,n,r.get?r:{enumerable:!0,get:function(){return e[n]}})}})),t.default=e,Object.freeze(t)}var i,a,o=r(e),s=r(t),u="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{},l={exports:{}},c={};function f(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?f(Object(n),!0).forEach((function(t){b(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):f(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(){p=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,r=Object.defineProperty||function(e,t,n){e[t]=n.value},i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",o=i.asyncIterator||"@@asyncIterator",s=i.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function l(e,t,n,i){var a=t&&t.prototype instanceof d?t:d,o=Object.create(a.prototype),s=new E(i||[]);return r(o,"_invoke",{value:k(e,n,s)}),o}function c(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=l;var f={};function d(){}function h(){}function m(){}var v={};u(v,a,(function(){return this}));var y=Object.getPrototypeOf,g=y&&y(y(S([])));g&&g!==t&&n.call(g,a)&&(v=g);var x=m.prototype=d.prototype=Object.create(v);function b(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function w(e,t){function i(r,a,o,s){var u=c(e[r],e,a);if("throw"!==u.type){var l=u.arg,f=l.value;return f&&"object"==typeof f&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){i("next",e,o,s)}),(function(e){i("throw",e,o,s)})):t.resolve(f).then((function(e){l.value=e,o(l)}),(function(e){return i("throw",e,o,s)}))}s(u.arg)}var a;r(this,"_invoke",{value:function(e,n){function r(){return new t((function(t,r){i(e,n,t,r)}))}return a=a?a.then(r,r):r()}})}function k(e,t,n){var r="suspendedStart";return function(i,a){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===i)throw a;return L()}for(n.method=i,n.arg=a;;){var o=n.delegate;if(o){var s=N(o,n);if(s){if(s===f)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var u=c(e,t,n);if("normal"===u.type){if(r=n.done?"completed":"suspendedYield",u.arg===f)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r="completed",n.method="throw",n.arg=u.arg)}}}function N(e,t){var n=t.method,r=e.iterator[n];if(void 0===r)return t.delegate=null,"throw"===n&&e.iterator.return&&(t.method="return",t.arg=void 0,N(e,t),"throw"===t.method)||"return"!==n&&(t.method="throw",t.arg=new TypeError("The iterator does not provide a '"+n+"' method")),f;var i=c(r,e.iterator,t.arg);if("throw"===i.type)return t.method="throw",t.arg=i.arg,t.delegate=null,f;var a=i.arg;return a?a.done?(t[e.resultName]=a.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,f):a:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,f)}function T(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function _(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(T,this),this.reset(!0)}function S(e){if(e){var t=e[a];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,i=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return i.next=i}}return{next:L}}function L(){return{value:void 0,done:!0}}return h.prototype=m,r(x,"constructor",{value:m,configurable:!0}),r(m,"constructor",{value:h,configurable:!0}),h.displayName=u(m,s,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===h||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,m):(e.__proto__=m,u(e,s,"GeneratorFunction")),e.prototype=Object.create(x),e},e.awrap=function(e){return{__await:e}},b(w.prototype),u(w.prototype,o,(function(){return this})),e.AsyncIterator=w,e.async=function(t,n,r,i,a){void 0===a&&(a=Promise);var o=new w(l(t,n,r,i),a);return e.isGeneratorFunction(n)?o:o.next().then((function(e){return e.done?e.value:o.next()}))},b(x),u(x,s,"Generator"),u(x,a,(function(){return this})),u(x,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=S,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(_),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return o.type="throw",o.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],o=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var s=n.call(a,"catchLoc"),u=n.call(a,"finallyLoc");if(s&&u){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(s){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=e,o.arg=t,a?(this.method="next",this.next=a.finallyLoc,f):this.complete(o)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),f},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),_(n),f}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var i=r.arg;_(n)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:S(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),f}},e}function h(e){return h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},h(e)}function m(e,t,n,r,i,a,o){try{var s=e[a](o),u=s.value}catch(e){return void n(e)}s.done?t(u):Promise.resolve(u).then(r,i)}function v(e){return function(){var t=this,n=arguments;return new Promise((function(r,i){var a=e.apply(t,n);function o(e){m(a,r,i,o,s,"next",e)}function s(e){m(a,r,i,o,s,"throw",e)}o(void 0)}))}}function y(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function g(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,M(r.key),r)}}function x(e,t,n){return t&&g(e.prototype,t),n&&g(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function b(e,t,n){return(t=M(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function w(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&N(e,t)}function k(e){return k=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},k(e)}function N(e,t){return N=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},N(e,t)}function T(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function _(e,t,n){return _=T()?Reflect.construct.bind():function(e,t,n){var r=[null];r.push.apply(r,t);var i=new(Function.bind.apply(e,r));return n&&N(i,n.prototype),i},_.apply(null,arguments)}function E(e){var t="function"==typeof Map?new Map:void 0;return E=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return _(e,arguments,k(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),N(r,e)},E(e)}function S(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}function L(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function A(e,t){if(t&&("object"==typeof t||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return L(e)}function O(e){var t=T();return function(){var n,r=k(e);if(t){var i=k(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return A(this,n)}}function I(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,i,a,o,s=[],u=!0,l=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(s.push(r.value),s.length!==t);u=!0);}catch(e){l=!0,i=e}finally{try{if(!u&&null!=n.return&&(o=n.return(),Object(o)!==o))return}finally{if(l)throw i}}return s}}(e,t)||R(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function C(e){return function(e){if(Array.isArray(e))return j(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||R(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function R(e,t){if(e){if("string"==typeof e)return j(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?j(e,t):void 0}}function j(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function D(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=R(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,i=function(){};return{s:i,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,o=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return o=e.done,e},e:function(e){s=!0,a=e},f:function(){try{o||null==n.return||n.return()}finally{if(s)throw a}}}}function M(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||"default");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:String(t)}l.exports=function(){if(i)return c;i=1;var t=e,n=Symbol.for("react.element"),r=Symbol.for("react.fragment"),a=Object.prototype.hasOwnProperty,o=t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,s={key:!0,ref:!0,__self:!0,__source:!0};function u(e,t,r){var i,u={},l=null,c=null;for(i in void 0!==r&&(l=""+r),void 0!==t.key&&(l=""+t.key),void 0!==t.ref&&(c=t.ref),t)a.call(t,i)&&!s.hasOwnProperty(i)&&(u[i]=t[i]);if(e&&e.defaultProps)for(i in t=e.defaultProps)void 0===u[i]&&(u[i]=t[i]);return{$$typeof:n,type:e,key:l,ref:c,props:u,_owner:o.current}}return c.Fragment=r,c.jsx=u,c.jsxs=u,c}();var F=t;a=F.createRoot,F.hydrateRoot;var P=["title","titleId"];var U=o.forwardRef((function(e,t){var n=e.title,r=e.titleId,i=S(e,P);return o.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20",fill:"currentColor","aria-hidden":"true",ref:t,"aria-labelledby":r},i),n?o.createElement("title",{id:r},n):null,o.createElement("path",{fillRule:"evenodd",d:"M3 4.25A2.25 2.25 0 015.25 2h5.5A2.25 2.25 0 0113 4.25v2a.75.75 0 01-1.5 0v-2a.75.75 0 00-.75-.75h-5.5a.75.75 0 00-.75.75v11.5c0 .414.336.75.75.75h5.5a.75.75 0 00.75-.75v-2a.75.75 0 011.5 0v2A2.25 2.25 0 0110.75 18h-5.5A2.25 2.25 0 013 15.75V4.25z",clipRule:"evenodd"}),o.createElement("path",{fillRule:"evenodd",d:"M19 10a.75.75 0 00-.75-.75H8.704l1.048-.943a.75.75 0 10-1.004-1.114l-2.5 2.25a.75.75 0 000 1.114l2.5 2.25a.75.75 0 101.004-1.114l-1.048-.943h9.546A.75.75 0 0019 10z",clipRule:"evenodd"}))})),V=["title","titleId"];var B=o.forwardRef((function(e,t){var n=e.title,r=e.titleId,i=S(e,V);return o.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20",fill:"currentColor","aria-hidden":"true",ref:t,"aria-labelledby":r},i),n?o.createElement("title",{id:r},n):null,o.createElement("path",{fillRule:"evenodd",d:"M17 10a.75.75 0 01-.75.75H5.612l4.158 3.96a.75.75 0 11-1.04 1.08l-5.5-5.25a.75.75 0 010-1.08l5.5-5.25a.75.75 0 111.04 1.08L5.612 9.25H16.25A.75.75 0 0117 10z",clipRule:"evenodd"}))})),z=["title","titleId"];var q=o.forwardRef((function(e,t){var n=e.title,r=e.titleId,i=S(e,z);return o.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20",fill:"currentColor","aria-hidden":"true",ref:t,"aria-labelledby":r},i),n?o.createElement("title",{id:r},n):null,o.createElement("path",{fillRule:"evenodd",d:"M3 4.25A2.25 2.25 0 015.25 2h5.5A2.25 2.25 0 0113 4.25v2a.75.75 0 01-1.5 0v-2a.75.75 0 00-.75-.75h-5.5a.75.75 0 00-.75.75v11.5c0 .414.336.75.75.75h5.5a.75.75 0 00.75-.75v-2a.75.75 0 011.5 0v2A2.25 2.25 0 0110.75 18h-5.5A2.25 2.25 0 013 15.75V4.25z",clipRule:"evenodd"}),o.createElement("path",{fillRule:"evenodd",d:"M6 10a.75.75 0 01.75-.75h9.546l-1.048-.943a.75.75 0 111.004-1.114l2.5 2.25a.75.75 0 010 1.114l-2.5 2.25a.75.75 0 11-1.004-1.114l1.048-.943H6.75A.75.75 0 016 10z",clipRule:"evenodd"}))})),J=["title","titleId"];var G=o.forwardRef((function(e,t){var n=e.title,r=e.titleId,i=S(e,J);return o.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20",fill:"currentColor","aria-hidden":"true",ref:t,"aria-labelledby":r},i),n?o.createElement("title",{id:r},n):null,o.createElement("path",{fillRule:"evenodd",d:"M7.793 2.232a.75.75 0 01-.025 1.06L3.622 7.25h10.003a5.375 5.375 0 010 10.75H10.75a.75.75 0 010-1.5h2.875a3.875 3.875 0 000-7.75H3.622l4.146 3.957a.75.75 0 01-1.036 1.085l-5.5-5.25a.75.75 0 010-1.085l5.5-5.25a.75.75 0 011.06.025z",clipRule:"evenodd"}))})),$=["title","titleId"];var W=o.forwardRef((function(e,t){var n=e.title,r=e.titleId,i=S(e,$);return o.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20",fill:"currentColor","aria-hidden":"true",ref:t,"aria-labelledby":r},i),n?o.createElement("title",{id:r},n):null,o.createElement("path",{d:"M4 8c0-.26.017-.517.049-.77l7.722 7.723a33.56 33.56 0 01-3.722-.01 2 2 0 003.862.15l1.134 1.134a3.5 3.5 0 01-6.53-1.409 32.91 32.91 0 01-3.257-.508.75.75 0 01-.515-1.076A11.448 11.448 0 004 8zM17.266 13.9a.756.756 0 01-.068.116L6.389 3.207A6 6 0 0116 8c.001 1.887.455 3.665 1.258 5.234a.75.75 0 01.01.666zM3.28 2.22a.75.75 0 00-1.06 1.06l14.5 14.5a.75.75 0 101.06-1.06L3.28 2.22z"}))})),H=["title","titleId"];var K=o.forwardRef((function(e,t){var n=e.title,r=e.titleId,i=S(e,H);return o.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20",fill:"currentColor","aria-hidden":"true",ref:t,"aria-labelledby":r},i),n?o.createElement("title",{id:r},n):null,o.createElement("path",{fillRule:"evenodd",d:"M10 2a6 6 0 00-6 6c0 1.887-.454 3.665-1.257 5.234a.75.75 0 00.515 1.076 32.91 32.91 0 003.256.508 3.5 3.5 0 006.972 0 32.903 32.903 0 003.256-.508.75.75 0 00.515-1.076A11.448 11.448 0 0116 8a6 6 0 00-6-6zM8.05 14.943a33.54 33.54 0 003.9 0 2 2 0 01-3.9 0z",clipRule:"evenodd"}))})),Q=["title","titleId"];var Y=o.forwardRef((function(e,t){var n=e.title,r=e.titleId,i=S(e,Q);return o.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20",fill:"currentColor","aria-hidden":"true",ref:t,"aria-labelledby":r},i),n?o.createElement("title",{id:r},n):null,o.createElement("path",{fillRule:"evenodd",d:"M10 2c-2.236 0-4.43.18-6.57.524C1.993 2.755 1 4.014 1 5.426v5.148c0 1.413.993 2.67 2.43 2.902 1.168.188 2.352.327 3.55.414.28.02.521.18.642.413l1.713 3.293a.75.75 0 001.33 0l1.713-3.293a.783.783 0 01.642-.413 41.102 41.102 0 003.55-.414c1.437-.231 2.43-1.49 2.43-2.902V5.426c0-1.413-.993-2.67-2.43-2.902A41.289 41.289 0 0010 2zM6.75 6a.75.75 0 000 1.5h6.5a.75.75 0 000-1.5h-6.5zm0 2.5a.75.75 0 000 1.5h3.5a.75.75 0 000-1.5h-3.5z",clipRule:"evenodd"}))})),X=["title","titleId"];var Z=o.forwardRef((function(e,t){var n=e.title,r=e.titleId,i=S(e,X);return o.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20",fill:"currentColor","aria-hidden":"true",ref:t,"aria-labelledby":r},i),n?o.createElement("title",{id:r},n):null,o.createElement("path",{fillRule:"evenodd",d:"M16.704 4.153a.75.75 0 01.143 1.052l-8 10.5a.75.75 0 01-1.127.075l-4.5-4.5a.75.75 0 011.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 011.05-.143z",clipRule:"evenodd"}))})),ee=["title","titleId"];var te=o.forwardRef((function(e,t){var n=e.title,r=e.titleId,i=S(e,ee);return o.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20",fill:"currentColor","aria-hidden":"true",ref:t,"aria-labelledby":r},i),n?o.createElement("title",{id:r},n):null,o.createElement("path",{fillRule:"evenodd",d:"M10 1a.75.75 0 01.75.75v1.5a.75.75 0 01-1.5 0v-1.5A.75.75 0 0110 1zM5.05 3.05a.75.75 0 011.06 0l1.062 1.06A.75.75 0 116.11 5.173L5.05 4.11a.75.75 0 010-1.06zm9.9 0a.75.75 0 010 1.06l-1.06 1.062a.75.75 0 01-1.062-1.061l1.061-1.06a.75.75 0 011.06 0zM3 8a.75.75 0 01.75-.75h1.5a.75.75 0 010 1.5h-1.5A.75.75 0 013 8zm11 0a.75.75 0 01.75-.75h1.5a.75.75 0 010 1.5h-1.5A.75.75 0 0114 8zm-6.828 2.828a.75.75 0 010 1.061L6.11 12.95a.75.75 0 01-1.06-1.06l1.06-1.06a.75.75 0 011.06 0zm3.594-3.317a.75.75 0 00-1.37.364l-.492 6.861a.75.75 0 001.204.65l1.043-.799.985 3.678a.75.75 0 001.45-.388l-.978-3.646 1.292.204a.75.75 0 00.74-1.16l-3.874-5.764z",clipRule:"evenodd"}))})),ne=["title","titleId"];var re=o.forwardRef((function(e,t){var n=e.title,r=e.titleId,i=S(e,ne);return o.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20",fill:"currentColor","aria-hidden":"true",ref:t,"aria-labelledby":r},i),n?o.createElement("title",{id:r},n):null,o.createElement("path",{d:"M10 3a1.5 1.5 0 110 3 1.5 1.5 0 010-3zM10 8.5a1.5 1.5 0 110 3 1.5 1.5 0 010-3zM11.5 15.5a1.5 1.5 0 10-3 0 1.5 1.5 0 003 0z"}))})),ie=["title","titleId"];var ae=o.forwardRef((function(e,t){var n=e.title,r=e.titleId,i=S(e,ie);return o.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20",fill:"currentColor","aria-hidden":"true",ref:t,"aria-labelledby":r},i),n?o.createElement("title",{id:r},n):null,o.createElement("path",{fillRule:"evenodd",d:"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a.75.75 0 000 1.5h.253a.25.25 0 01.244.304l-.459 2.066A1.75 1.75 0 0010.747 15H11a.75.75 0 000-1.5h-.253a.25.25 0 01-.244-.304l.459-2.066A1.75 1.75 0 009.253 9H9z",clipRule:"evenodd"}))})),oe=["title","titleId"];var se=o.forwardRef((function(e,t){var n=e.title,r=e.titleId,i=S(e,oe);return o.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20",fill:"currentColor","aria-hidden":"true",ref:t,"aria-labelledby":r},i),n?o.createElement("title",{id:r},n):null,o.createElement("path",{fillRule:"evenodd",d:"M8 7a5 5 0 113.61 4.804l-1.903 1.903A1 1 0 019 14H8v1a1 1 0 01-1 1H6v1a1 1 0 01-1 1H3a1 1 0 01-1-1v-2a1 1 0 01.293-.707L8.196 8.39A5.002 5.002 0 018 7zm5-3a.75.75 0 000 1.5A1.5 1.5 0 0114.5 7 .75.75 0 0016 7a3 3 0 00-3-3z",clipRule:"evenodd"}))})),ue=["title","titleId"];var le=o.forwardRef((function(e,t){var n=e.title,r=e.titleId,i=S(e,ue);return o.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20",fill:"currentColor","aria-hidden":"true",ref:t,"aria-labelledby":r},i),n?o.createElement("title",{id:r},n):null,o.createElement("path",{d:"M12.232 4.232a2.5 2.5 0 013.536 3.536l-1.225 1.224a.75.75 0 001.061 1.06l1.224-1.224a4 4 0 00-5.656-5.656l-3 3a4 4 0 00.225 5.865.75.75 0 00.977-1.138 2.5 2.5 0 01-.142-3.667l3-3z"}),o.createElement("path",{d:"M11.603 7.963a.75.75 0 00-.977 1.138 2.5 2.5 0 01.142 3.667l-3 3a2.5 2.5 0 01-3.536-3.536l1.225-1.224a.75.75 0 00-1.061-1.06l-1.224 1.224a4 4 0 105.656 5.656l3-3a4 4 0 00-.225-5.865z"}))})),ce=["title","titleId"];var fe=o.forwardRef((function(e,t){var n=e.title,r=e.titleId,i=S(e,ce);return o.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20",fill:"currentColor","aria-hidden":"true",ref:t,"aria-labelledby":r},i),n?o.createElement("title",{id:r},n):null,o.createElement("path",{fillRule:"evenodd",d:"M9 3.5a5.5 5.5 0 100 11 5.5 5.5 0 000-11zM2 9a7 7 0 1112.452 4.391l3.328 3.329a.75.75 0 11-1.06 1.06l-3.329-3.328A7 7 0 012 9z",clipRule:"evenodd"}))})),de=["title","titleId"];var pe=o.forwardRef((function(e,t){var n=e.title,r=e.titleId,i=S(e,de);return o.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20",fill:"currentColor","aria-hidden":"true",ref:t,"aria-labelledby":r},i),n?o.createElement("title",{id:r},n):null,o.createElement("path",{d:"M3.105 2.289a.75.75 0 00-.826.95l1.414 4.925A1.5 1.5 0 005.135 9.25h6.115a.75.75 0 010 1.5H5.135a1.5 1.5 0 00-1.442 1.086l-1.414 4.926a.75.75 0 00.826.95 28.896 28.896 0 0015.293-7.154.75.75 0 000-1.115A28.897 28.897 0 003.105 2.289z"}))})),he=["title","titleId"];var me=o.forwardRef((function(e,t){var n=e.title,r=e.titleId,i=S(e,he);return o.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20",fill:"currentColor","aria-hidden":"true",ref:t,"aria-labelledby":r},i),n?o.createElement("title",{id:r},n):null,o.createElement("path",{d:"M5.433 13.917l1.262-3.155A4 4 0 017.58 9.42l6.92-6.918a2.121 2.121 0 013 3l-6.92 6.918c-.383.383-.84.685-1.343.886l-3.154 1.262a.5.5 0 01-.65-.65z"}),o.createElement("path",{d:"M3.5 5.75c0-.69.56-1.25 1.25-1.25H10A.75.75 0 0010 3H4.75A2.75 2.75 0 002 5.75v9.5A2.75 2.75 0 004.75 18h9.5A2.75 2.75 0 0017 15.25V10a.75.75 0 00-1.5 0v5.25c0 .69-.56 1.25-1.25 1.25h-9.5c-.69 0-1.25-.56-1.25-1.25v-9.5z"}))})),ve=["title","titleId"];var ye=o.forwardRef((function(e,t){var n=e.title,r=e.titleId,i=S(e,ve);return o.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20",fill:"currentColor","aria-hidden":"true",ref:t,"aria-labelledby":r},i),n?o.createElement("title",{id:r},n):null,o.createElement("path",{d:"M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z"}))})),ge=["title","titleId"];var xe=o.forwardRef((function(e,t){var n=e.title,r=e.titleId,i=S(e,ge);return o.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20",fill:"currentColor","aria-hidden":"true",ref:t,"aria-labelledby":r},i),n?o.createElement("title",{id:r},n):null,o.createElement("path",{fillRule:"evenodd",d:"M8.75 1A2.75 2.75 0 006 3.75v.443c-.795.077-1.584.176-2.365.298a.75.75 0 10.23 1.482l.149-.022.841 10.518A2.75 2.75 0 007.596 19h4.807a2.75 2.75 0 002.742-2.53l.841-10.52.149.023a.75.75 0 00.23-1.482A41.03 41.03 0 0014 4.193V3.75A2.75 2.75 0 0011.25 1h-2.5zM10 4c.84 0 1.673.025 2.5.075V3.75c0-.69-.56-1.25-1.25-1.25h-2.5c-.69 0-1.25.56-1.25 1.25v.325C8.327 4.025 9.16 4 10 4zM8.58 7.72a.75.75 0 00-1.5.06l.3 7.5a.75.75 0 101.5-.06l-.3-7.5zm4.34.06a.75.75 0 10-1.5-.06l-.3 7.5a.75.75 0 101.5.06l.3-7.5z",clipRule:"evenodd"}))})),be=["title","titleId"];var we=o.forwardRef((function(e,t){var n=e.title,r=e.titleId,i=S(e,be);return o.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20",fill:"currentColor","aria-hidden":"true",ref:t,"aria-labelledby":r},i),n?o.createElement("title",{id:r},n):null,o.createElement("path",{fillRule:"evenodd",d:"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-5.5-2.5a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0zM10 12a5.99 5.99 0 00-4.793 2.39A6.483 6.483 0 0010 16.5a6.483 6.483 0 004.793-2.11A5.99 5.99 0 0010 12z",clipRule:"evenodd"}))})),ke=["title","titleId"];var Ne=o.forwardRef((function(e,t){var n=e.title,r=e.titleId,i=S(e,ke);return o.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20",fill:"currentColor","aria-hidden":"true",ref:t,"aria-labelledby":r},i),n?o.createElement("title",{id:r},n):null,o.createElement("path",{d:"M10 9a3 3 0 100-6 3 3 0 000 6zM6 8a2 2 0 11-4 0 2 2 0 014 0zM1.49 15.326a.78.78 0 01-.358-.442 3 3 0 014.308-3.516 6.484 6.484 0 00-1.905 3.959c-.023.222-.014.442.025.654a4.97 4.97 0 01-2.07-.655zM16.44 15.98a4.97 4.97 0 002.07-.654.78.78 0 00.357-.442 3 3 0 00-4.308-3.517 6.484 6.484 0 011.907 3.96 2.32 2.32 0 01-.026.654zM18 8a2 2 0 11-4 0 2 2 0 014 0zM5.304 16.19a.844.844 0 01-.277-.71 5 5 0 019.947 0 .843.843 0 01-.277.71A6.975 6.975 0 0110 18a6.974 6.974 0 01-4.696-1.81z"}))})),Te=["title","titleId"];var _e=o.forwardRef((function(e,t){var n=e.title,r=e.titleId,i=S(e,Te);return o.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20",fill:"currentColor","aria-hidden":"true",ref:t,"aria-labelledby":r},i),n?o.createElement("title",{id:r},n):null,o.createElement("path",{d:"M10 8a3 3 0 100-6 3 3 0 000 6zM3.465 14.493a1.23 1.23 0 00.41 1.412A9.957 9.957 0 0010 18c2.31 0 4.438-.784 6.131-2.1.43-.333.604-.903.408-1.41a7.002 7.002 0 00-13.074.003z"}))})),Ee=["title","titleId"];var Se=o.forwardRef((function(e,t){var n=e.title,r=e.titleId,i=S(e,Ee);return o.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20",fill:"currentColor","aria-hidden":"true",ref:t,"aria-labelledby":r},i),n?o.createElement("title",{id:r},n):null,o.createElement("path",{d:"M7 8a3 3 0 100-6 3 3 0 000 6zM14.5 9a2.5 2.5 0 100-5 2.5 2.5 0 000 5zM1.615 16.428a1.224 1.224 0 01-.569-1.175 6.002 6.002 0 0111.908 0c.058.467-.172.92-.57 1.174A9.953 9.953 0 017 18a9.953 9.953 0 01-5.385-1.572zM14.5 16h-.106c.07-.297.088-.611.048-.933a7.47 7.47 0 00-1.588-3.755 4.502 4.502 0 015.874 2.636.818.818 0 01-.36.98A7.465 7.465 0 0114.5 16z"}))})),Le=["title","titleId"];var Ae=o.forwardRef((function(e,t){var n=e.title,r=e.titleId,i=S(e,Le);return o.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20",fill:"currentColor","aria-hidden":"true",ref:t,"aria-labelledby":r},i),n?o.createElement("title",{id:r},n):null,o.createElement("path",{fillRule:"evenodd",d:"M14.5 10a4.5 4.5 0 004.284-5.882c-.105-.324-.51-.391-.752-.15L15.34 6.66a.454.454 0 01-.493.11 3.01 3.01 0 01-1.618-1.616.455.455 0 01.11-.494l2.694-2.692c.24-.241.174-.647-.15-.752a4.5 4.5 0 00-5.873 4.575c.055.873-.128 1.808-.8 2.368l-7.23 6.024a2.724 2.724 0 103.837 3.837l6.024-7.23c.56-.672 1.495-.855 2.368-.8.096.007.193.01.291.01zM5 16a1 1 0 11-2 0 1 1 0 012 0z",clipRule:"evenodd"}),o.createElement("path",{d:"M14.5 11.5c.173 0 .345-.007.514-.022l3.754 3.754a2.5 2.5 0 01-3.536 3.536l-4.41-4.41 2.172-2.607c.052-.063.147-.138.342-.196.202-.06.469-.087.777-.067.128.008.257.012.387.012zM6 4.586l2.33 2.33a.452.452 0 01-.08.09L6.8 8.214 4.586 6H3.309a.5.5 0 01-.447-.276l-1.7-3.402a.5.5 0 01.093-.577l.49-.49a.5.5 0 01.577-.094l3.402 1.7A.5.5 0 016 3.31v1.277z"}))})),Oe=["title","titleId"];var Ie=o.forwardRef((function(e,t){var n=e.title,r=e.titleId,i=S(e,Oe);return o.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20",fill:"currentColor","aria-hidden":"true",ref:t,"aria-labelledby":r},i),n?o.createElement("title",{id:r},n):null,o.createElement("path",{d:"M6.28 5.22a.75.75 0 00-1.06 1.06L8.94 10l-3.72 3.72a.75.75 0 101.06 1.06L10 11.06l3.72 3.72a.75.75 0 101.06-1.06L11.06 10l3.72-3.72a.75.75 0 00-1.06-1.06L10 8.94 6.28 5.22z"}))})),Ce=["title","titleId"];var Re=o.forwardRef((function(e,t){var n=e.title,r=e.titleId,i=S(e,Ce);return o.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",strokeWidth:1.5,stroke:"currentColor","aria-hidden":"true",ref:t,"aria-labelledby":r},i),n?o.createElement("title",{id:r},n):null,o.createElement("path",{strokeLinecap:"round",strokeLinejoin:"round",d:"M15.75 9V5.25A2.25 2.25 0 0013.5 3h-6a2.25 2.25 0 00-2.25 2.25v13.5A2.25 2.25 0 007.5 21h6a2.25 2.25 0 002.25-2.25V15M12 9l-3 3m0 0l3 3m-3-3h12.75"}))})),je=["title","titleId"];var De=o.forwardRef((function(e,t){var n=e.title,r=e.titleId,i=S(e,je);return o.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",strokeWidth:1.5,stroke:"currentColor","aria-hidden":"true",ref:t,"aria-labelledby":r},i),n?o.createElement("title",{id:r},n):null,o.createElement("path",{strokeLinecap:"round",strokeLinejoin:"round",d:"M15.75 9V5.25A2.25 2.25 0 0013.5 3h-6a2.25 2.25 0 00-2.25 2.25v13.5A2.25 2.25 0 007.5 21h6a2.25 2.25 0 002.25-2.25V15m3 0l3-3m0 0l-3-3m3 3H9"}))})),Me=["title","titleId"];var Fe=o.forwardRef((function(e,t){var n=e.title,r=e.titleId,i=S(e,Me);return o.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",strokeWidth:1.5,stroke:"currentColor","aria-hidden":"true",ref:t,"aria-labelledby":r},i),n?o.createElement("title",{id:r},n):null,o.createElement("path",{strokeLinecap:"round",strokeLinejoin:"round",d:"M7.5 8.25h9m-9 3H12m-9.75 1.51c0 1.6 1.123 2.994 2.707 3.227 1.129.166 2.27.293 3.423.379.35.026.67.21.865.501L12 21l2.755-4.133a1.14 1.14 0 01.865-.501 48.172 48.172 0 003.423-.379c1.584-.233 2.707-1.626 2.707-3.228V6.741c0-1.602-1.123-2.995-2.707-3.228A48.394 48.394 0 0012 3c-2.392 0-4.744.175-7.043.513C3.373 3.746 2.25 5.14 2.25 6.741v6.018z"}))})),Pe=["title","titleId"];var Ue=o.forwardRef((function(e,t){var n=e.title,r=e.titleId,i=S(e,Pe);return o.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",strokeWidth:1.5,stroke:"currentColor","aria-hidden":"true",ref:t,"aria-labelledby":r},i),n?o.createElement("title",{id:r},n):null,o.createElement("path",{strokeLinecap:"round",strokeLinejoin:"round",d:"M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z"}))})),Ve=["title","titleId"];var Be=o.forwardRef((function(e,t){var n=e.title,r=e.titleId,i=S(e,Ve);return o.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",strokeWidth:1.5,stroke:"currentColor","aria-hidden":"true",ref:t,"aria-labelledby":r},i),n?o.createElement("title",{id:r},n):null,o.createElement("path",{strokeLinecap:"round",strokeLinejoin:"round",d:"M4.5 12.75l6 6 9-13.5"}))})),ze=["title","titleId"];var qe=o.forwardRef((function(e,t){var n=e.title,r=e.titleId,i=S(e,ze);return o.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",strokeWidth:1.5,stroke:"currentColor","aria-hidden":"true",ref:t,"aria-labelledby":r},i),n?o.createElement("title",{id:r},n):null,o.createElement("path",{strokeLinecap:"round",strokeLinejoin:"round",d:"M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z"}))})),Je=["title","titleId"];var Ge=o.forwardRef((function(e,t){var n=e.title,r=e.titleId,i=S(e,Je);return o.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",strokeWidth:1.5,stroke:"currentColor","aria-hidden":"true",ref:t,"aria-labelledby":r},i),n?o.createElement("title",{id:r},n):null,o.createElement("path",{strokeLinecap:"round",strokeLinejoin:"round",d:"M11.25 11.25l.041-.02a.75.75 0 011.063.852l-.708 2.836a.75.75 0 001.063.853l.041-.021M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-9-3.75h.008v.008H12V8.25z"}))})),$e=["title","titleId"];var We=o.forwardRef((function(e,t){var n=e.title,r=e.titleId,i=S(e,$e);return o.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",strokeWidth:1.5,stroke:"currentColor","aria-hidden":"true",ref:t,"aria-labelledby":r},i),n?o.createElement("title",{id:r},n):null,o.createElement("path",{strokeLinecap:"round",strokeLinejoin:"round",d:"M16.862 4.487l1.687-1.688a1.875 1.875 0 112.652 2.652L10.582 16.07a4.5 4.5 0 01-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 011.13-1.897l8.932-8.931zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0115.75 21H5.25A2.25 2.25 0 013 18.75V8.25A2.25 2.25 0 015.25 6H10"}))})),He=["title","titleId"];var Ke=o.forwardRef((function(e,t){var n=e.title,r=e.titleId,i=S(e,He);return o.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",strokeWidth:1.5,stroke:"currentColor","aria-hidden":"true",ref:t,"aria-labelledby":r},i),n?o.createElement("title",{id:r},n):null,o.createElement("path",{strokeLinecap:"round",strokeLinejoin:"round",d:"M12 4.5v15m7.5-7.5h-15"}))})),Qe=["title","titleId"];var Ye=o.forwardRef((function(e,t){var n=e.title,r=e.titleId,i=S(e,Qe);return o.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",strokeWidth:1.5,stroke:"currentColor","aria-hidden":"true",ref:t,"aria-labelledby":r},i),n?o.createElement("title",{id:r},n):null,o.createElement("path",{strokeLinecap:"round",strokeLinejoin:"round",d:"M17.982 18.725A7.488 7.488 0 0012 15.75a7.488 7.488 0 00-5.982 2.975m11.963 0a9 9 0 10-11.963 0m11.963 0A8.966 8.966 0 0112 21a8.966 8.966 0 01-5.982-2.275M15 9.75a3 3 0 11-6 0 3 3 0 016 0z"}))})),Xe=["title","titleId"];var Ze=o.forwardRef((function(e,t){var n=e.title,r=e.titleId,i=S(e,Xe);return o.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",strokeWidth:1.5,stroke:"currentColor","aria-hidden":"true",ref:t,"aria-labelledby":r},i),n?o.createElement("title",{id:r},n):null,o.createElement("path",{strokeLinecap:"round",strokeLinejoin:"round",d:"M18 18.72a9.094 9.094 0 003.741-.479 3 3 0 00-4.682-2.72m.94 3.198l.001.031c0 .225-.012.447-.037.666A11.944 11.944 0 0112 21c-2.17 0-4.207-.576-5.963-1.584A6.062 6.062 0 016 18.719m12 0a5.971 5.971 0 00-.941-3.197m0 0A5.995 5.995 0 0012 12.75a5.995 5.995 0 00-5.058 2.772m0 0a3 3 0 00-4.681 2.72 8.986 8.986 0 003.74.477m.94-3.197a5.971 5.971 0 00-.94 3.197M15 6.75a3 3 0 11-6 0 3 3 0 016 0zm6 3a2.25 2.25 0 11-4.5 0 2.25 2.25 0 014.5 0zm-13.5 0a2.25 2.25 0 11-4.5 0 2.25 2.25 0 014.5 0z"}))})),et=["title","titleId"];var tt=o.forwardRef((function(e,t){var n=e.title,r=e.titleId,i=S(e,et);return o.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",strokeWidth:1.5,stroke:"currentColor","aria-hidden":"true",ref:t,"aria-labelledby":r},i),n?o.createElement("title",{id:r},n):null,o.createElement("path",{strokeLinecap:"round",strokeLinejoin:"round",d:"M15 19.128a9.38 9.38 0 002.625.372 9.337 9.337 0 004.121-.952 4.125 4.125 0 00-7.533-2.493M15 19.128v-.003c0-1.113-.285-2.16-.786-3.07M15 19.128v.106A12.318 12.318 0 018.624 21c-2.331 0-4.512-.645-6.374-1.766l-.001-.109a6.375 6.375 0 0111.964-3.07M12 6.375a3.375 3.375 0 11-6.75 0 3.375 3.375 0 016.75 0zm8.25 2.25a2.625 2.625 0 11-5.25 0 2.625 2.625 0 015.25 0z"}))})),nt=["title","titleId"];var rt=o.forwardRef((function(e,t){var n=e.title,r=e.titleId,i=S(e,nt);return o.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",strokeWidth:1.5,stroke:"currentColor","aria-hidden":"true",ref:t,"aria-labelledby":r},i),n?o.createElement("title",{id:r},n):null,o.createElement("path",{strokeLinecap:"round",strokeLinejoin:"round",d:"M11.42 15.17L17.25 21A2.652 2.652 0 0021 17.25l-5.877-5.877M11.42 15.17l2.496-3.03c.317-.384.74-.626 1.208-.766M11.42 15.17l-4.655 5.653a2.548 2.548 0 11-3.586-3.586l6.837-5.63m5.108-.233c.55-.164 1.163-.188 1.743-.14a4.5 4.5 0 004.486-6.336l-3.276 3.277a3.004 3.004 0 01-2.25-2.25l3.276-3.276a4.5 4.5 0 00-6.336 4.486c.091 1.076-.071 2.264-.904 2.95l-.102.085m-1.745 1.437L5.909 7.5H4.5L2.25 3.75l1.5-1.5L7.5 4.5v1.409l4.26 4.26m-1.745 1.437l1.745-1.437m6.615 8.206L15.75 15.75M4.867 19.125h.008v.008h-.008v-.008z"}))})),it=["title","titleId"];var at=o.forwardRef((function(e,t){var n=e.title,r=e.titleId,i=S(e,it);return o.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",strokeWidth:1.5,stroke:"currentColor","aria-hidden":"true",ref:t,"aria-labelledby":r},i),n?o.createElement("title",{id:r},n):null,o.createElement("path",{strokeLinecap:"round",strokeLinejoin:"round",d:"M9.75 9.75l4.5 4.5m0-4.5l-4.5 4.5M21 12a9 9 0 11-18 0 9 9 0 0118 0z"}))})),ot=["title","titleId"];var st=o.forwardRef((function(e,t){var n=e.title,r=e.titleId,i=S(e,ot);return o.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",strokeWidth:1.5,stroke:"currentColor","aria-hidden":"true",ref:t,"aria-labelledby":r},i),n?o.createElement("title",{id:r},n):null,o.createElement("path",{strokeLinecap:"round",strokeLinejoin:"round",d:"M6 18L18 6M6 6l12 12"}))}));function ut(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==h(e))if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=ut(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}function lt(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=ut(e))&&(r&&(r+=" "),r+=t);return r}o.createContext(),o.createContext();var ct=function(e){return e.reduce((function(e,t){var n=t[0],r=t[1];return e[n]=r,e}),{})},ft="undefined"!=typeof window&&window.document&&window.document.createElement?o.useLayoutEffect:o.useEffect,dt="top",pt="bottom",ht="right",mt="left",vt="auto",yt=[dt,pt,ht,mt],gt="start",xt="end",bt="viewport",wt="popper",kt=yt.reduce((function(e,t){return e.concat([t+"-"+gt,t+"-"+xt])}),[]),Nt=[].concat(yt,[vt]).reduce((function(e,t){return e.concat([t,t+"-"+gt,t+"-"+xt])}),[]),Tt=["beforeRead","read","afterRead","beforeMain","main","afterMain","beforeWrite","write","afterWrite"];function _t(e){return e?(e.nodeName||"").toLowerCase():null}function Et(e){if(null==e)return window;if("[object Window]"!==e.toString()){var t=e.ownerDocument;return t&&t.defaultView||window}return e}function St(e){return e instanceof Et(e).Element||e instanceof Element}function Lt(e){return e instanceof Et(e).HTMLElement||e instanceof HTMLElement}function At(e){return"undefined"!=typeof ShadowRoot&&(e instanceof Et(e).ShadowRoot||e instanceof ShadowRoot)}var Ot={name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var t=e.state;Object.keys(t.elements).forEach((function(e){var n=t.styles[e]||{},r=t.attributes[e]||{},i=t.elements[e];Lt(i)&&_t(i)&&(Object.assign(i.style,n),Object.keys(r).forEach((function(e){var t=r[e];!1===t?i.removeAttribute(e):i.setAttribute(e,!0===t?"":t)})))}))},effect:function(e){var t=e.state,n={popper:{position:t.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(t.elements.popper.style,n.popper),t.styles=n,t.elements.arrow&&Object.assign(t.elements.arrow.style,n.arrow),function(){Object.keys(t.elements).forEach((function(e){var r=t.elements[e],i=t.attributes[e]||{},a=Object.keys(t.styles.hasOwnProperty(e)?t.styles[e]:n[e]).reduce((function(e,t){return e[t]="",e}),{});Lt(r)&&_t(r)&&(Object.assign(r.style,a),Object.keys(i).forEach((function(e){r.removeAttribute(e)})))}))}},requires:["computeStyles"]};function It(e){return e.split("-")[0]}var Ct=Math.max,Rt=Math.min,jt=Math.round;function Dt(){var e=navigator.userAgentData;return null!=e&&e.brands?e.brands.map((function(e){return e.brand+"/"+e.version})).join(" "):navigator.userAgent}function Mt(){return!/^((?!chrome|android).)*safari/i.test(Dt())}function Ft(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!1);var r=e.getBoundingClientRect(),i=1,a=1;t&&Lt(e)&&(i=e.offsetWidth>0&&jt(r.width)/e.offsetWidth||1,a=e.offsetHeight>0&&jt(r.height)/e.offsetHeight||1);var o=(St(e)?Et(e):window).visualViewport,s=!Mt()&&n,u=(r.left+(s&&o?o.offsetLeft:0))/i,l=(r.top+(s&&o?o.offsetTop:0))/a,c=r.width/i,f=r.height/a;return{width:c,height:f,top:l,right:u+c,bottom:l+f,left:u,x:u,y:l}}function Pt(e){var t=Ft(e),n=e.offsetWidth,r=e.offsetHeight;return Math.abs(t.width-n)<=1&&(n=t.width),Math.abs(t.height-r)<=1&&(r=t.height),{x:e.offsetLeft,y:e.offsetTop,width:n,height:r}}function Ut(e,t){var n=t.getRootNode&&t.getRootNode();if(e.contains(t))return!0;if(n&&At(n)){var r=t;do{if(r&&e.isSameNode(r))return!0;r=r.parentNode||r.host}while(r)}return!1}function Vt(e){return Et(e).getComputedStyle(e)}function Bt(e){return["table","td","th"].indexOf(_t(e))>=0}function zt(e){return((St(e)?e.ownerDocument:e.document)||window.document).documentElement}function qt(e){return"html"===_t(e)?e:e.assignedSlot||e.parentNode||(At(e)?e.host:null)||zt(e)}function Jt(e){return Lt(e)&&"fixed"!==Vt(e).position?e.offsetParent:null}function Gt(e){for(var t=Et(e),n=Jt(e);n&&Bt(n)&&"static"===Vt(n).position;)n=Jt(n);return n&&("html"===_t(n)||"body"===_t(n)&&"static"===Vt(n).position)?t:n||function(e){var t=/firefox/i.test(Dt());if(/Trident/i.test(Dt())&&Lt(e)&&"fixed"===Vt(e).position)return null;var n=qt(e);for(At(n)&&(n=n.host);Lt(n)&&["html","body"].indexOf(_t(n))<0;){var r=Vt(n);if("none"!==r.transform||"none"!==r.perspective||"paint"===r.contain||-1!==["transform","perspective"].indexOf(r.willChange)||t&&"filter"===r.willChange||t&&r.filter&&"none"!==r.filter)return n;n=n.parentNode}return null}(e)||t}function $t(e){return["top","bottom"].indexOf(e)>=0?"x":"y"}function Wt(e,t,n){return Ct(e,Rt(t,n))}function Ht(e){return Object.assign({},{top:0,right:0,bottom:0,left:0},e)}function Kt(e,t){return t.reduce((function(t,n){return t[n]=e,t}),{})}var Qt={name:"arrow",enabled:!0,phase:"main",fn:function(e){var t,n=e.state,r=e.name,i=e.options,a=n.elements.arrow,o=n.modifiersData.popperOffsets,s=It(n.placement),u=$t(s),l=[mt,ht].indexOf(s)>=0?"height":"width";if(a&&o){var c=function(e,t){return Ht("number"!=typeof(e="function"==typeof e?e(Object.assign({},t.rects,{placement:t.placement})):e)?e:Kt(e,yt))}(i.padding,n),f=Pt(a),d="y"===u?dt:mt,p="y"===u?pt:ht,h=n.rects.reference[l]+n.rects.reference[u]-o[u]-n.rects.popper[l],m=o[u]-n.rects.reference[u],v=Gt(a),y=v?"y"===u?v.clientHeight||0:v.clientWidth||0:0,g=h/2-m/2,x=c[d],b=y-f[l]-c[p],w=y/2-f[l]/2+g,k=Wt(x,w,b),N=u;n.modifiersData[r]=((t={})[N]=k,t.centerOffset=k-w,t)}},effect:function(e){var t=e.state,n=e.options.element,r=void 0===n?"[data-popper-arrow]":n;null!=r&&("string"!=typeof r||(r=t.elements.popper.querySelector(r)))&&Ut(t.elements.popper,r)&&(t.elements.arrow=r)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function Yt(e){return e.split("-")[1]}var Xt={top:"auto",right:"auto",bottom:"auto",left:"auto"};function Zt(e){var t,n=e.popper,r=e.popperRect,i=e.placement,a=e.variation,o=e.offsets,s=e.position,u=e.gpuAcceleration,l=e.adaptive,c=e.roundOffsets,f=e.isFixed,d=o.x,p=void 0===d?0:d,h=o.y,m=void 0===h?0:h,v="function"==typeof c?c({x:p,y:m}):{x:p,y:m};p=v.x,m=v.y;var y=o.hasOwnProperty("x"),g=o.hasOwnProperty("y"),x=mt,b=dt,w=window;if(l){var k=Gt(n),N="clientHeight",T="clientWidth";if(k===Et(n)&&"static"!==Vt(k=zt(n)).position&&"absolute"===s&&(N="scrollHeight",T="scrollWidth"),i===dt||(i===mt||i===ht)&&a===xt)b=pt,m-=(f&&k===w&&w.visualViewport?w.visualViewport.height:k[N])-r.height,m*=u?1:-1;if(i===mt||(i===dt||i===pt)&&a===xt)x=ht,p-=(f&&k===w&&w.visualViewport?w.visualViewport.width:k[T])-r.width,p*=u?1:-1}var _,E=Object.assign({position:s},l&&Xt),S=!0===c?function(e){var t=e.x,n=e.y,r=window.devicePixelRatio||1;return{x:jt(t*r)/r||0,y:jt(n*r)/r||0}}({x:p,y:m}):{x:p,y:m};return p=S.x,m=S.y,u?Object.assign({},E,((_={})[b]=g?"0":"",_[x]=y?"0":"",_.transform=(w.devicePixelRatio||1)<=1?"translate("+p+"px, "+m+"px)":"translate3d("+p+"px, "+m+"px, 0)",_)):Object.assign({},E,((t={})[b]=g?m+"px":"",t[x]=y?p+"px":"",t.transform="",t))}var en={passive:!0};var tn={left:"right",right:"left",bottom:"top",top:"bottom"};function nn(e){return e.replace(/left|right|bottom|top/g,(function(e){return tn[e]}))}var rn={start:"end",end:"start"};function an(e){return e.replace(/start|end/g,(function(e){return rn[e]}))}function on(e){var t=Et(e);return{scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}function sn(e){return Ft(zt(e)).left+on(e).scrollLeft}function un(e){var t=Vt(e),n=t.overflow,r=t.overflowX,i=t.overflowY;return/auto|scroll|overlay|hidden/.test(n+i+r)}function ln(e){return["html","body","#document"].indexOf(_t(e))>=0?e.ownerDocument.body:Lt(e)&&un(e)?e:ln(qt(e))}function cn(e,t){var n;void 0===t&&(t=[]);var r=ln(e),i=r===(null==(n=e.ownerDocument)?void 0:n.body),a=Et(r),o=i?[a].concat(a.visualViewport||[],un(r)?r:[]):r,s=t.concat(o);return i?s:s.concat(cn(qt(o)))}function fn(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function dn(e,t,n){return t===bt?fn(function(e,t){var n=Et(e),r=zt(e),i=n.visualViewport,a=r.clientWidth,o=r.clientHeight,s=0,u=0;if(i){a=i.width,o=i.height;var l=Mt();(l||!l&&"fixed"===t)&&(s=i.offsetLeft,u=i.offsetTop)}return{width:a,height:o,x:s+sn(e),y:u}}(e,n)):St(t)?function(e,t){var n=Ft(e,!1,"fixed"===t);return n.top=n.top+e.clientTop,n.left=n.left+e.clientLeft,n.bottom=n.top+e.clientHeight,n.right=n.left+e.clientWidth,n.width=e.clientWidth,n.height=e.clientHeight,n.x=n.left,n.y=n.top,n}(t,n):fn(function(e){var t,n=zt(e),r=on(e),i=null==(t=e.ownerDocument)?void 0:t.body,a=Ct(n.scrollWidth,n.clientWidth,i?i.scrollWidth:0,i?i.clientWidth:0),o=Ct(n.scrollHeight,n.clientHeight,i?i.scrollHeight:0,i?i.clientHeight:0),s=-r.scrollLeft+sn(e),u=-r.scrollTop;return"rtl"===Vt(i||n).direction&&(s+=Ct(n.clientWidth,i?i.clientWidth:0)-a),{width:a,height:o,x:s,y:u}}(zt(e)))}function pn(e,t,n,r){var i="clippingParents"===t?function(e){var t=cn(qt(e)),n=["absolute","fixed"].indexOf(Vt(e).position)>=0&&Lt(e)?Gt(e):e;return St(n)?t.filter((function(e){return St(e)&&Ut(e,n)&&"body"!==_t(e)})):[]}(e):[].concat(t),a=[].concat(i,[n]),o=a[0],s=a.reduce((function(t,n){var i=dn(e,n,r);return t.top=Ct(i.top,t.top),t.right=Rt(i.right,t.right),t.bottom=Rt(i.bottom,t.bottom),t.left=Ct(i.left,t.left),t}),dn(e,o,r));return s.width=s.right-s.left,s.height=s.bottom-s.top,s.x=s.left,s.y=s.top,s}function hn(e){var t,n=e.reference,r=e.element,i=e.placement,a=i?It(i):null,o=i?Yt(i):null,s=n.x+n.width/2-r.width/2,u=n.y+n.height/2-r.height/2;switch(a){case dt:t={x:s,y:n.y-r.height};break;case pt:t={x:s,y:n.y+n.height};break;case ht:t={x:n.x+n.width,y:u};break;case mt:t={x:n.x-r.width,y:u};break;default:t={x:n.x,y:n.y}}var l=a?$t(a):null;if(null!=l){var c="y"===l?"height":"width";switch(o){case gt:t[l]=t[l]-(n[c]/2-r[c]/2);break;case xt:t[l]=t[l]+(n[c]/2-r[c]/2)}}return t}function mn(e,t){void 0===t&&(t={});var n=t,r=n.placement,i=void 0===r?e.placement:r,a=n.strategy,o=void 0===a?e.strategy:a,s=n.boundary,u=void 0===s?"clippingParents":s,l=n.rootBoundary,c=void 0===l?bt:l,f=n.elementContext,d=void 0===f?wt:f,p=n.altBoundary,h=void 0!==p&&p,m=n.padding,v=void 0===m?0:m,y=Ht("number"!=typeof v?v:Kt(v,yt)),g=d===wt?"reference":wt,x=e.rects.popper,b=e.elements[h?g:d],w=pn(St(b)?b:b.contextElement||zt(e.elements.popper),u,c,o),k=Ft(e.elements.reference),N=hn({reference:k,element:x,strategy:"absolute",placement:i}),T=fn(Object.assign({},x,N)),_=d===wt?T:k,E={top:w.top-_.top+y.top,bottom:_.bottom-w.bottom+y.bottom,left:w.left-_.left+y.left,right:_.right-w.right+y.right},S=e.modifiersData.offset;if(d===wt&&S){var L=S[i];Object.keys(E).forEach((function(e){var t=[ht,pt].indexOf(e)>=0?1:-1,n=[dt,pt].indexOf(e)>=0?"y":"x";E[e]+=L[n]*t}))}return E}function vn(e,t){void 0===t&&(t={});var n=t,r=n.placement,i=n.boundary,a=n.rootBoundary,o=n.padding,s=n.flipVariations,u=n.allowedAutoPlacements,l=void 0===u?Nt:u,c=Yt(r),f=c?s?kt:kt.filter((function(e){return Yt(e)===c})):yt,d=f.filter((function(e){return l.indexOf(e)>=0}));0===d.length&&(d=f);var p=d.reduce((function(t,n){return t[n]=mn(e,{placement:n,boundary:i,rootBoundary:a,padding:o})[It(n)],t}),{});return Object.keys(p).sort((function(e,t){return p[e]-p[t]}))}var yn={name:"flip",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,r=e.name;if(!t.modifiersData[r]._skip){for(var i=n.mainAxis,a=void 0===i||i,o=n.altAxis,s=void 0===o||o,u=n.fallbackPlacements,l=n.padding,c=n.boundary,f=n.rootBoundary,d=n.altBoundary,p=n.flipVariations,h=void 0===p||p,m=n.allowedAutoPlacements,v=t.options.placement,y=It(v),g=u||(y===v||!h?[nn(v)]:function(e){if(It(e)===vt)return[];var t=nn(e);return[an(e),t,an(t)]}(v)),x=[v].concat(g).reduce((function(e,n){return e.concat(It(n)===vt?vn(t,{placement:n,boundary:c,rootBoundary:f,padding:l,flipVariations:h,allowedAutoPlacements:m}):n)}),[]),b=t.rects.reference,w=t.rects.popper,k=new Map,N=!0,T=x[0],_=0;_<x.length;_++){var E=x[_],S=It(E),L=Yt(E)===gt,A=[dt,pt].indexOf(S)>=0,O=A?"width":"height",I=mn(t,{placement:E,boundary:c,rootBoundary:f,altBoundary:d,padding:l}),C=A?L?ht:mt:L?pt:dt;b[O]>w[O]&&(C=nn(C));var R=nn(C),j=[];if(a&&j.push(I[S]<=0),s&&j.push(I[C]<=0,I[R]<=0),j.every((function(e){return e}))){T=E,N=!1;break}k.set(E,j)}if(N)for(var D=function(e){var t=x.find((function(t){var n=k.get(t);if(n)return n.slice(0,e).every((function(e){return e}))}));if(t)return T=t,"break"},M=h?3:1;M>0;M--){if("break"===D(M))break}t.placement!==T&&(t.modifiersData[r]._skip=!0,t.placement=T,t.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}};function gn(e,t,n){return void 0===n&&(n={x:0,y:0}),{top:e.top-t.height-n.y,right:e.right-t.width+n.x,bottom:e.bottom-t.height+n.y,left:e.left-t.width-n.x}}function xn(e){return[dt,ht,pt,mt].some((function(t){return e[t]>=0}))}var bn={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var t=e.state,n=e.options,r=e.name,i=n.offset,a=void 0===i?[0,0]:i,o=Nt.reduce((function(e,n){return e[n]=function(e,t,n){var r=It(e),i=[mt,dt].indexOf(r)>=0?-1:1,a="function"==typeof n?n(Object.assign({},t,{placement:e})):n,o=a[0],s=a[1];return o=o||0,s=(s||0)*i,[mt,ht].indexOf(r)>=0?{x:s,y:o}:{x:o,y:s}}(n,t.rects,a),e}),{}),s=o[t.placement],u=s.x,l=s.y;null!=t.modifiersData.popperOffsets&&(t.modifiersData.popperOffsets.x+=u,t.modifiersData.popperOffsets.y+=l),t.modifiersData[r]=o}};var wn={name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,r=e.name,i=n.mainAxis,a=void 0===i||i,o=n.altAxis,s=void 0!==o&&o,u=n.boundary,l=n.rootBoundary,c=n.altBoundary,f=n.padding,d=n.tether,p=void 0===d||d,h=n.tetherOffset,m=void 0===h?0:h,v=mn(t,{boundary:u,rootBoundary:l,padding:f,altBoundary:c}),y=It(t.placement),g=Yt(t.placement),x=!g,b=$t(y),w="x"===b?"y":"x",k=t.modifiersData.popperOffsets,N=t.rects.reference,T=t.rects.popper,_="function"==typeof m?m(Object.assign({},t.rects,{placement:t.placement})):m,E="number"==typeof _?{mainAxis:_,altAxis:_}:Object.assign({mainAxis:0,altAxis:0},_),S=t.modifiersData.offset?t.modifiersData.offset[t.placement]:null,L={x:0,y:0};if(k){if(a){var A,O="y"===b?dt:mt,I="y"===b?pt:ht,C="y"===b?"height":"width",R=k[b],j=R+v[O],D=R-v[I],M=p?-T[C]/2:0,F=g===gt?N[C]:T[C],P=g===gt?-T[C]:-N[C],U=t.elements.arrow,V=p&&U?Pt(U):{width:0,height:0},B=t.modifiersData["arrow#persistent"]?t.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},z=B[O],q=B[I],J=Wt(0,N[C],V[C]),G=x?N[C]/2-M-J-z-E.mainAxis:F-J-z-E.mainAxis,$=x?-N[C]/2+M+J+q+E.mainAxis:P+J+q+E.mainAxis,W=t.elements.arrow&&Gt(t.elements.arrow),H=W?"y"===b?W.clientTop||0:W.clientLeft||0:0,K=null!=(A=null==S?void 0:S[b])?A:0,Q=R+$-K,Y=Wt(p?Rt(j,R+G-K-H):j,R,p?Ct(D,Q):D);k[b]=Y,L[b]=Y-R}if(s){var X,Z="x"===b?dt:mt,ee="x"===b?pt:ht,te=k[w],ne="y"===w?"height":"width",re=te+v[Z],ie=te-v[ee],ae=-1!==[dt,mt].indexOf(y),oe=null!=(X=null==S?void 0:S[w])?X:0,se=ae?re:te-N[ne]-T[ne]-oe+E.altAxis,ue=ae?te+N[ne]+T[ne]-oe-E.altAxis:ie,le=p&&ae?function(e,t,n){var r=Wt(e,t,n);return r>n?n:r}(se,te,ue):Wt(p?se:re,te,p?ue:ie);k[w]=le,L[w]=le-te}t.modifiersData[r]=L}},requiresIfExists:["offset"]};function kn(e,t,n){void 0===n&&(n=!1);var r,i,a=Lt(t),o=Lt(t)&&function(e){var t=e.getBoundingClientRect(),n=jt(t.width)/e.offsetWidth||1,r=jt(t.height)/e.offsetHeight||1;return 1!==n||1!==r}(t),s=zt(t),u=Ft(e,o,n),l={scrollLeft:0,scrollTop:0},c={x:0,y:0};return(a||!a&&!n)&&(("body"!==_t(t)||un(s))&&(l=(r=t)!==Et(r)&&Lt(r)?{scrollLeft:(i=r).scrollLeft,scrollTop:i.scrollTop}:on(r)),Lt(t)?((c=Ft(t,!0)).x+=t.clientLeft,c.y+=t.clientTop):s&&(c.x=sn(s))),{x:u.left+l.scrollLeft-c.x,y:u.top+l.scrollTop-c.y,width:u.width,height:u.height}}function Nn(e){var t=new Map,n=new Set,r=[];function i(e){n.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach((function(e){if(!n.has(e)){var r=t.get(e);r&&i(r)}})),r.push(e)}return e.forEach((function(e){t.set(e.name,e)})),e.forEach((function(e){n.has(e.name)||i(e)})),r}var Tn={placement:"bottom",modifiers:[],strategy:"absolute"};function _n(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return!t.some((function(e){return!(e&&"function"==typeof e.getBoundingClientRect)}))}function En(e){void 0===e&&(e={});var t=e,n=t.defaultModifiers,r=void 0===n?[]:n,i=t.defaultOptions,a=void 0===i?Tn:i;return function(e,t,n){void 0===n&&(n=a);var i,o,s={placement:"bottom",orderedModifiers:[],options:Object.assign({},Tn,a),modifiersData:{},elements:{reference:e,popper:t},attributes:{},styles:{}},u=[],l=!1,c={state:s,setOptions:function(n){var i="function"==typeof n?n(s.options):n;f(),s.options=Object.assign({},a,s.options,i),s.scrollParents={reference:St(e)?cn(e):e.contextElement?cn(e.contextElement):[],popper:cn(t)};var o,l,d=function(e){var t=Nn(e);return Tt.reduce((function(e,n){return e.concat(t.filter((function(e){return e.phase===n})))}),[])}((o=[].concat(r,s.options.modifiers),l=o.reduce((function(e,t){var n=e[t.name];return e[t.name]=n?Object.assign({},n,t,{options:Object.assign({},n.options,t.options),data:Object.assign({},n.data,t.data)}):t,e}),{}),Object.keys(l).map((function(e){return l[e]}))));return s.orderedModifiers=d.filter((function(e){return e.enabled})),s.orderedModifiers.forEach((function(e){var t=e.name,n=e.options,r=void 0===n?{}:n,i=e.effect;if("function"==typeof i){var a=i({state:s,name:t,instance:c,options:r}),o=function(){};u.push(a||o)}})),c.update()},forceUpdate:function(){if(!l){var e=s.elements,t=e.reference,n=e.popper;if(_n(t,n)){s.rects={reference:kn(t,Gt(n),"fixed"===s.options.strategy),popper:Pt(n)},s.reset=!1,s.placement=s.options.placement,s.orderedModifiers.forEach((function(e){return s.modifiersData[e.name]=Object.assign({},e.data)}));for(var r=0;r<s.orderedModifiers.length;r++)if(!0!==s.reset){var i=s.orderedModifiers[r],a=i.fn,o=i.options,u=void 0===o?{}:o,f=i.name;"function"==typeof a&&(s=a({state:s,options:u,name:f,instance:c})||s)}else s.reset=!1,r=-1}}},update:(i=function(){return new Promise((function(e){c.forceUpdate(),e(s)}))},function(){return o||(o=new Promise((function(e){Promise.resolve().then((function(){o=void 0,e(i())}))}))),o}),destroy:function(){f(),l=!0}};if(!_n(e,t))return c;function f(){u.forEach((function(e){return e()})),u=[]}return c.setOptions(n).then((function(e){!l&&n.onFirstUpdate&&n.onFirstUpdate(e)})),c}}var Sn=En({defaultModifiers:[{name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,n=e.instance,r=e.options,i=r.scroll,a=void 0===i||i,o=r.resize,s=void 0===o||o,u=Et(t.elements.popper),l=[].concat(t.scrollParents.reference,t.scrollParents.popper);return a&&l.forEach((function(e){e.addEventListener("scroll",n.update,en)})),s&&u.addEventListener("resize",n.update,en),function(){a&&l.forEach((function(e){e.removeEventListener("scroll",n.update,en)})),s&&u.removeEventListener("resize",n.update,en)}},data:{}},{name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,n=e.name;t.modifiersData[n]=hn({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}},{name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t=e.state,n=e.options,r=n.gpuAcceleration,i=void 0===r||r,a=n.adaptive,o=void 0===a||a,s=n.roundOffsets,u=void 0===s||s,l={placement:It(t.placement),variation:Yt(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:i,isFixed:"fixed"===t.options.strategy};null!=t.modifiersData.popperOffsets&&(t.styles.popper=Object.assign({},t.styles.popper,Zt(Object.assign({},l,{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:o,roundOffsets:u})))),null!=t.modifiersData.arrow&&(t.styles.arrow=Object.assign({},t.styles.arrow,Zt(Object.assign({},l,{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:u})))),t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-placement":t.placement})},data:{}},Ot,bn,yn,wn,Qt,{name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,n=e.name,r=t.rects.reference,i=t.rects.popper,a=t.modifiersData.preventOverflow,o=mn(t,{elementContext:"reference"}),s=mn(t,{altBoundary:!0}),u=gn(o,r),l=gn(s,i,a),c=xn(u),f=xn(l);t.modifiersData[n]={referenceClippingOffsets:u,popperEscapeOffsets:l,isReferenceHidden:c,hasPopperEscaped:f},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":c,"data-popper-escaped":f})}}]}),Ln="undefined"!=typeof Element,An="function"==typeof Map,On="function"==typeof Set,In="function"==typeof ArrayBuffer&&!!ArrayBuffer.isView;function Cn(e,t){if(e===t)return!0;if(e&&t&&"object"==h(e)&&"object"==h(t)){if(e.constructor!==t.constructor)return!1;var n,r,i,a;if(Array.isArray(e)){if((n=e.length)!=t.length)return!1;for(r=n;0!=r--;)if(!Cn(e[r],t[r]))return!1;return!0}if(An&&e instanceof Map&&t instanceof Map){if(e.size!==t.size)return!1;for(a=e.entries();!(r=a.next()).done;)if(!t.has(r.value[0]))return!1;for(a=e.entries();!(r=a.next()).done;)if(!Cn(r.value[1],t.get(r.value[0])))return!1;return!0}if(On&&e instanceof Set&&t instanceof Set){if(e.size!==t.size)return!1;for(a=e.entries();!(r=a.next()).done;)if(!t.has(r.value[0]))return!1;return!0}if(In&&ArrayBuffer.isView(e)&&ArrayBuffer.isView(t)){if((n=e.length)!=t.length)return!1;for(r=n;0!=r--;)if(e[r]!==t[r])return!1;return!0}if(e.constructor===RegExp)return e.source===t.source&&e.flags===t.flags;if(e.valueOf!==Object.prototype.valueOf)return e.valueOf()===t.valueOf();if(e.toString!==Object.prototype.toString)return e.toString()===t.toString();if((n=(i=Object.keys(e)).length)!==Object.keys(t).length)return!1;for(r=n;0!=r--;)if(!Object.prototype.hasOwnProperty.call(t,i[r]))return!1;if(Ln&&e instanceof Element)return!1;for(r=n;0!=r--;)if(("_owner"!==i[r]&&"__v"!==i[r]&&"__o"!==i[r]||!e.$$typeof)&&!Cn(e[i[r]],t[i[r]]))return!1;return!0}return e!=e&&t!=t}var Rn=function(e,t){try{return Cn(e,t)}catch(e){if((e.message||"").match(/stack|recursion/i))return console.warn("react-fast-compare cannot handle circular refs"),!1;throw e}},jn=[],Dn=function(e,t,n){void 0===n&&(n={});var r=o.useRef(null),i={onFirstUpdate:n.onFirstUpdate,placement:n.placement||"bottom",strategy:n.strategy||"absolute",modifiers:n.modifiers||jn},a=o.useState({styles:{popper:{position:i.strategy,left:"0",top:"0"},arrow:{position:"absolute"}},attributes:{}}),u=a[0],l=a[1],c=o.useMemo((function(){return{name:"updateState",enabled:!0,phase:"write",fn:function(e){var t=e.state,n=Object.keys(t.elements);s.flushSync((function(){l({styles:ct(n.map((function(e){return[e,t.styles[e]||{}]}))),attributes:ct(n.map((function(e){return[e,t.attributes[e]]})))})}))},requires:["computeStyles"]}}),[]),f=o.useMemo((function(){var e={onFirstUpdate:i.onFirstUpdate,placement:i.placement,strategy:i.strategy,modifiers:[].concat(i.modifiers,[c,{name:"applyStyles",enabled:!1}])};return Rn(r.current,e)?r.current||e:(r.current=e,e)}),[i.onFirstUpdate,i.placement,i.strategy,i.modifiers,c]),d=o.useRef();return ft((function(){d.current&&d.current.setOptions(f)}),[f]),ft((function(){if(null!=e&&null!=t){var r=(n.createPopper||Sn)(e,t,f);return d.current=r,function(){r.destroy(),d.current=null}}}),[e,t,n.createPopper]),{state:d.current?d.current.state:null,styles:u.styles,attributes:u.attributes,update:d.current?d.current.update:null,forceUpdate:d.current?d.current.forceUpdate:null}},Mn="undefined"==typeof window||"undefined"==typeof document,Fn=Mn?e.useEffect:e.useLayoutEffect;function Pn(t){var n=e.useRef(t);return Fn((function(){n.current=t}),[t]),n}function Un(e){"function"==typeof queueMicrotask?queueMicrotask(e):Promise.resolve().then(e).catch((function(e){return setTimeout((function(){throw e}))}))}function Vn(){var e=[],t=[],n={enqueue:function(e){t.push(e)},addEventListener:function(e,t,r,i){return e.addEventListener(t,r,i),n.add((function(){return e.removeEventListener(t,r,i)}))},requestAnimationFrame:function(e){function t(){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}((function(){var e=requestAnimationFrame.apply(void 0,arguments);return n.add((function(){return cancelAnimationFrame(e)}))})),nextFrame:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return n.requestAnimationFrame((function(){return n.requestAnimationFrame.apply(n,t)}))},setTimeout:function(e){function t(){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}((function(){var e=setTimeout.apply(void 0,arguments);return n.add((function(){return clearTimeout(e)}))})),microTask:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];var i={current:!0};return Un((function(){i.current&&t[0]()})),n.add((function(){i.current=!1}))},add:function(t){return e.push(t),function(){var n=e.indexOf(t);n>=0&&(0,I(e.splice(n,1),1)[0])()}},dispose:function(){var t,n=D(e.splice(0));try{for(n.s();!(t=n.n()).done;){(0,t.value)()}}catch(e){n.e(e)}finally{n.f()}},workQueue:function(){return v(p().mark((function e(){var n,r,i;return p().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:n=D(t.splice(0)),e.prev=1,n.s();case 3:if((r=n.n()).done){e.next=9;break}return i=r.value,e.next=7,i();case 7:e.next=3;break;case 9:e.next=14;break;case 11:e.prev=11,e.t0=e.catch(1),n.e(e.t0);case 14:return e.prev=14,n.f(),e.finish(14);case 17:case"end":return e.stop()}}),e,null,[[1,11,14,17]])})))()}};return n}function Bn(){var t=I(e.useState(Vn),1)[0];return e.useEffect((function(){return function(){return t.dispose()}}),[t]),t}var zn,qn=function(t){var n=Pn(t);return e.useCallback((function(){return n.current.apply(n,arguments)}),[n])},Jn={serverHandoffComplete:!1};function Gn(){var t=I(e.useState(Jn.serverHandoffComplete),2),n=t[0],r=t[1];return e.useEffect((function(){!0!==n&&r(!0)}),[n]),e.useEffect((function(){!1===Jn.serverHandoffComplete&&(Jn.serverHandoffComplete=!0)}),[]),n}var $n=0;function Wn(){return++$n}var Hn=null!=(zn=e.useId)?zn:function(){var t=Gn(),n=I(e.useState(t?Wn:null),2),r=n[0],i=n[1];return Fn((function(){null===r&&i(Wn())}),[r]),null!=r?""+r:void 0};function Kn(e,t){if(e in t){for(var n=t[e],r=arguments.length,i=new Array(r>2?r-2:0),a=2;a<r;a++)i[a-2]=arguments[a];return"function"==typeof n?n.apply(void 0,i):n}var o=new Error('Tried to handle "'.concat(e,'" but there is no handler defined. Only defined handlers are: ').concat(Object.keys(t).map((function(e){return'"'.concat(e,'"')})).join(", "),"."));throw Error.captureStackTrace&&Error.captureStackTrace(o,Kn),o}function Qn(e){return Mn?null:e instanceof Node?e.ownerDocument:null!=e&&e.hasOwnProperty("current")&&e.current instanceof Node?e.current.ownerDocument:document}var Yn=["[contentEditable=true]","[tabindex]","a[href]","area[href]","button:not([disabled])","iframe","input:not([disabled])","select:not([disabled])","textarea:not([disabled])"].map((function(e){return"".concat(e,":not([tabindex='-1'])")})).join(","),Xn=function(e){return e[e.First=1]="First",e[e.Previous=2]="Previous",e[e.Next=4]="Next",e[e.Last=8]="Last",e[e.WrapAround=16]="WrapAround",e[e.NoScroll=32]="NoScroll",e}(Xn||{}),Zn=function(e){return e[e.Error=0]="Error",e[e.Overflow=1]="Overflow",e[e.Success=2]="Success",e[e.Underflow=3]="Underflow",e}(Zn||{}),er=function(e){return e[e.Previous=-1]="Previous",e[e.Next=1]="Next",e}(er||{});function tr(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:document.body;return null==e?[]:Array.from(e.querySelectorAll(Yn))}var nr=function(e){return e[e.Strict=0]="Strict",e[e.Loose=1]="Loose",e}(nr||{});function rr(e){var t,n,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return e!==(null==(n=Qn(e))?void 0:n.body)&&Kn(r,(b(t={},0,(function(){return e.matches(Yn)})),b(t,1,(function(){for(var t=e;null!==t;){if(t.matches(Yn))return!0;t=t.parentElement}return!1})),t))}function ir(e){var t=Qn(e);Vn().nextFrame((function(){t&&!rr(t.activeElement,0)&&ar(e)}))}function ar(e){null==e||e.focus({preventScroll:!0})}var or=["textarea","input"].join(",");function sr(e){var t,n;return null!=(n=null==(t=null==e?void 0:e.matches)?void 0:t.call(e,or))&&n}function ur(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(e){return e};return e.slice().sort((function(e,n){var r=t(e),i=t(n);if(null===r||null===i)return 0;var a=r.compareDocumentPosition(i);return a&Node.DOCUMENT_POSITION_FOLLOWING?-1:a&Node.DOCUMENT_POSITION_PRECEDING?1:0}))}function lr(e,t){var n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,i=Array.isArray(e)?e.length>0?e[0].ownerDocument:document:e.ownerDocument,a=Array.isArray(e)?n?ur(e):e:tr(e);r=null!=r?r:i.activeElement;var o,s=function(){if(5&t)return 1;if(10&t)return-1;throw new Error("Missing Focus.First, Focus.Previous, Focus.Next or Focus.Last")}(),u=function(){if(1&t)return 0;if(2&t)return Math.max(0,a.indexOf(r))-1;if(4&t)return Math.max(0,a.indexOf(r))+1;if(8&t)return a.length-1;throw new Error("Missing Focus.First, Focus.Previous, Focus.Next or Focus.Last")}(),l=32&t?{preventScroll:!0}:{},c=0,f=a.length;do{if(c>=f||c+f<=0)return 0;var d=u+c;if(16&t)d=(d+f)%f;else{if(d<0)return 3;if(d>=f)return 1}null==(o=a[d])||o.focus(l),c+=s}while(o!==i.activeElement);return 6&t&&sr(o)&&o.select(),o.hasAttribute("tabindex")||o.setAttribute("tabindex","0"),2}function cr(t,n,r){var i=Pn(n);e.useEffect((function(){function e(e){i.current(e)}return document.addEventListener(t,e,r),function(){return document.removeEventListener(t,e,r)}}),[t,r])}function fr(t,n){var r=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],i=e.useRef(!1);function a(e,r){if(i.current&&!e.defaultPrevented){var a=function e(t){return"function"==typeof t?e(t()):Array.isArray(t)||t instanceof Set?t:[t]}(t),o=r(e);if(null!==o&&o.getRootNode().contains(o)){var s,u=D(a);try{for(u.s();!(s=u.n()).done;){var l=s.value;if(null!==l){var c=l instanceof HTMLElement?l:l.current;if(null!=c&&c.contains(o))return}}}catch(e){u.e(e)}finally{u.f()}return!rr(o,nr.Loose)&&-1!==o.tabIndex&&e.preventDefault(),n(e,o)}}}e.useEffect((function(){requestAnimationFrame((function(){i.current=r}))}),[r]);var o=e.useRef(null);cr("mousedown",(function(e){var t,n;i.current&&(o.current=(null==(n=null==(t=e.composedPath)?void 0:t.call(e))?void 0:n[0])||e.target)}),!0),cr("click",(function(e){!o.current||(a(e,(function(){return o.current})),o.current=null)}),!0),cr("blur",(function(e){return a(e,(function(){return window.document.activeElement instanceof HTMLIFrameElement?window.document.activeElement:null}))}),!0)}function dr(e){var t;if(e.type)return e.type;var n=null!=(t=e.as)?t:"button";return"string"==typeof n&&"button"===n.toLowerCase()?"button":void 0}function pr(t,n){var r=I(e.useState((function(){return dr(t)})),2),i=r[0],a=r[1];return Fn((function(){a(dr(t))}),[t.type,t.as]),Fn((function(){i||!n.current||n.current instanceof HTMLButtonElement&&!n.current.hasAttribute("type")&&a("button")}),[i,n]),i}var hr=Symbol();function mr(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];var i=e.useRef(n);e.useEffect((function(){i.current=n}),[n]);var a=qn((function(e){var t,n=D(i.current);try{for(n.s();!(t=n.n()).done;){var r=t.value;null!=r&&("function"==typeof r?r(e):r.current=e)}}catch(e){n.e(e)}finally{n.f()}}));return n.every((function(e){return null==e||(null==e?void 0:e[hr])}))?void 0:a}var vr=function(e){return e[e.First=0]="First",e[e.Previous=1]="Previous",e[e.Next=2]="Next",e[e.Last=3]="Last",e[e.Specific=4]="Specific",e[e.Nothing=5]="Nothing",e}(vr||{});function yr(e,t){var n=t.resolveItems();if(n.length<=0)return null;var r=t.resolveActiveIndex(),i=null!=r?r:-1,a=function(){switch(e.focus){case 0:return n.findIndex((function(e){return!t.resolveDisabled(e)}));case 1:var r=n.slice().reverse().findIndex((function(e,n,r){return!(-1!==i&&r.length-n-1>=i)&&!t.resolveDisabled(e)}));return-1===r?r:n.length-1-r;case 2:return n.findIndex((function(e,n){return!(n<=i)&&!t.resolveDisabled(e)}));case 3:var a=n.slice().reverse().findIndex((function(e){return!t.resolveDisabled(e)}));return-1===a?a:n.length-1-a;case 4:return n.findIndex((function(n){return t.resolveId(n)===e.id}));case 5:return null;default:!function(e){throw new Error("Unexpected object: "+e)}(e)}}();return-1===a?r:a}var gr=["static"],xr=["unmount"],br=["as","children","refName"],wr=function(e){return e[e.None=0]="None",e[e.RenderStrategy=1]="RenderStrategy",e[e.Static=2]="Static",e}(wr||{}),kr=function(e){return e[e.Unmount=0]="Unmount",e[e.Hidden=1]="Hidden",e}(kr||{});function Nr(e){var t=e.ourProps,n=e.theirProps,r=e.slot,i=e.defaultTag,a=e.features,o=e.visible,s=void 0===o||o,u=e.name,l=Er(n,t);if(s)return Tr(l,r,i,u);var c=null!=a?a:0;if(2&c){var f=l.static,p=void 0!==f&&f,h=S(l,gr);if(p)return Tr(h,r,i,u)}if(1&c){var m,v=l.unmount,y=void 0===v||v,g=S(l,xr);return Kn(y?0:1,(b(m={},0,(function(){return null})),b(m,1,(function(){return Tr(d(d({},g),{},{hidden:!0,style:{display:"none"}}),r,i,u)})),m))}return Tr(l,r,i,u)}function Tr(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2?arguments[2]:void 0,i=arguments.length>3?arguments[3]:void 0,a=Ar(t,["unmount","static"]),o=a.as,s=void 0===o?r:o,u=a.children,l=a.refName,c=void 0===l?"ref":l,f=S(a,br),d=void 0!==t.ref?b({},c,t.ref):{},p="function"==typeof u?u(n):u;f.className&&"function"==typeof f.className&&(f.className=f.className(n));var h={};if(n){for(var m=!1,v=[],y=0,g=Object.entries(n);y<g.length;y++){var x=I(g[y],2),w=x[0],k=x[1];"boolean"==typeof k&&(m=!0),!0===k&&v.push(w)}m&&(h["data-headlessui-state"]=v.join(" "))}if(s===e.Fragment&&Object.keys(Lr(f)).length>0){if(!e.isValidElement(p)||Array.isArray(p)&&p.length>1)throw new Error(['Passing props on "Fragment"!',"","The current component <".concat(i,' /> is rendering a "Fragment".'),"However we need to passthrough the following props:",Object.keys(f).map((function(e){return"  - ".concat(e)})).join("\n"),"","You can apply a few solutions:",['Add an `as="..."` prop, to ensure that we render an actual element instead of a "Fragment".',"Render a single element as the child so that we can forward the props onto that element."].map((function(e){return"  - ".concat(e)})).join("\n")].join("\n"));return e.cloneElement(p,Object.assign({},Er(p.props,Lr(Ar(f,["ref"]))),h,d,_r(p.ref,d.ref)))}return e.createElement(s,Object.assign({},Ar(f,["ref"]),s!==e.Fragment&&d,s!==e.Fragment&&h),p)}function _r(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return{ref:t.every((function(e){return null==e}))?void 0:function(e){var n,r=D(t);try{for(r.s();!(n=r.n()).done;){var i=n.value;null!=i&&("function"==typeof i?i(e):i.current=e)}}catch(e){r.e(e)}finally{r.f()}}}}function Er(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];if(0===t.length)return{};if(1===t.length)return t[0];for(var r={},i={},a=0,o=t;a<o.length;a++){var s=o[a];for(var u in s)u.startsWith("on")&&"function"==typeof s[u]?(null!=i[u]||(i[u]=[]),i[u].push(s[u])):r[u]=s[u]}if(r.disabled||r["aria-disabled"])return Object.assign(r,Object.fromEntries(Object.keys(i).map((function(e){return[e,void 0]}))));var l=function(e){Object.assign(r,b({},e,(function(t){for(var n=i[e],r=arguments.length,a=new Array(r>1?r-1:0),o=1;o<r;o++)a[o-1]=arguments[o];var s,u=D(n);try{for(u.s();!(s=u.n()).done;){var l=s.value;if((t instanceof Event||(null==t?void 0:t.nativeEvent)instanceof Event)&&t.defaultPrevented)return;l.apply(void 0,[t].concat(a))}}catch(e){u.e(e)}finally{u.f()}})))};for(var c in i)l(c);return r}function Sr(t){var n;return Object.assign(e.forwardRef(t),{displayName:null!=(n=t.displayName)?n:t.name})}function Lr(e){var t=Object.assign({},e);for(var n in t)void 0===t[n]&&delete t[n];return t}function Ar(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],r=Object.assign({},e),i=D(n);try{for(i.s();!(t=i.n()).done;){var a=t.value;a in r&&delete r[a]}}catch(e){i.e(e)}finally{i.f()}return r}function Or(e){for(var t=e.parentElement,n=null;t&&!(t instanceof HTMLFieldSetElement);)t instanceof HTMLLegendElement&&(n=t),t=t.parentElement;var r=""===(null==t?void 0:t.getAttribute("disabled"));return(!r||!function(e){if(!e)return!1;for(var t=e.previousElementSibling;null!==t;){if(t instanceof HTMLLegendElement)return!1;t=t.previousElementSibling}return!0}(n))&&r}var Ir=["features"],Cr=function(e){return e[e.None=1]="None",e[e.Focusable=2]="Focusable",e[e.Hidden=4]="Hidden",e}(Cr||{}),Rr=Sr((function(e,t){var n=e.features,r=void 0===n?1:n,i=S(e,Ir);return Nr({ourProps:{ref:t,"aria-hidden":2==(2&r)||void 0,style:d({position:"fixed",top:1,left:1,width:1,height:0,padding:0,margin:-1,overflow:"hidden",clip:"rect(0, 0, 0, 0)",whiteSpace:"nowrap",borderWidth:"0"},4==(4&r)&&2!=(2&r)&&{display:"none"})},theirProps:i,slot:{},defaultTag:"div",name:"Hidden"})})),jr=e.createContext(null);jr.displayName="OpenClosedContext";var Dr=function(e){return e[e.Open=0]="Open",e[e.Closed=1]="Closed",e}(Dr||{});function Mr(){return e.useContext(jr)}function Fr(t){var n=t.value,r=t.children;return e.createElement(jr.Provider,{value:n},r)}var Pr=function(e){return e.Space=" ",e.Enter="Enter",e.Escape="Escape",e.Backspace="Backspace",e.Delete="Delete",e.ArrowLeft="ArrowLeft",e.ArrowUp="ArrowUp",e.ArrowRight="ArrowRight",e.ArrowDown="ArrowDown",e.Home="Home",e.End="End",e.PageUp="PageUp",e.PageDown="PageDown",e.Tab="Tab",e}(Pr||{});function Ur(t,n){var r=e.useRef([]),i=qn(t);e.useEffect((function(){var e,t=C(r.current),a=D(n.entries());try{for(a.s();!(e=a.n()).done;){var o=I(e.value,2),s=o[0],u=o[1];if(r.current[s]!==u){var l=i(n,t);return r.current=n,l}}}catch(e){a.e(e)}finally{a.f()}}),[i].concat(C(n)))}var Vr=function(e){return e[e.Forwards=0]="Forwards",e[e.Backwards=1]="Backwards",e}(Vr||{});function Br(){var t=e.useRef(0);return function(t,n,r){var i=Pn(n);e.useEffect((function(){function e(e){i.current(e)}return window.addEventListener(t,e,r),function(){return window.removeEventListener(t,e,r)}}),[t,r])}("keydown",(function(e){"Tab"===e.key&&(t.current=e.shiftKey?1:0)}),!0),t}function zr(){var t=e.useRef(!1);return Fn((function(){return t.current=!0,function(){t.current=!1}}),[]),t}function qr(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return e.useMemo((function(){return Qn.apply(void 0,n)}),[].concat(n))}function Jr(t,n,r,i){var a=Pn(r);e.useEffect((function(){function e(e){a.current(e)}return(t=null!=t?t:window).addEventListener(n,e,i),function(){return t.removeEventListener(n,e,i)}}),[t,n,i])}var Gr=["initialFocus","containers","features"],$r=function(e){return e[e.None=1]="None",e[e.InitialFocus=2]="InitialFocus",e[e.TabLock=4]="TabLock",e[e.FocusLock=8]="FocusLock",e[e.RestoreFocus=16]="RestoreFocus",e[e.All=30]="All",e}($r||{}),Wr=Object.assign(Sr((function(t,n){var r=e.useRef(null),i=mr(r,n),a=t.initialFocus,o=t.containers,s=t.features,u=void 0===s?30:s,l=S(t,Gr);Gn()||(u=1);var c=qr(r);!function(t,n){var r=t.ownerDocument,i=e.useRef(null);Jr(null==r?void 0:r.defaultView,"focusout",(function(e){!n||i.current||(i.current=e.target)}),!0),Ur((function(){n||((null==r?void 0:r.activeElement)===(null==r?void 0:r.body)&&ar(i.current),i.current=null)}),[n]);var a=e.useRef(!1);e.useEffect((function(){return a.current=!1,function(){a.current=!0,Un((function(){!a.current||(ar(i.current),i.current=null)}))}}),[])}({ownerDocument:c},Boolean(16&u));var f=function(t,n){var r=t.ownerDocument,i=t.container,a=t.initialFocus,o=e.useRef(null),s=zr();return Ur((function(){if(n){var e=i.current;!e||Un((function(){if(s.current){var t=null==r?void 0:r.activeElement;if(null!=a&&a.current){if((null==a?void 0:a.current)===t)return void(o.current=t)}else if(e.contains(t))return void(o.current=t);null!=a&&a.current?ar(a.current):lr(e,Xn.First)===Zn.Error&&console.warn("There are no focusable elements inside the <FocusTrap />"),o.current=null==r?void 0:r.activeElement}}))}}),[n]),o}({ownerDocument:c,container:r,initialFocus:a},Boolean(2&u));!function(e,t){var n=e.ownerDocument,r=e.container,i=e.containers,a=e.previousActiveElement,o=zr();Jr(null==n?void 0:n.defaultView,"focus",(function(e){if(t&&o.current){var n=new Set(null==i?void 0:i.current);n.add(r);var s=a.current;if(s){var u=e.target;u&&u instanceof HTMLElement?function(e,t){var n,r,i=D(e);try{for(i.s();!(r=i.n()).done;){if(null!=(n=r.value.current)&&n.contains(t))return!0}}catch(e){i.e(e)}finally{i.f()}return!1}(n,u)?(a.current=u,ar(u)):(e.preventDefault(),e.stopPropagation(),ar(s)):ar(a.current)}}}),!0)}({ownerDocument:c,container:r,containers:o,previousActiveElement:f},Boolean(8&u));var d=Br(),p=qn((function(){var e,t=r.current;!t||Kn(d.current,(b(e={},Vr.Forwards,(function(){return lr(t,Xn.First)})),b(e,Vr.Backwards,(function(){return lr(t,Xn.Last)})),e))})),h={ref:i};return e.createElement(e.Fragment,null,Boolean(4&u)&&e.createElement(Rr,{as:"button",type:"button",onFocus:p,features:Cr.Focusable}),Nr({ourProps:h,theirProps:l,defaultTag:"div",name:"FocusTrap"}),Boolean(4&u)&&e.createElement(Rr,{as:"button",type:"button",onFocus:p,features:Cr.Focusable}))})),{features:$r});var Hr=new Set,Kr=new Map;function Qr(e){e.setAttribute("aria-hidden","true"),e.inert=!0}function Yr(e){var t=Kr.get(e);!t||(null===t["aria-hidden"]?e.removeAttribute("aria-hidden"):e.setAttribute("aria-hidden",t["aria-hidden"]),e.inert=t.inert)}var Xr=e.createContext(!1);function Zr(t){return e.createElement(Xr.Provider,{value:t.force},t.children)}var ei=["target"];function ti(t){var n=e.useContext(Xr),r=e.useContext(ai),i=qr(t),a=e.useState((function(){if(!n&&null!==r||Mn)return null;var e=null==i?void 0:i.getElementById("headlessui-portal-root");if(e)return e;if(null===i)return null;var t=i.createElement("div");return t.setAttribute("id","headlessui-portal-root"),i.body.appendChild(t)})),o=I(a,2),s=o[0],u=o[1];return e.useEffect((function(){null!==s&&(null!=i&&i.body.contains(s)||null==i||i.body.appendChild(s))}),[s,i]),e.useEffect((function(){n||null!==r&&u(r.current)}),[r,u,n]),s}var ni=e.Fragment,ri=Sr((function(n,r){var i=n,a=e.useRef(null),o=mr(function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return Object.assign(e,b({},hr,t))}((function(e){a.current=e})),r),s=qr(a),u=ti(a),l=e.useState((function(){var e;return Mn?null:null!=(e=null==s?void 0:s.createElement("div"))?e:null})),c=I(l,1)[0],f=Gn(),d=e.useRef(!1);return Fn((function(){if(d.current=!1,u&&c)return u.contains(c)||(c.setAttribute("data-headlessui-portal",""),u.appendChild(c)),function(){d.current=!0,Un((function(){var e;!d.current||!u||!c||(u.removeChild(c),u.childNodes.length<=0&&(null==(e=u.parentElement)||e.removeChild(u)))}))}}),[u,c]),f&&u&&c?t.createPortal(Nr({ourProps:{ref:o},theirProps:i,defaultTag:ni,name:"Portal"}),c):null})),ii=e.Fragment,ai=e.createContext(null),oi=Sr((function(t,n){var r=t.target,i=S(t,ei),a={ref:mr(n)};return e.createElement(ai.Provider,{value:r},Nr({ourProps:a,theirProps:i,defaultTag:ii,name:"Popover.Group"}))})),si=Object.assign(ri,{Group:oi}),ui=e.createContext(null);function li(){var t=e.useContext(ui);if(null===t){var n=new Error("You used a <Description /> component, but it is not inside a relevant parent.");throw Error.captureStackTrace&&Error.captureStackTrace(n,li),n}return t}function ci(){var t=I(e.useState([]),2),n=t[0],r=t[1];return[n.length>0?n.join(" "):void 0,e.useMemo((function(){return function(t){var n=qn((function(e){return r((function(t){return[].concat(C(t),[e])})),function(){return r((function(t){var n=t.slice(),r=n.indexOf(e);return-1!==r&&n.splice(r,1),n}))}})),i=e.useMemo((function(){return{register:n,slot:t.slot,name:t.name,props:t.props}}),[n,t.slot,t.name,t.props]);return e.createElement(ui.Provider,{value:i},t.children)}}),[r])]}var fi=Sr((function(e,t){var n=li(),r="headlessui-description-".concat(Hn()),i=mr(t);Fn((function(){return n.register(r)}),[r,n.register]);var a=e;return Nr({ourProps:d(d({ref:i},n.props),{},{id:r}),theirProps:a,slot:n.slot||{},defaultTag:"p",name:n.name||"Description"})})),di=e.createContext((function(){}));di.displayName="StackContext";var pi=function(e){return e[e.Add=0]="Add",e[e.Remove=1]="Remove",e}(pi||{});function hi(t){var n=t.children,r=t.onUpdate,i=t.type,a=t.element,o=t.enabled,s=e.useContext(di),u=qn((function(){null==r||r.apply(void 0,arguments),s.apply(void 0,arguments)}));return Fn((function(){var e=void 0===o||!0===o;return e&&u(0,i,a),function(){e&&u(1,i,a)}}),[u,i,a,o]),e.createElement(di.Provider,{value:u},n)}var mi=["open","onClose","initialFocus","__demoMode"],vi=function(e){return e[e.Open=0]="Open",e[e.Closed=1]="Closed",e}(vi||{}),yi=function(e){return e[e.SetTitleId=0]="SetTitleId",e}(yi||{}),gi=b({},0,(function(e,t){return e.titleId===t.id?e:d(d({},e),{},{titleId:t.id})})),xi=e.createContext(null);function bi(t){var n=e.useContext(xi);if(null===n){var r=new Error("<".concat(t," /> is missing a parent <Dialog /> component."));throw Error.captureStackTrace&&Error.captureStackTrace(r,bi),r}return n}function wi(t,n){e.useEffect((function(){var e;if(n&&t){var r=Vn(),i=t.documentElement,a=(null!=(e=t.defaultView)?e:window).innerWidth-i.clientWidth;if(u(i,"overflow","hidden"),a>0){var o=i.clientWidth-i.offsetWidth;u(i,"paddingRight","".concat(a-o,"px"))}if(/iPhone/gi.test(window.navigator.platform)||/Mac/gi.test(window.navigator.platform)&&window.navigator.maxTouchPoints>0){var s=window.pageYOffset;u(i,"position","fixed"),u(i,"marginTop","-".concat(s,"px")),u(i,"width","100%"),r.add((function(){return window.scrollTo(0,s)}))}return r.dispose}function u(e,t,n){var i=e.style.getPropertyValue(t);return Object.assign(e.style,b({},t,n)),r.add((function(){Object.assign(e.style,b({},t,i))}))}}),[t,n])}function ki(e,t){return Kn(t.type,gi,e,t)}xi.displayName="DialogContext";var Ni,Ti=wr.RenderStrategy|wr.Static,_i=Sr((function(t,n){var r,i=t.open,a=t.onClose,o=t.initialFocus,s=t.__demoMode,u=void 0!==s&&s,l=S(t,mi),c=I(e.useState(0),2),f=c[0],d=c[1],p=Mr();void 0===i&&null!==p&&(i=Kn(p,(b(r={},Dr.Open,!0),b(r,Dr.Closed,!1),r)));var h=e.useRef(new Set),m=e.useRef(null),v=mr(m,n),y=e.useRef(null),g=qr(m),x=t.hasOwnProperty("open")||null!==p,w=t.hasOwnProperty("onClose");if(!x&&!w)throw new Error("You have to provide an `open` and an `onClose` prop to the `Dialog` component.");if(!x)throw new Error("You provided an `onClose` prop to the `Dialog`, but forgot an `open` prop.");if(!w)throw new Error("You provided an `open` prop to the `Dialog`, but forgot an `onClose` prop.");if("boolean"!=typeof i)throw new Error("You provided an `open` prop to the `Dialog`, but the value is not a boolean. Received: ".concat(i));if("function"!=typeof a)throw new Error("You provided an `onClose` prop to the `Dialog`, but the value is not a function. Received: ".concat(a));var k=i?0:1,N=I(e.useReducer(ki,{titleId:null,descriptionId:null,panelRef:e.createRef()}),2),T=N[0],_=N[1],E=qn((function(){return a(!1)})),L=qn((function(e){return _({type:0,id:e})})),A=!!Gn()&&(!u&&0===k),O=f>1,R=null!==e.useContext(xi),j=O?"parent":"leaf";(function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];Fn((function(){if(t&&e.current){var n=e.current,r=Qn(n);if(r){Hr.add(n);var i,a=D(Kr.keys());try{for(a.s();!(i=a.n()).done;){var o=i.value;o.contains(n)&&(Yr(o),Kr.delete(o))}}catch(e){a.e(e)}finally{a.f()}return r.querySelectorAll("body > *").forEach((function(e){if(e instanceof HTMLElement){var t,n=D(Hr);try{for(n.s();!(t=n.n()).done;){var r=t.value;if(e.contains(r))return}}catch(e){n.e(e)}finally{n.f()}1===Hr.size&&(Kr.set(e,{"aria-hidden":e.getAttribute("aria-hidden"),inert:e.inert}),Qr(e))}})),function(){if(Hr.delete(n),Hr.size>0)r.querySelectorAll("body > *").forEach((function(e){if(e instanceof HTMLElement&&!Kr.has(e)){var t,n=D(Hr);try{for(n.s();!(t=n.n()).done;){var r=t.value;if(e.contains(r))return}}catch(e){n.e(e)}finally{n.f()}Kr.set(e,{"aria-hidden":e.getAttribute("aria-hidden"),inert:e.inert}),Qr(e)}}));else{var e,t=D(Kr.keys());try{for(t.s();!(e=t.n()).done;){var i=e.value;Yr(i),Kr.delete(i)}}catch(e){t.e(e)}finally{t.f()}}}}}}),[t])})(m,!!O&&A),fr((function(){var e,t;return[].concat(C(Array.from(null!=(e=null==g?void 0:g.querySelectorAll("body > *, [data-headlessui-portal]"))?e:[]).filter((function(e){return!(!(e instanceof HTMLElement)||e.contains(y.current)||T.panelRef.current&&e.contains(T.panelRef.current))}))),[null!=(t=T.panelRef.current)?t:m.current])}),E,A&&!O),Jr(null==g?void 0:g.defaultView,"keydown",(function(e){e.defaultPrevented||e.key===Pr.Escape&&0===k&&(O||(e.preventDefault(),e.stopPropagation(),E()))})),wi(g,0===k&&!R),e.useEffect((function(){if(0===k&&m.current){var e=new IntersectionObserver((function(e){var t,n=D(e);try{for(n.s();!(t=n.n()).done;){var r=t.value;0===r.boundingClientRect.x&&0===r.boundingClientRect.y&&0===r.boundingClientRect.width&&0===r.boundingClientRect.height&&E()}}catch(e){n.e(e)}finally{n.f()}}));return e.observe(m.current),function(){return e.disconnect()}}}),[k,m,E]);var M=I(ci(),2),F=M[0],P=M[1],U="headlessui-dialog-".concat(Hn()),V=e.useMemo((function(){return[{dialogState:k,close:E,setTitleId:L},T]}),[k,T,E,L]),B=e.useMemo((function(){return{open:0===k}}),[k]),z={ref:v,id:U,role:"dialog","aria-modal":0===k||void 0,"aria-labelledby":T.titleId,"aria-describedby":F};return e.createElement(hi,{type:"Dialog",enabled:0===k,element:m,onUpdate:qn((function(e,t,n){var r;"Dialog"===t&&Kn(e,(b(r={},pi.Add,(function(){h.current.add(n),d((function(e){return e+1}))})),b(r,pi.Remove,(function(){h.current.add(n),d((function(e){return e-1}))})),r))}))},e.createElement(Zr,{force:!0},e.createElement(si,null,e.createElement(xi.Provider,{value:V},e.createElement(si.Group,{target:m},e.createElement(Zr,{force:!1},e.createElement(P,{slot:B,name:"Dialog.Description"},e.createElement(Wr,{initialFocus:o,containers:h,features:A?Kn(j,{parent:Wr.features.RestoreFocus,leaf:Wr.features.All&~Wr.features.FocusLock}):Wr.features.None},Nr({ourProps:z,theirProps:l,slot:B,defaultTag:"div",features:Ti,visible:0===k,name:"Dialog"})))))))),e.createElement(Rr,{features:Cr.Hidden,ref:y}))})),Ei=Sr((function(t,n){var r=I(bi("Dialog.Overlay"),1)[0],i=r.dialogState,a=r.close,o=mr(n),s="headlessui-dialog-overlay-".concat(Hn()),u=qn((function(e){if(e.target===e.currentTarget){if(Or(e.currentTarget))return e.preventDefault();e.preventDefault(),e.stopPropagation(),a()}}));return Nr({ourProps:{ref:o,id:s,"aria-hidden":!0,onClick:u},theirProps:t,slot:e.useMemo((function(){return{open:0===i}}),[i]),defaultTag:"div",name:"Dialog.Overlay"})})),Si=Sr((function(t,n){var r=I(bi("Dialog.Backdrop"),2),i=r[0].dialogState,a=r[1],o=mr(n),s="headlessui-dialog-backdrop-".concat(Hn());e.useEffect((function(){if(null===a.panelRef.current)throw new Error("A <Dialog.Backdrop /> component is being used, but a <Dialog.Panel /> component is missing.")}),[a.panelRef]);var u=e.useMemo((function(){return{open:0===i}}),[i]);return e.createElement(Zr,{force:!0},e.createElement(si,null,Nr({ourProps:{ref:o,id:s,"aria-hidden":!0},theirProps:t,slot:u,defaultTag:"div",name:"Dialog.Backdrop"})))})),Li=Sr((function(t,n){var r=I(bi("Dialog.Panel"),2),i=r[0].dialogState,a=mr(n,r[1].panelRef),o="headlessui-dialog-panel-".concat(Hn()),s=e.useMemo((function(){return{open:0===i}}),[i]),u=qn((function(e){e.stopPropagation()}));return Nr({ourProps:{ref:a,id:o,onClick:u},theirProps:t,slot:s,defaultTag:"div",name:"Dialog.Panel"})})),Ai=Sr((function(t,n){var r=I(bi("Dialog.Title"),1)[0],i=r.dialogState,a=r.setTitleId,o="headlessui-dialog-title-".concat(Hn()),s=mr(n);e.useEffect((function(){return a(o),function(){return a(null)}}),[o,a]);var u=e.useMemo((function(){return{open:0===i}}),[i]);return Nr({ourProps:{ref:s,id:o},theirProps:t,slot:u,defaultTag:"h2",name:"Dialog.Title"})})),Oi=Object.assign(_i,{Backdrop:Si,Panel:Li,Overlay:Ei,Title:Ai,Description:fi}),Ii=["disabled"],Ci=function(e){return e[e.Open=0]="Open",e[e.Closed=1]="Closed",e}(Ci||{}),Ri=function(e){return e[e.Pointer=0]="Pointer",e[e.Other=1]="Other",e}(Ri||{}),ji=function(e){return e[e.OpenMenu=0]="OpenMenu",e[e.CloseMenu=1]="CloseMenu",e[e.GoToItem=2]="GoToItem",e[e.Search=3]="Search",e[e.ClearSearch=4]="ClearSearch",e[e.RegisterItem=5]="RegisterItem",e[e.UnregisterItem=6]="UnregisterItem",e}(ji||{});function Di(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(e){return e},n=null!==e.activeItemIndex?e.items[e.activeItemIndex]:null,r=ur(t(e.items.slice()),(function(e){return e.dataRef.current.domRef.current})),i=n?r.indexOf(n):null;return-1===i&&(i=null),{items:r,activeItemIndex:i}}var Mi=(b(Ni={},1,(function(e){return 1===e.menuState?e:d(d({},e),{},{activeItemIndex:null,menuState:1})})),b(Ni,0,(function(e){return 0===e.menuState?e:d(d({},e),{},{menuState:0})})),b(Ni,2,(function(e,t){var n,r=Di(e),i=yr(t,{resolveItems:function(){return r.items},resolveActiveIndex:function(){return r.activeItemIndex},resolveId:function(e){return e.id},resolveDisabled:function(e){return e.dataRef.current.disabled}});return d(d(d({},e),r),{},{searchQuery:"",activeItemIndex:i,activationTrigger:null!=(n=t.trigger)?n:1})})),b(Ni,3,(function(e,t){var n=""!==e.searchQuery?0:1,r=e.searchQuery+t.value.toLowerCase(),i=(null!==e.activeItemIndex?e.items.slice(e.activeItemIndex+n).concat(e.items.slice(0,e.activeItemIndex+n)):e.items).find((function(e){var t;return(null==(t=e.dataRef.current.textValue)?void 0:t.startsWith(r))&&!e.dataRef.current.disabled})),a=i?e.items.indexOf(i):-1;return-1===a||a===e.activeItemIndex?d(d({},e),{},{searchQuery:r}):d(d({},e),{},{searchQuery:r,activeItemIndex:a,activationTrigger:1})})),b(Ni,4,(function(e){return""===e.searchQuery?e:d(d({},e),{},{searchQuery:"",searchActiveItemIndex:null})})),b(Ni,5,(function(e,t){var n=Di(e,(function(e){return[].concat(C(e),[{id:t.id,dataRef:t.dataRef}])}));return d(d({},e),n)})),b(Ni,6,(function(e,t){var n=Di(e,(function(e){var n=e.findIndex((function(e){return e.id===t.id}));return-1!==n&&e.splice(n,1),e}));return d(d(d({},e),n),{},{activationTrigger:1})})),Ni),Fi=e.createContext(null);function Pi(t){var n=e.useContext(Fi);if(null===n){var r=new Error("<".concat(t," /> is missing a parent <Menu /> component."));throw Error.captureStackTrace&&Error.captureStackTrace(r,Pi),r}return n}function Ui(e,t){return Kn(t.type,Mi,e,t)}Fi.displayName="MenuContext";var Vi=e.Fragment,Bi=Sr((function(t,n){var r,i=e.useReducer(Ui,{menuState:1,buttonRef:e.createRef(),itemsRef:e.createRef(),items:[],searchQuery:"",activeItemIndex:null,activationTrigger:1}),a=I(i,2),o=a[0],s=o.menuState,u=o.itemsRef,l=o.buttonRef,c=a[1],f=mr(n);fr([l,u],(function(e,t){var n;c({type:1}),rr(t,nr.Loose)||(e.preventDefault(),null==(n=l.current)||n.focus())}),0===s);var d=qn((function(){c({type:1})})),p=e.useMemo((function(){return{open:0===s,close:d}}),[s,d]),h=t,m={ref:f};return e.createElement(Fi.Provider,{value:i},e.createElement(Fr,{value:Kn(s,(r={},b(r,0,Dr.Open),b(r,1,Dr.Closed),r))},Nr({ourProps:m,theirProps:h,slot:p,defaultTag:Vi,name:"Menu"})))})),zi=Sr((function(t,n){var r,i=I(Pi("Menu.Button"),2),a=i[0],o=i[1],s=mr(a.buttonRef,n),u="headlessui-menu-button-".concat(Hn()),l=Bn(),c=qn((function(e){switch(e.key){case Pr.Space:case Pr.Enter:case Pr.ArrowDown:e.preventDefault(),e.stopPropagation(),o({type:0}),l.nextFrame((function(){return o({type:2,focus:vr.First})}));break;case Pr.ArrowUp:e.preventDefault(),e.stopPropagation(),o({type:0}),l.nextFrame((function(){return o({type:2,focus:vr.Last})}))}})),f=qn((function(e){if(e.key===Pr.Space)e.preventDefault()})),d=qn((function(e){if(Or(e.currentTarget))return e.preventDefault();t.disabled||(0===a.menuState?(o({type:1}),l.nextFrame((function(){var e;return null==(e=a.buttonRef.current)?void 0:e.focus({preventScroll:!0})}))):(e.preventDefault(),o({type:0})))})),p=e.useMemo((function(){return{open:0===a.menuState}}),[a]),h=t;return Nr({ourProps:{ref:s,id:u,type:pr(t,a.buttonRef),"aria-haspopup":!0,"aria-controls":null==(r=a.itemsRef.current)?void 0:r.id,"aria-expanded":t.disabled?void 0:0===a.menuState,onKeyDown:c,onKeyUp:f,onClick:d},theirProps:h,slot:p,defaultTag:"button",name:"Menu.Button"})})),qi=wr.RenderStrategy|wr.Static,Ji=Sr((function(t,n){var r,i,a=I(Pi("Menu.Items"),2),o=a[0],s=a[1],u=mr(o.itemsRef,n),l=qr(o.itemsRef),c="headlessui-menu-items-".concat(Hn()),f=Bn(),d=Mr(),p=null!==d?d===Dr.Open:0===o.menuState;e.useEffect((function(){var e=o.itemsRef.current;!e||0===o.menuState&&e!==(null==l?void 0:l.activeElement)&&e.focus({preventScroll:!0})}),[o.menuState,o.itemsRef,l]),function(t){var n=t.container,r=t.accept,i=t.walk,a=t.enabled,o=void 0===a||a,s=e.useRef(r),u=e.useRef(i);e.useEffect((function(){s.current=r,u.current=i}),[r,i]),Fn((function(){if(n&&o){var e=Qn(n);if(e)for(var t=s.current,r=u.current,i=Object.assign((function(e){return t(e)}),{acceptNode:t}),a=e.createTreeWalker(n,NodeFilter.SHOW_ELEMENT,i,!1);a.nextNode();)r(a.currentNode)}}),[n,o,s,u])}({container:o.itemsRef.current,enabled:0===o.menuState,accept:function(e){return"menuitem"===e.getAttribute("role")?NodeFilter.FILTER_REJECT:e.hasAttribute("role")?NodeFilter.FILTER_SKIP:NodeFilter.FILTER_ACCEPT},walk:function(e){e.setAttribute("role","none")}});var h=qn((function(e){var t,n;switch(f.dispose(),e.key){case Pr.Space:if(""!==o.searchQuery)return e.preventDefault(),e.stopPropagation(),s({type:3,value:e.key});case Pr.Enter:if(e.preventDefault(),e.stopPropagation(),s({type:1}),null!==o.activeItemIndex)null==(n=null==(t=o.items[o.activeItemIndex].dataRef.current)?void 0:t.domRef.current)||n.click();ir(o.buttonRef.current);break;case Pr.ArrowDown:return e.preventDefault(),e.stopPropagation(),s({type:2,focus:vr.Next});case Pr.ArrowUp:return e.preventDefault(),e.stopPropagation(),s({type:2,focus:vr.Previous});case Pr.Home:case Pr.PageUp:return e.preventDefault(),e.stopPropagation(),s({type:2,focus:vr.First});case Pr.End:case Pr.PageDown:return e.preventDefault(),e.stopPropagation(),s({type:2,focus:vr.Last});case Pr.Escape:e.preventDefault(),e.stopPropagation(),s({type:1}),Vn().nextFrame((function(){var e;return null==(e=o.buttonRef.current)?void 0:e.focus({preventScroll:!0})}));break;case Pr.Tab:e.preventDefault(),e.stopPropagation(),s({type:1}),Vn().nextFrame((function(){!function(e,t){lr(tr(),t,!0,e)}(o.buttonRef.current,e.shiftKey?Xn.Previous:Xn.Next)}));break;default:1===e.key.length&&(s({type:3,value:e.key}),f.setTimeout((function(){return s({type:4})}),350))}})),m=qn((function(e){if(e.key===Pr.Space)e.preventDefault()})),v=e.useMemo((function(){return{open:0===o.menuState}}),[o]),y=t;return Nr({ourProps:{"aria-activedescendant":null===o.activeItemIndex||null==(r=o.items[o.activeItemIndex])?void 0:r.id,"aria-labelledby":null==(i=o.buttonRef.current)?void 0:i.id,id:c,onKeyDown:h,onKeyUp:m,role:"menu",tabIndex:0,ref:u},theirProps:y,slot:v,defaultTag:"div",features:qi,visible:p,name:"Menu.Items"})})),Gi=e.Fragment,$i=Sr((function(t,n){var r=t.disabled,i=void 0!==r&&r,a=S(t,Ii),o=I(Pi("Menu.Item"),2),s=o[0],u=o[1],l="headlessui-menu-item-".concat(Hn()),c=null!==s.activeItemIndex&&s.items[s.activeItemIndex].id===l,f=e.useRef(null),d=mr(n,f);Fn((function(){if(0===s.menuState&&c&&0!==s.activationTrigger){var e=Vn();return e.requestAnimationFrame((function(){var e,t;null==(t=null==(e=f.current)?void 0:e.scrollIntoView)||t.call(e,{block:"nearest"})})),e.dispose}}),[f,c,s.menuState,s.activationTrigger,s.activeItemIndex]);var p=e.useRef({disabled:i,domRef:f});Fn((function(){p.current.disabled=i}),[p,i]),Fn((function(){var e,t;p.current.textValue=null==(t=null==(e=f.current)?void 0:e.textContent)?void 0:t.toLowerCase()}),[p,f]),Fn((function(){return u({type:5,id:l,dataRef:p}),function(){return u({type:6,id:l})}}),[p,l]);var h=qn((function(){u({type:1})})),m=qn((function(e){if(i)return e.preventDefault();u({type:1}),ir(s.buttonRef.current)})),v=qn((function(){if(i)return u({type:2,focus:vr.Nothing});u({type:2,focus:vr.Specific,id:l})})),y=qn((function(){i||c||u({type:2,focus:vr.Specific,id:l,trigger:0})})),g=qn((function(){i||!c||u({type:2,focus:vr.Nothing})})),x=e.useMemo((function(){return{active:c,disabled:i,close:h}}),[c,i,h]);return Nr({ourProps:{id:l,ref:d,role:"menuitem",tabIndex:!0===i?void 0:-1,"aria-disabled":!0===i||void 0,disabled:void 0,onClick:m,onFocus:v,onPointerMove:y,onMouseMove:y,onPointerLeave:g,onMouseLeave:g},theirProps:a,slot:x,defaultTag:Gi,name:"Menu.Item"})})),Wi=Object.assign(Bi,{Button:zi,Items:Ji,Item:$i}),Hi=["passive"],Ki=e.createContext(null);function Qi(){var t=e.useContext(Ki);if(null===t){var n=new Error("You used a <Label /> component, but it is not inside a relevant parent.");throw Error.captureStackTrace&&Error.captureStackTrace(n,Qi),n}return t}var Yi=Sr((function(e,t){var n=e.passive,r=void 0!==n&&n,i=S(e,Hi),a=Qi(),o="headlessui-label-".concat(Hn()),s=mr(t);Fn((function(){return a.register(o)}),[o,a.register]);var u=d(d({ref:s},a.props),{},{id:o});return r&&("onClick"in u&&delete u.onClick,"onClick"in i&&delete i.onClick),Nr({ourProps:u,theirProps:i,slot:a.slot||{},defaultTag:"label",name:a.name||"Label"})})),Xi=["checked","defaultChecked","onChange","name","value"],Zi=e.createContext(null);Zi.displayName="GroupContext";var ea=e.Fragment;var ta=Sr((function(t,n){var r=t.checked,i=t.defaultChecked,a=void 0!==i&&i,o=t.onChange,s=t.name,u=t.value,l=S(t,Xi),c="headlessui-switch-".concat(Hn()),f=e.useContext(Zi),p=e.useRef(null),h=mr(p,n,null===f?null:f.setSwitch),m=function(t,n,r){var i=I(e.useState(r),2),a=i[0],o=i[1],s=void 0!==t,u=e.useRef(s),l=e.useRef(!1),c=e.useRef(!1);return!s||u.current||l.current?!s&&u.current&&!c.current&&(c.current=!0,u.current=s,console.error("A component is changing from controlled to uncontrolled. This may be caused by the value changing from a defined value to undefined, which should not happen.")):(l.current=!0,u.current=s,console.error("A component is changing from uncontrolled to controlled. This may be caused by the value changing from undefined to a defined value, which should not happen.")),[s?t:a,qn((function(e){return s||o(e),null==n?void 0:n(e)}))]}(r,o,a),v=I(m,2),y=v[0],g=v[1],x=qn((function(){return null==g?void 0:g(!y)})),b=qn((function(e){if(Or(e.currentTarget))return e.preventDefault();e.preventDefault(),x()})),w=qn((function(e){e.key===Pr.Space?(e.preventDefault(),x()):e.key===Pr.Enter&&function(e){var t,n=null!=(t=null==e?void 0:e.form)?t:e.closest("form");if(n){var r,i=D(n.elements);try{for(i.s();!(r=i.n()).done;){var a=r.value;if("INPUT"===a.tagName&&"submit"===a.type||"BUTTON"===a.tagName&&"submit"===a.type||"INPUT"===a.nodeName&&"image"===a.type)return void a.click()}}catch(e){i.e(e)}finally{i.f()}}}(e.currentTarget)})),k=qn((function(e){return e.preventDefault()})),N=e.useMemo((function(){return{checked:y}}),[y]),T={id:c,ref:h,role:"switch",type:pr(t,p),tabIndex:0,"aria-checked":y,"aria-labelledby":null==f?void 0:f.labelledby,"aria-describedby":null==f?void 0:f.describedby,onClick:b,onKeyUp:w,onKeyPress:k};return e.createElement(e.Fragment,null,null!=s&&y&&e.createElement(Rr,d({features:Cr.Hidden},Lr({as:"input",type:"checkbox",hidden:!0,readOnly:!0,checked:y,name:s,value:u}))),Nr({ourProps:T,theirProps:l,slot:N,defaultTag:"button",name:"Switch"}))})),na=Object.assign(ta,{Group:function(t){var n=I(e.useState(null),2),r=n[0],i=n[1],a=function(){var t=I(e.useState([]),2),n=t[0],r=t[1];return[n.length>0?n.join(" "):void 0,e.useMemo((function(){return function(t){var n=qn((function(e){return r((function(t){return[].concat(C(t),[e])})),function(){return r((function(t){var n=t.slice(),r=n.indexOf(e);return-1!==r&&n.splice(r,1),n}))}})),i=e.useMemo((function(){return{register:n,slot:t.slot,name:t.name,props:t.props}}),[n,t.slot,t.name,t.props]);return e.createElement(Ki.Provider,{value:i},t.children)}}),[r])]}(),o=I(a,2),s=o[0],u=o[1],l=I(ci(),2),c=l[0],f=l[1],d=e.useMemo((function(){return{switch:r,setSwitch:i,labelledby:s,describedby:c}}),[r,i,s,c]),p=t;return e.createElement(f,{name:"Switch.Description"},e.createElement(u,{name:"Switch.Label",props:{onClick:function(){!r||(r.click(),r.focus({preventScroll:!0}))}}},e.createElement(Zi.Provider,{value:d},Nr({ourProps:{},theirProps:p,defaultTag:ea,name:"Switch.Group"}))))},Label:Yi,Description:fi});function ra(t){var n=t.onFocus,r=I(e.useState(!0),2),i=r[0],a=r[1];return i?e.createElement(Rr,{as:"button",type:"button",features:Cr.Focusable,onFocus:function(e){e.preventDefault();var t,r=50;t=requestAnimationFrame((function e(){if(!(r--<=0))return n()?(a(!1),void cancelAnimationFrame(t)):void(t=requestAnimationFrame(e));t&&cancelAnimationFrame(t)}))}}):null}var ia,aa=["defaultIndex","vertical","manual","onChange","selectedIndex"],oa=function(e){return e[e.SetSelectedIndex=0]="SetSelectedIndex",e[e.RegisterTab=1]="RegisterTab",e[e.UnregisterTab=2]="UnregisterTab",e[e.RegisterPanel=3]="RegisterPanel",e[e.UnregisterPanel=4]="UnregisterPanel",e}(oa||{}),sa=(b(ia={},0,(function(e,t){var n=e.tabs.filter((function(e){var t;return!(null!=(t=e.current)&&t.hasAttribute("disabled"))}));if(t.index<0)return d(d({},e),{},{selectedIndex:e.tabs.indexOf(n[0])});if(t.index>e.tabs.length)return d(d({},e),{},{selectedIndex:e.tabs.indexOf(n[n.length-1])});var r=e.tabs.slice(0,t.index),i=[].concat(C(e.tabs.slice(t.index)),C(r)).find((function(e){return n.includes(e)}));return i?d(d({},e),{},{selectedIndex:e.tabs.indexOf(i)}):e})),b(ia,1,(function(e,t){var n;if(e.tabs.includes(t.tab))return e;var r=e.tabs[e.selectedIndex],i=ur([].concat(C(e.tabs),[t.tab]),(function(e){return e.current})),a=null!=(n=i.indexOf(r))?n:e.selectedIndex;return-1===a&&(a=e.selectedIndex),d(d({},e),{},{tabs:i,selectedIndex:a})})),b(ia,2,(function(e,t){return d(d({},e),{},{tabs:e.tabs.filter((function(e){return e!==t.tab}))})})),b(ia,3,(function(e,t){return e.panels.includes(t.panel)?e:d(d({},e),{},{panels:ur([].concat(C(e.panels),[t.panel]),(function(e){return e.current}))})})),b(ia,4,(function(e,t){return d(d({},e),{},{panels:e.panels.filter((function(e){return e!==t.panel}))})})),ia),ua=e.createContext(null);function la(t){var n=e.useContext(ua);if(null===n){var r=new Error("<".concat(t," /> is missing a parent <Tab.Group /> component."));throw Error.captureStackTrace&&Error.captureStackTrace(r,la),r}return n}ua.displayName="TabsSSRContext";var ca=e.createContext(null);function fa(t){var n=e.useContext(ca);if(null===n){var r=new Error("<".concat(t," /> is missing a parent <Tab.Group /> component."));throw Error.captureStackTrace&&Error.captureStackTrace(r,fa),r}return n}ca.displayName="TabsDataContext";var da=e.createContext(null);function pa(t){var n=e.useContext(da);if(null===n){var r=new Error("<".concat(t," /> is missing a parent <Tab.Group /> component."));throw Error.captureStackTrace&&Error.captureStackTrace(r,pa),r}return n}function ha(e,t){return Kn(t.type,sa,e,t)}da.displayName="TabsActionsContext";var ma=e.Fragment,va=Sr((function(t,n){var r=t.defaultIndex,i=void 0===r?0:r,a=t.vertical,o=void 0!==a&&a,s=t.manual,u=void 0!==s&&s,l=t.onChange,c=t.selectedIndex,f=void 0===c?null:c,p=S(t,aa),h=o?"vertical":"horizontal",m=u?"manual":"auto",v=null!==f,y=mr(n),g=I(e.useReducer(ha,{selectedIndex:null!=f?f:i,tabs:[],panels:[]}),2),x=g[0],b=g[1],w=e.useMemo((function(){return{selectedIndex:x.selectedIndex}}),[x.selectedIndex]),k=Pn(l||function(){}),N=Pn(x.tabs),T=e.useMemo((function(){return d({orientation:h,activation:m},x)}),[h,m,x]),_=Pn(v?t.selectedIndex:x.selectedIndex),E=e.useMemo((function(){return{registerTab:function(e){return b({type:1,tab:e}),function(){return b({type:2,tab:e})}},registerPanel:function(e){return b({type:3,panel:e}),function(){return b({type:4,panel:e})}},change:function(e){_.current!==e&&k.current(e),v||b({type:0,index:e})}}}),[b,v]);Fn((function(){b({type:0,index:null!=f?f:i})}),[f]);var L=e.useRef({tabs:[],panels:[]}),A={ref:y};return e.createElement(ua.Provider,{value:L},e.createElement(da.Provider,{value:E},e.createElement(ca.Provider,{value:T},T.tabs.length<=0&&e.createElement(ra,{onFocus:function(){var e,t,n,r=D(N.current);try{for(r.s();!(n=r.n()).done;){var i=n.value;if(0===(null==(e=i.current)?void 0:e.tabIndex))return null==(t=i.current)||t.focus(),!0}}catch(e){r.e(e)}finally{r.f()}return!1}}),Nr({ourProps:A,theirProps:p,slot:w,defaultTag:ma,name:"Tabs"}))))})),ya=Sr((function(e,t){var n=fa("Tab.List"),r=n.orientation,i=n.selectedIndex;return Nr({ourProps:{ref:mr(t),role:"tablist","aria-orientation":r},theirProps:e,slot:{selectedIndex:i},defaultTag:"div",name:"Tabs.List"})})),ga=Sr((function(t,n){var r,i,a="headlessui-tabs-tab-".concat(Hn()),o=fa("Tab"),s=o.orientation,u=o.activation,l=o.selectedIndex,c=o.tabs,f=o.panels,d=pa("Tab"),p=fa("Tab"),h=la("Tab"),m=e.useRef(null),v=mr(m,n);Fn((function(){return d.registerTab(m)}),[d,m]);var y=h.current.tabs.indexOf(a);-1===y&&(y=h.current.tabs.push(a)-1);var g=c.indexOf(m);-1===g&&(g=y);var x=g===l,b=qn((function(e){var t,n=e();if(n===Zn.Success&&"auto"===u){var r=null==(t=Qn(m))?void 0:t.activeElement,i=p.tabs.findIndex((function(e){return e.current===r}));-1!==i&&d.change(i)}return n})),w=qn((function(e){var t=c.map((function(e){return e.current})).filter(Boolean);if(e.key===Pr.Space||e.key===Pr.Enter)return e.preventDefault(),e.stopPropagation(),void d.change(g);switch(e.key){case Pr.Home:case Pr.PageUp:return e.preventDefault(),e.stopPropagation(),b((function(){return lr(t,Xn.First)}));case Pr.End:case Pr.PageDown:return e.preventDefault(),e.stopPropagation(),b((function(){return lr(t,Xn.Last)}))}return b((function(){return Kn(s,{vertical:function(){return e.key===Pr.ArrowUp?lr(t,Xn.Previous|Xn.WrapAround):e.key===Pr.ArrowDown?lr(t,Xn.Next|Xn.WrapAround):Zn.Error},horizontal:function(){return e.key===Pr.ArrowLeft?lr(t,Xn.Previous|Xn.WrapAround):e.key===Pr.ArrowRight?lr(t,Xn.Next|Xn.WrapAround):Zn.Error}})}))===Zn.Success?e.preventDefault():void 0})),k=e.useRef(!1),N=qn((function(){var e;k.current||(k.current=!0,null==(e=m.current)||e.focus(),d.change(g),Un((function(){k.current=!1})))})),T=qn((function(e){e.preventDefault()})),_=e.useMemo((function(){return{selected:x}}),[x]),E=t;return Nr({ourProps:{ref:v,onKeyDown:w,onMouseDown:T,onClick:N,id:a,role:"tab",type:pr(t,m),"aria-controls":null==(i=null==(r=f[g])?void 0:r.current)?void 0:i.id,"aria-selected":x,tabIndex:x?0:-1},theirProps:E,slot:_,defaultTag:"button",name:"Tabs.Tab"})})),xa=Sr((function(t,n){var r=fa("Tab.Panels").selectedIndex;return Nr({ourProps:{ref:mr(n)},theirProps:t,slot:e.useMemo((function(){return{selectedIndex:r}}),[r]),defaultTag:"div",name:"Tabs.Panels"})})),ba=wr.RenderStrategy|wr.Static,wa=Sr((function(t,n){var r,i,a,o,s=fa("Tab.Panel"),u=s.selectedIndex,l=s.tabs,c=s.panels,f=pa("Tab.Panel"),p=la("Tab.Panel"),h="headlessui-tabs-panel-".concat(Hn()),m=e.useRef(null),v=mr(m,n);Fn((function(){return f.registerPanel(m)}),[f,m]);var y=p.current.panels.indexOf(h);-1===y&&(y=p.current.panels.push(h)-1);var g=c.indexOf(m);-1===g&&(g=y);var x=g===u,b=e.useMemo((function(){return{selected:x}}),[x]),w=t,k={ref:v,id:h,role:"tabpanel","aria-labelledby":null==(i=null==(r=l[g])?void 0:r.current)?void 0:i.id,tabIndex:x?0:-1};return x||null!=(a=t.unmount)&&!a||null!=(o=t.static)&&o?Nr({ourProps:k,theirProps:w,slot:b,defaultTag:"div",features:ba,visible:x,name:"Tabs.Panel"}):e.createElement(Rr,d({as:"span"},k))})),ka=Object.assign(ga,{Group:va,List:ya,Panels:xa,Panel:wa});function Na(e){for(var t,n=arguments.length,r=new Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];e&&r.length>0&&(t=e.classList).add.apply(t,r)}function Ta(e){for(var t,n=arguments.length,r=new Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];e&&r.length>0&&(t=e.classList).remove.apply(t,r)}var _a=function(e){return e.Ended="ended",e.Cancelled="cancelled",e}(_a||{});function Ea(e,t,n,r){var i=n?"enter":"leave",a=Vn(),o=void 0!==r?function(e){var t={called:!1};return function(){if(!t.called)return t.called=!0,e.apply(void 0,arguments)}}(r):function(){};"enter"===i&&(e.removeAttribute("hidden"),e.style.display="");var s=Kn(i,{enter:function(){return t.enter},leave:function(){return t.leave}}),u=Kn(i,{enter:function(){return t.enterTo},leave:function(){return t.leaveTo}}),l=Kn(i,{enter:function(){return t.enterFrom},leave:function(){return t.leaveFrom}});return Ta.apply(void 0,[e].concat(C(t.enter),C(t.enterTo),C(t.enterFrom),C(t.leave),C(t.leaveFrom),C(t.leaveTo),C(t.entered))),Na.apply(void 0,[e].concat(C(s),C(l))),a.nextFrame((function(){Ta.apply(void 0,[e].concat(C(l))),Na.apply(void 0,[e].concat(C(u))),function(e,t){var n=Vn();if(!e)return n.dispose;var r=getComputedStyle(e),i=[r.transitionDuration,r.transitionDelay].map((function(e){var t=e.split(",").filter(Boolean).map((function(e){return e.includes("ms")?parseFloat(e):1e3*parseFloat(e)})).sort((function(e,t){return t-e})),n=I(t,1)[0];return void 0===n?0:n})),a=I(i,2);if(a[0]+a[1]!==0){var o=[];o.push(n.addEventListener(e,"transitionrun",(function(r){r.target===r.currentTarget&&(o.splice(0).forEach((function(e){return e()})),o.push(n.addEventListener(e,"transitionend",(function(e){e.target===e.currentTarget&&(t("ended"),o.splice(0).forEach((function(e){return e()})))})),n.addEventListener(e,"transitioncancel",(function(e){e.target===e.currentTarget&&(t("cancelled"),o.splice(0).forEach((function(e){return e()})))}))))})))}else t("ended");n.add((function(){return t("cancelled")})),n.dispose}(e,(function(n){return"ended"===n&&(Ta.apply(void 0,[e].concat(C(s))),Na.apply(void 0,[e].concat(C(t.entered)))),o(n)}))})),a.dispose}var Sa=["beforeEnter","afterEnter","beforeLeave","afterLeave","enter","enterFrom","enterTo","entered","leave","leaveFrom","leaveTo"],La=["show","appear","unmount"];function Aa(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return e.split(" ").filter((function(e){return e.trim().length>1}))}var Oa=e.createContext(null);Oa.displayName="TransitionContext";var Ia=function(e){return e.Visible="visible",e.Hidden="hidden",e}(Ia||{});var Ca=e.createContext(null);function Ra(e){return"children"in e?Ra(e.children):e.current.filter((function(e){return null!==e.el.current})).filter((function(e){return"visible"===e.state})).length>0}function ja(t,n){var r=Pn(t),i=e.useRef([]),a=zr(),o=Bn(),s=qn((function(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:kr.Hidden,s=i.current.findIndex((function(t){return t.el===e}));-1!==s&&(Kn(n,(b(t={},kr.Unmount,(function(){i.current.splice(s,1)})),b(t,kr.Hidden,(function(){i.current[s].state="hidden"})),t)),o.microTask((function(){var e;!Ra(i)&&a.current&&(null==(e=r.current)||e.call(r))})))})),u=qn((function(e){var t=i.current.find((function(t){return t.el===e}));return t?"visible"!==t.state&&(t.state="visible"):i.current.push({el:e,state:"visible"}),function(){return s(e,kr.Unmount)}})),l=e.useRef([]),c=e.useRef(Promise.resolve()),f=e.useRef({enter:[],leave:[],idle:[]}),d=qn((function(e,t,r){l.current.splice(0),n&&(n.chains.current[t]=n.chains.current[t].filter((function(t){return I(t,1)[0]!==e}))),null==n||n.chains.current[t].push([e,new Promise((function(e){l.current.push(e)}))]),null==n||n.chains.current[t].push([e,new Promise((function(e){Promise.all(f.current[t].map((function(e){var t=I(e,2);return t[0],t[1]}))).then((function(){return e()}))}))]),"enter"===t?c.current=c.current.then((function(){return null==n?void 0:n.wait.current})).then((function(){return r(t)})):r(t)})),p=qn((function(e,t,n){Promise.all(f.current[t].splice(0).map((function(e){var t=I(e,2);return t[0],t[1]}))).then((function(){var e;null==(e=l.current.shift())||e()})).then((function(){return n(t)}))}));return e.useMemo((function(){return{children:i,register:u,unregister:s,onStart:d,onStop:p,wait:c,chains:f}}),[u,s,i,d,p,f,c])}function Da(){}Ca.displayName="NestingContext";var Ma=["beforeEnter","afterEnter","beforeLeave","afterLeave"];function Fa(e){var t,n,r={},i=D(Ma);try{for(i.s();!(n=i.n()).done;){var a=n.value;r[a]=null!=(t=e[a])?t:Da}}catch(e){i.e(e)}finally{i.f()}return r}var Pa=wr.RenderStrategy,Ua=Sr((function(t,n){var r,i=t.beforeEnter,a=t.afterEnter,o=t.beforeLeave,s=t.afterLeave,u=t.enter,l=t.enterFrom,c=t.enterTo,f=t.entered,d=t.leave,p=t.leaveFrom,h=t.leaveTo,m=S(t,Sa),v=e.useRef(null),y=mr(v,n),g=m.unmount?kr.Unmount:kr.Hidden,x=function(){var t=e.useContext(Oa);if(null===t)throw new Error("A <Transition.Child /> is used but it is missing a parent <Transition /> or <Transition.Root />.");return t}(),w=x.show,k=x.appear,N=x.initial,T=I(e.useState(w?"visible":"hidden"),2),_=T[0],E=T[1],L=function(){var t=e.useContext(Ca);if(null===t)throw new Error("A <Transition.Child /> is used but it is missing a parent <Transition /> or <Transition.Root />.");return t}(),A=L.register,O=L.unregister,C=e.useRef(null);e.useEffect((function(){return A(v)}),[A,v]),e.useEffect((function(){var e;if(g===kr.Hidden&&v.current)return w&&"visible"!==_?void E("visible"):Kn(_,(b(e={},"hidden",(function(){return O(v)})),b(e,"visible",(function(){return A(v)})),e))}),[_,v,A,O,w,g]);var R=Pn({enter:Aa(u),enterFrom:Aa(l),enterTo:Aa(c),entered:Aa(f),leave:Aa(d),leaveFrom:Aa(p),leaveTo:Aa(h)}),j=function(t){var n=e.useRef(Fa(t));return e.useEffect((function(){n.current=Fa(t)}),[t]),n}({beforeEnter:i,afterEnter:a,beforeLeave:o,afterLeave:s}),D=Gn();e.useEffect((function(){if(D&&"visible"===_&&null===v.current)throw new Error("Did you forget to passthrough the `ref` to the actual DOM node?")}),[v,_,D]);var M=N&&!k,F=!D||M||C.current===w?"idle":w?"enter":"leave",P=qn((function(e){return Kn(e,{enter:function(){return j.current.beforeEnter()},leave:function(){return j.current.beforeLeave()},idle:function(){}})})),U=qn((function(e){return Kn(e,{enter:function(){return j.current.afterEnter()},leave:function(){return j.current.afterLeave()},idle:function(){}})})),V=ja((function(){E("hidden"),O(v)}),L);(function(e){var t=e.container,n=e.direction,r=e.classes,i=e.onStart,a=e.onStop,o=zr(),s=Bn(),u=Pn(n);Fn((function(){var e=Vn();s.add(e.dispose);var n=t.current;if(n&&"idle"!==u.current&&o.current)return e.dispose(),i.current(u.current),e.add(Ea(n,r.current,"enter"===u.current,(function(t){var n;e.dispose(),Kn(t,(b(n={},_a.Ended,(function(){a.current(u.current)})),b(n,_a.Cancelled,(function(){})),n))}))),e.dispose}),[n])})({container:v,classes:R,direction:F,onStart:Pn((function(e){V.onStart(v,e,P)})),onStop:Pn((function(e){V.onStop(v,e,U),"leave"===e&&!Ra(V)&&(E("hidden"),O(v))}))}),e.useEffect((function(){!M||(g===kr.Hidden?C.current=null:C.current=w)}),[w,M,_]);var B=m,z={ref:y};return e.createElement(Ca.Provider,{value:V},e.createElement(Fr,{value:Kn(_,(r={},b(r,"visible",Dr.Open),b(r,"hidden",Dr.Closed),r))},Nr({ourProps:z,theirProps:B,defaultTag:"div",features:Pa,visible:"visible"===_,name:"Transition.Child"})))})),Va=Sr((function(t,n){var r,i=t.show,a=t.appear,o=void 0!==a&&a,s=t.unmount,u=S(t,La),l=e.useRef(null),c=mr(l,n);Gn();var f=Mr();if(void 0===i&&null!==f&&(i=Kn(f,(b(r={},Dr.Open,!0),b(r,Dr.Closed,!1),r))),![!0,!1].includes(i))throw new Error("A <Transition /> is used but it is missing a `show={true | false}` prop.");var p=I(e.useState(i?"visible":"hidden"),2),h=p[0],m=p[1],v=ja((function(){m("hidden")})),y=I(e.useState(!0),2),g=y[0],x=y[1],w=e.useRef([i]);Fn((function(){!1!==g&&w.current[w.current.length-1]!==i&&(w.current.push(i),x(!1))}),[w,i]);var k=e.useMemo((function(){return{show:i,appear:o,initial:g}}),[i,o,g]);e.useEffect((function(){if(i)m("visible");else if(Ra(v)){var e=l.current;if(!e)return;var t=e.getBoundingClientRect();0===t.x&&0===t.y&&0===t.width&&0===t.height&&m("hidden")}else m("hidden")}),[i,v]);var N={unmount:s};return e.createElement(Ca.Provider,{value:v},e.createElement(Oa.Provider,{value:k},Nr({ourProps:d(d({},N),{},{as:e.Fragment,children:e.createElement(Ua,d(d({ref:c},N),u))}),theirProps:{},defaultTag:e.Fragment,features:Pa,visible:"visible"===h,name:"Transition"})))})),Ba=Sr((function(t,n){var r=null!==e.useContext(Oa),i=null!==Mr();return e.createElement(e.Fragment,null,!r&&i?e.createElement(Va,d({ref:n},t)):e.createElement(Ua,d({ref:n},t)))})),za=Object.assign(Va,{Child:Ba,Root:Va});function qa({position:t="top",theme:n="dark",size:r="md",color:i,target:a,className:o,children:s}){const[u,c]=e.useState((()=>"string"!=typeof a&&a?a:null)),[f,d]=e.useState(null),p=e.useMemo((()=>({name:"arrow",options:{element:f}})),[f]),[h,m]=e.useState(null),v=e.useMemo((()=>({name:"offset",options:{offset:[0,8]}})),[]),{styles:y,attributes:g}=Dn(u,h,{strategy:"absolute",placement:t,modifiers:[v,p]});e.useLayoutEffect((()=>{"string"==typeof a&&c(document.getElementById(a.replace("#","")))}),[a]);const[x,b]=e.useState((()=>"string"!=typeof a&&!!a));e.useEffect((()=>{if(!(u instanceof HTMLElement))return;const e=()=>b(!0),t=()=>b(!1);return u.addEventListener("mouseenter",e),u.addEventListener("mouseleave",t),()=>{u.removeEventListener("mouseenter",e),u.removeEventListener("mouseleave",t)}}),[u]);const w=e.useMemo((()=>lt(o,x?"visible":"invisible",i?{"bg-zinc-600 text-zinc-100":"zinc"===i,"bg-red-600 text-red-100":"red"===i,"bg-orange-600 text-orange-100":"orange"===i,"bg-amber-600 text-amber-100":"amber"===i,"bg-lime-600 text-lime-100":"lime"===i,"bg-emerald-600 text-emerald-100":"emerald"===i,"bg-teal-600 text-teal-100":"teal"===i,"bg-cyan-600 text-cyan-100":"cyan"===i,"bg-blue-600 text-blue-100":"blue"===i,"bg-indigo-600 text-indigo-100":"indigo"===i,"bg-violet-600 text-violet-100":"violet"===i,"bg-purple-600 text-purple-100":"purple"===i,"bg-fuchsia-600 text-fuchsia-100":"fuchsia"===i,"bg-pink-600 text-pink-100":"pink"===i,"bg-rose-600 text-rose-100":"rose"===i}:"dark"===n?"bg-gray-900 text-white":"bg-white text-gray-900 border border-solid border-gray-200","inline-block z-50 font-medium rounded-md shadow-sm max-w-[12rem]",{"py-1 px-1.5 text-xs":"sm"===r,"py-2 px-3 text-sm":"md"===r,"py-2 px-3 text-base":"lg"===r},'[&[data-popper-placement^="top"]>.tooltip-arrow]:-bottom-1','[&[data-popper-placement^="top"]>.tooltip-arrow::before]:border-b','[&[data-popper-placement^="top"]>.tooltip-arrow::before]:border-r','[&[data-popper-placement^="bottom"]>.tooltip-arrow]:-top-1','[&[data-popper-placement^="bottom"]>.tooltip-arrow::before]:border-t','[&[data-popper-placement^="bottom"]>.tooltip-arrow::before]:border-l','[&[data-popper-placement^="right"]>.tooltip-arrow]:-left-1','[&[data-popper-placement^="right"]>.tooltip-arrow::before]:border-b','[&[data-popper-placement^="right"]>.tooltip-arrow::before]:border-l','[&[data-popper-placement^="left"]>.tooltip-arrow]:-right-1','[&[data-popper-placement^="left"]>.tooltip-arrow::before]:border-t','[&[data-popper-placement^="left"]>.tooltip-arrow::before]:border-r')),[o,n,x,i,r]),k=e.useMemo((()=>lt("tooltip-arrow",x?"before:visible":"before:invisible","absolute invisible w-2 h-2 bg-inherit",'before:absolute before:w-2 before:h-2 before:bg-inherit before:content-[""] before:rotate-45',"light"!==n||i?"before:border-transparent":"before:border-gray-200",{"border-b border-r":"top"===t&&"light"===n,"border-t border-l":"bottom"===t&&"light"===n,"border-b border-l":"right"===t&&"light"===n,"border-t border-r":"left"===t&&"light"===n})),[n,x,t,i]);return l.exports.jsx(si,{children:x&&l.exports.jsxs("div",{ref:m,role:"tooltip",className:w,style:y.popper,...g.popper,children:[s,l.exports.jsx("div",{ref:d,className:k,style:y.arrow})]})})}function Ja(e){return l.exports.jsx("svg",{...e,viewBox:"0 0 24 27",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:l.exports.jsx("path",{d:"M14.017 18L14.017 10.609C14.017 4.905 17.748 1.039 23 0L23.995 2.151C21.563 3.068 20 5.789 20 8H24V18H14.017ZM0 18V10.609C0 4.905 3.748 1.038 9 0L9.996 2.151C7.563 3.068 6 5.789 6 8H9.983L9.983 18L0 18Z",fill:"currentColor"})})}const Ga=({element:t})=>{const[n,r]=e.useState(null),[i,a]=e.useState(null),o=e.useMemo((()=>{if(!i||!n)return null;const e=n.getBoundingClientRect();return{x:e.x+e.width-8,y:e.y+e.height}}),[i,n]),s=e.useMemo((()=>Boolean(o&&n)),[n,o]);e.useEffect((()=>{const e=()=>{const e=function(){const e=document.getSelection();if(!e||0===e.rangeCount)return null;const t=e.getRangeAt(0);return t.collapsed||e.anchorNode&&document.getElementById("social-presence").contains(e.anchorNode)?null:t}();r(e)},n=e=>{a({x:e.clientX,y:e.clientY})},i=e=>{e.target&&t.current?.contains(e.target)||a(null)};return document.addEventListener("selectionchange",e),document.addEventListener("mouseup",n),document.addEventListener("mousedown",i),()=>{document.removeEventListener("selectionchange",e),document.removeEventListener("mouseup",n),document.removeEventListener("mousedown",i)}}),[t]);const u=e.useCallback((()=>{r(null),a(null),document.getSelection()?.removeAllRanges()}),[]);return{highlighting:s,cursorPosition:o,selection:n,resetSelection:u}};function $a(t){var n=e.useRef(t);return n.current=t,e.useMemo((function(){return Object.freeze({get current(){return n.current}})}),[])}function Wa(t){var n=$a(t);e.useEffect((function(){return function(){n.current()}}),[])}var Ha=function(){},Ka="undefined"!=typeof window&&"undefined"!=typeof navigator&&"undefined"!=typeof document;function Qa(t){var n=$a(t),r=e.useRef(0),i=e.useCallback((function(){Ka&&r.current&&(cancelAnimationFrame(r.current),r.current=0)}),[]);return Wa(i),[e.useMemo((function(){var e=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];Ka&&(i(),r.current=requestAnimationFrame((function(){n.current.apply(n,e),r.current=0})))};return Object.defineProperties(e,{length:{value:t.length},name:{value:"".concat(t.name||"anonymous","__raf")}}),e}),[]),i]}function Ya(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];e&&e.addEventListener&&e.addEventListener.apply(e,t)}function Xa(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];e&&e.removeEventListener&&e.removeEventListener.apply(e,t)}function Za(){var t=e.useRef(!0);return e.useEffect((function(){t.current=!1}),[]),t.current}var eo=Ka?e.useLayoutEffect:e.useEffect;function to(t){var n=e.useState(t),r=n[0],i=n[1],a=function(t){void 0===t&&(t=!1);var n=e.useRef(t),r=e.useCallback((function(){return n.current}),[]);return e.useEffect((function(){return n.current=!0,function(){n.current=!1}}),[]),r}(!0);return[r,e.useCallback((function(e){a()&&i(e)}),[])]}function no(e){var t=to(e),n=t[0],r=Qa(t[1]),i=r[0];return Wa(r[1]),[n,i]}var ro=Ka?window.navigator:void 0,io=ro&&(ro.connection||ro.mozConnection||ro.webkitConnection);function ao(e){var t=null==ro?void 0:ro.onLine,n=null==e?void 0:e.online;return{online:t,previous:n,since:t!==n?new Date:null==e?void 0:e.since,downlink:null==io?void 0:io.downlink,downlinkMax:null==io?void 0:io.downlinkMax,effectiveType:null==io?void 0:io.effectiveType,rtt:null==io?void 0:io.rtt,saveData:null==io?void 0:io.saveData,type:null==io?void 0:io.type}}function oo(t){var n=to(null!=t?t:ao),r=n[0],i=n[1];return e.useEffect((function(){var e=function(){i(ao)};return Ya(window,"online",e,{passive:!0}),Ya(window,"offline",e,{passive:!0}),io&&Ya(io,"change",e,{passive:!0}),function(){Xa(window,"online",e),Xa(window,"offline",e),io&&Xa(io,"change",e)}}),[]),r}var so=function(){return so=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},so.apply(this,arguments)},uo=new Map,lo=function(e,t,n,r){var i,a;null===(a=null===(i=uo.get(e))||void 0===i?void 0:i.get(t))||void 0===a||a.forEach((function(e){e!==r&&e(n)}))},co=function(e){e.storageArea&&e.key&&e.newValue&&lo(e.storageArea,e.key,e.newValue)},fo={defaultValue:null,initializeWithValue:!0};function po(t,n,r){var i,a=$a(so(so({},fo),r)),o=function(e,t){var n;return(null!==(n=a.current.parse)&&void 0!==n?n:vo)(e,t)},s=$a({fetchRaw:function(){return t.getItem(n)},fetch:function(){return o(s.current.fetchRaw(),a.current.defaultValue)},remove:function(){return t.removeItem(n)},store:function(e){var r=function(e){var t;return(null!==(t=a.current.stringify)&&void 0!==t?t:mo)(e)}(e);return null!==r&&t.setItem(n,r),r}}),u=Za(),l=e.useState((null===(i=a.current)||void 0===i?void 0:i.initializeWithValue)&&u?s.current.fetch():void 0),c=l[0],f=l[1],d=$a(c),p=$a({fetch:function(){return f(s.current.fetch())},setRawVal:function(e){f(o(e,a.current.defaultValue))}});!function(t,n){var r=Za();e.useEffect(r?Ha:t,n)}((function(){p.current.fetch()}),[n]),e.useEffect((function(){a.current.initializeWithValue||p.current.fetch()}),[]),eo((function(){var e=p.current.setRawVal;return function(e,t,n){Ka&&0===uo.size&&Ya(window,"storage",co,{passive:!0});var r=uo.get(e);r||(r=new Map,uo.set(e,r));var i=r.get(t);i||(i=new Set,r.set(t,i)),i.add(n)}(t,n,e),function(){!function(e,t,n){var r=uo.get(e);if(r){var i=r.get(t);i&&(i.delete(n),i.size||r.delete(t),r.size||uo.delete(e),Ka&&!uo.size&&Xa(window,"storage",co))}}(t,n,e)}}),[t,n]);var h=$a({set:function(e){if(Ka){var r,i,a=(r=e,i=d.current,"function"==typeof r?r(i):r),o=s.current.store(a);null!==o&&lo(t,n,o)}},delete:function(){Ka&&(s.current.remove(),lo(t,n,null))},fetch:function(){Ka&&lo(t,n,s.current.fetchRaw())}}),m=e.useMemo((function(){return{set:function(e){return h.current.set(e)},remove:function(){return h.current.delete()},fetch:function(){return h.current.fetch()}}}),[]);return e.useMemo((function(){return so({value:c},m)}),[c])}var ho,mo=function(e){if(null===e)return null;try{return JSON.stringify(e)}catch(e){return console.warn(e),null}},vo=function(e,t){if(null===e)return t;try{return JSON.parse(e)}catch(e){return console.warn(e),t}};try{ho=Ka&&!!window.localStorage}catch(e){ho=!1}var yo,go=ho?function(e,t){return po(localStorage,e,t)}:function(e,t){return{value:void 0,set:Ha,remove:Ha,fetch:Ha}};function xo(t,n,r){void 0===r&&(r=!0);var i=r&&function(){if(Ka){if(yo)return yo;var e=new Map,t=new ResizeObserver((function(t){t.forEach((function(t){var n;return null===(n=e.get(t.target))||void 0===n?void 0:n.forEach((function(e){return setTimeout((function(){return e(t)}),0)}))}))}));return yo={observer:t,subscribe:function(n,r){var i=e.get(n);i||(i=new Set,e.set(n,i),t.observe(n)),i.add(r)},unsubscribe:function(n,r){var i=e.get(n);i&&(i.delete(r),i.size||(e.delete(n),t.unobserve(n)))}}}}(),a=$a(n),o=t&&"current"in t?t.current:t;e.useEffect((function(){var e=t&&"current"in t?t.current:t;if(i&&e){var n=!0,r=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];n&&a.current.apply(a,e)};return i.subscribe(e,r),function(){n=!1,i.unsubscribe(e,r)}}}),[o,i])}function bo(t){void 0===t&&(t=!0);var n,r,i,a,o,s=to(null),u=s[0],l=s[1],c=(n=null,r=function(e){return l(e),e},a=$a(r),o=$a(i),e.useMemo((function(){var e=n;return{get current(){return void 0!==o.current?o.current(e):e},set current(t){e=void 0!==a.current?a.current(t):t}}}),[])),f=to(),d=f[0],p=f[1];return xo(u,Qa((function(e){return p({width:e.contentRect.width,height:e.contentRect.height})}))[0],t),[d,c]}var wo=new Set,ko=function(){wo.forEach((function(e){e({width:window.innerWidth,height:window.innerHeight})}))};function No(t,n){void 0===t&&(t=no);var r=Za(),i=t({width:r&&Ka&&!n?window.innerWidth:0,height:r&&Ka&&!n?window.innerHeight:0}),a=i[0],o=i[1];return function(t){e.useEffect((function(){t()}),[])}((function(){n&&o({width:window.innerWidth,height:window.innerHeight})})),e.useEffect((function(){return 0===wo.size&&window.addEventListener("resize",ko,{passive:!0}),wo.add(o),function(){wo.delete(o),0===wo.size&&window.removeEventListener("resize",ko)}}),[o]),a}function To(t){const n=e.useRef((()=>{throw new Error("Cannot call an event handler while rendering.")}));return e.useLayoutEffect((()=>{n.current=t})),e.useCallback(((...e)=>n.current?.apply(null,e)),[])}function _o(t){const n=function(t){var n=e.useRef();return e.useEffect((function(){n.current=t})),n.current}(t);return $a(n)}function Eo(t){const n=e.useRef(null),{cursorPosition:r,highlighting:i,selection:a,resetSelection:o}=Ga({element:n}),s=e.useMemo((()=>r?{getBoundingClientRect:()=>({width:0,height:0,top:r?.y||0,right:r?.x||0,bottom:r?.y||0,left:r?.x||0,x:r?.x||0,y:r?.y||0,toJSON:()=>({})})}:null),[r]),u=To((()=>{o(),t.onClick(a)}));return i&&a&&s?l.exports.jsx(qa,{target:s,position:"bottom",theme:"light",size:"lg",children:l.exports.jsx("div",{ref:n,className:"w-full h-full flex items-center justify-center",children:l.exports.jsxs("button",{type:"button",className:"inline-flex flex-col items-center justify-center p-1 border-0 focus:outline-none text-gray-700 hover:text-gray-900 duration-200 ease-in-out",onClick:u,children:[l.exports.jsx(Ja,{className:"w-5 h-5","aria-hidden":"true"}),l.exports.jsx("span",{className:"text-xs",children:"Annotate"})]})})}):null}var So=["name"],Lo=["_f"],Ao=["_f"],Oo=function(e){return"checkbox"===e.type},Io=function(e){return e instanceof Date},Co=function(e){return null==e},Ro=function(e){return"object"===h(e)},jo=function(e){return!Co(e)&&!Array.isArray(e)&&Ro(e)&&!Io(e)},Do=function(e){return jo(e)&&e.target?Oo(e.target)?e.target.checked:e.target.value:e},Mo=function(e,t){return e.has(function(e){return e.substring(0,e.search(/\.\d+(\.|$)/))||e}(t))},Fo=function(e){return Array.isArray(e)?e.filter(Boolean):[]},Po=function(e){return void 0===e},Uo=function(e,t,n){if(!t||!jo(e))return n;var r=Fo(t.split(/[,[\].]+?/)).reduce((function(e,t){return Co(e)?e:e[t]}),e);return Po(r)||r===e?Po(e[t])?n:e[t]:r},Vo="blur",Bo="focusout",zo="onBlur",qo="onChange",Jo="onSubmit",Go="onTouched",$o="all",Wo="max",Ho="min",Ko="maxLength",Qo="minLength",Yo="pattern",Xo="required",Zo="validate";e.createContext(null);var es=function(e,t,n){var r=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],i={defaultValues:t._defaultValues},a=function(a){Object.defineProperty(i,a,{get:function(){var i=a;return t._proxyFormState[i]!==$o&&(t._proxyFormState[i]=!r||$o),n&&(n[i]=!0),e[i]}})};for(var o in e)a(o);return i},ts=function(e){return jo(e)&&!Object.keys(e).length},ns=function(e,t,n){e.name;var r=S(e,So);return ts(r)||Object.keys(r).length>=Object.keys(t).length||Object.keys(r).find((function(e){return t[e]===(!n||$o)}))},rs=function(e){return Array.isArray(e)?e:[e]};function is(t){var n=e.useRef(t);n.current=t,e.useEffect((function(){var e=!t.disabled&&n.current.subject.subscribe({next:n.current.callback});return function(){e&&e.unsubscribe()}}),[t.disabled])}var as=function(e){return"string"==typeof e},os=function(e,t,n,r){return as(e)?(r&&t.watch.add(e),Uo(n,e)):Array.isArray(e)?e.map((function(e){return r&&t.watch.add(e),Uo(n,e)})):(r&&(t.watchAll=!0),n)},ss="undefined"!=typeof window&&void 0!==window.HTMLElement&&"undefined"!=typeof document;function us(e){var t,n,r,i=Array.isArray(e);if(e instanceof Date)t=new Date(e);else if(e instanceof Set)t=new Set(e);else{if(ss&&(e instanceof Blob||e instanceof FileList)||!i&&!jo(e))return e;if(t=i?[]:{},Array.isArray(e)||(r=(n=e).constructor&&n.constructor.prototype,jo(r)&&r.hasOwnProperty("isPrototypeOf")))for(var a in e)t[a]=us(e[a]);else t=e}return t}var ls=function(e,t,n,r,i){return t?d(d({},n[e]),{},{types:d(d({},n[e]&&n[e].types?n[e].types:{}),{},b({},r,i||!0))}):{}},cs=function(e){return/^\w*$/.test(e)},fs=function(e){return Fo(e.replace(/["|']|\]/g,"").split(/\.|\[/))};function ds(e,t,n){for(var r=-1,i=cs(t)?[t]:fs(t),a=i.length,o=a-1;++r<a;){var s=i[r],u=n;if(r!==o){var l=e[s];u=jo(l)||Array.isArray(l)?l:isNaN(+i[r+1])?{}:[]}e[s]=u,e=e[s]}return e}var ps=function e(t,n,r){var i,a=D(r||Object.keys(t));try{for(a.s();!(i=a.n()).done;){var o=i.value,s=Uo(t,o);if(s){var u=s._f,l=S(s,Lo);if(u&&n(u.name)){if(u.ref.focus){u.ref.focus();break}if(u.refs&&u.refs[0].focus){u.refs[0].focus();break}}else jo(l)&&e(l,n)}}}catch(e){a.e(e)}finally{a.f()}},hs=function(e,t,n){return!n&&(t.watchAll||t.watch.has(e)||C(t.watch).some((function(t){return e.startsWith(t)&&/^\.\w+/.test(e.slice(t.length))})))},ms=function(e,t,n){var r=Fo(Uo(e,n));return ds(r,"root",t[n]),ds(e,n,r),e},vs=function(e){return"boolean"==typeof e},ys=function(e){return"file"===e.type},gs=function(e){return"function"==typeof e},xs=function(t){return as(t)||e.isValidElement(t)},bs=function(e){return"radio"===e.type},ws=function(e){return e instanceof RegExp},ks={value:!1,isValid:!1},Ns={value:!0,isValid:!0},Ts=function(e){if(Array.isArray(e)){if(e.length>1){var t=e.filter((function(e){return e&&e.checked&&!e.disabled})).map((function(e){return e.value}));return{value:t,isValid:!!t.length}}return e[0].checked&&!e[0].disabled?e[0].attributes&&!Po(e[0].attributes.value)?Po(e[0].value)||""===e[0].value?Ns:{value:e[0].value,isValid:!0}:Ns:ks}return ks},_s={isValid:!1,value:null},Es=function(e){return Array.isArray(e)?e.reduce((function(e,t){return t&&t.checked&&!t.disabled?{isValid:!0,value:t.value}:e}),_s):_s};function Ss(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"validate";if(xs(e)||Array.isArray(e)&&e.every(xs)||vs(e)&&!e)return{type:n,message:xs(e)?e:"",ref:t}}var Ls=function(e){return jo(e)&&!ws(e)?e:{value:e,message:""}},As=function(){var e=v(p().mark((function e(t,n,r,i,a){var o,s,u,l,c,f,h,m,v,y,g,x,b,w,k,N,T,_,E,S,L,A,O,I,C,R,j,D,M,F,P,U,V,B,z,q,J,G,$,W,H,K,Q,Y,X,Z,ee;return p().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(o=t._f,s=o.ref,u=o.refs,l=o.required,c=o.maxLength,f=o.minLength,h=o.min,m=o.max,v=o.pattern,y=o.validate,g=o.name,x=o.valueAsNumber,b=o.mount,w=o.disabled,b&&!w){e.next=3;break}return e.abrupt("return",{});case 3:if(k=u?u[0]:s,N=function(e){i&&k.reportValidity&&(k.setCustomValidity(vs(e)?"":e||""),k.reportValidity())},T={},_=bs(s),E=Oo(s),S=_||E,L=(x||ys(s))&&!s.value||""===n||Array.isArray(n)&&!n.length,A=ls.bind(null,g,r,T),O=function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:Ko,i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Qo,a=e?t:n;T[g]=d({type:e?r:i,message:a,ref:s},A(e?r:i,a))},!(a?!Array.isArray(n)||!n.length:l&&(!S&&(L||Co(n))||vs(n)&&!n||E&&!Ts(u).isValid||_&&!Es(u).isValid))){e.next=19;break}if(I=xs(l)?{value:!!l,message:l}:Ls(l),C=I.value,R=I.message,!C){e.next=19;break}if(T[g]=d({type:Xo,message:R,ref:k},A(Xo,R)),r){e.next=19;break}return N(R),e.abrupt("return",T);case 19:if(L||Co(h)&&Co(m)){e.next=28;break}if(M=Ls(m),F=Ls(h),Co(n)||isNaN(n)?(U=s.valueAsDate||new Date(n),V=function(e){return new Date((new Date).toDateString()+" "+e)},B="time"==s.type,z="week"==s.type,as(M.value)&&n&&(j=B?V(n)>V(M.value):z?n>M.value:U>new Date(M.value)),as(F.value)&&n&&(D=B?V(n)<V(F.value):z?n<F.value:U<new Date(F.value))):(P=s.valueAsNumber||(n?+n:n),Co(M.value)||(j=P>M.value),Co(F.value)||(D=P<F.value)),!j&&!D){e.next=28;break}if(O(!!j,M.message,F.message,Wo,Ho),r){e.next=28;break}return N(T[g].message),e.abrupt("return",T);case 28:if(!c&&!f||L||!(as(n)||a&&Array.isArray(n))){e.next=38;break}if(q=Ls(c),J=Ls(f),G=!Co(q.value)&&n.length>q.value,$=!Co(J.value)&&n.length<J.value,!G&&!$){e.next=38;break}if(O(G,q.message,J.message),r){e.next=38;break}return N(T[g].message),e.abrupt("return",T);case 38:if(!v||L||!as(n)){e.next=45;break}if(W=Ls(v),H=W.value,K=W.message,!ws(H)||n.match(H)){e.next=45;break}if(T[g]=d({type:Yo,message:K,ref:s},A(Yo,K)),r){e.next=45;break}return N(K),e.abrupt("return",T);case 45:if(!y){e.next=79;break}if(!gs(y)){e.next=58;break}return e.next=49,y(n);case 49:if(Q=e.sent,!(Y=Ss(Q,k))){e.next=56;break}if(T[g]=d(d({},Y),A(Zo,Y.message)),r){e.next=56;break}return N(Y.message),e.abrupt("return",T);case 56:e.next=79;break;case 58:if(!jo(y)){e.next=79;break}X={},e.t0=p().keys(y);case 61:if((e.t1=e.t0()).done){e.next=75;break}if(Z=e.t1.value,ts(X)||r){e.next=65;break}return e.abrupt("break",75);case 65:return e.t2=Ss,e.next=68,y[Z](n);case 68:e.t3=e.sent,e.t4=k,e.t5=Z,(ee=(0,e.t2)(e.t3,e.t4,e.t5))&&(X=d(d({},ee),A(Z,ee.message)),N(ee.message),r&&(T[g]=X)),e.next=61;break;case 75:if(ts(X)){e.next=79;break}if(T[g]=d({ref:k},X),r){e.next=79;break}return e.abrupt("return",T);case 79:return N(!0),e.abrupt("return",T);case 81:case"end":return e.stop()}}),e)})));return function(t,n,r,i,a){return e.apply(this,arguments)}}(),Os=function(e){return{isOnSubmit:!e||e===Jo,isOnBlur:e===zo,isOnChange:e===qo,isOnAll:e===$o,isOnTouch:e===Go}};function Is(e){for(var t in e)if(!Po(e[t]))return!1;return!0}function Cs(e,t){var n,r=cs(t)?[t]:fs(t),i=1==r.length?e:function(e,t){for(var n=t.slice(0,-1).length,r=0;r<n;)e=Po(e)?r++:e[t[r++]];return e}(e,r),a=r[r.length-1];i&&delete i[a];for(var o=0;o<r.slice(0,-1).length;o++){var s=-1,u=void 0,l=r.slice(0,-(o+1)),c=l.length-1;for(o>0&&(n=e);++s<l.length;){var f=l[s];u=u?u[f]:e[f],c===s&&(jo(u)&&ts(u)||Array.isArray(u)&&Is(u))&&(n?delete n[f]:delete e[f]),n=u}}return e}function Rs(){var e=[];return{get observers(){return e},next:function(t){var n,r=D(e);try{for(r.s();!(n=r.n()).done;){n.value.next(t)}}catch(e){r.e(e)}finally{r.f()}},subscribe:function(t){return e.push(t),{unsubscribe:function(){e=e.filter((function(e){return e!==t}))}}},unsubscribe:function(){e=[]}}}var js=function(e){return Co(e)||!Ro(e)};function Ds(e,t){if(js(e)||js(t))return e===t;if(Io(e)&&Io(t))return e.getTime()===t.getTime();var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var i=0,a=n;i<a.length;i++){var o=a[i],s=e[o];if(!r.includes(o))return!1;if("ref"!==o){var u=t[o];if(Io(s)&&Io(u)||jo(s)&&jo(u)||Array.isArray(s)&&Array.isArray(u)?!Ds(s,u):s!==u)return!1}}return!0}var Ms=function(e){var t=e?e.ownerDocument:0;return e instanceof(t&&t.defaultView?t.defaultView.HTMLElement:HTMLElement)},Fs=function(e){return"select-multiple"===e.type},Ps=function(e){return bs(e)||Oo(e)},Us=function(e){return Ms(e)&&e.isConnected},Vs=function(e){for(var t in e)if(gs(e[t]))return!0;return!1};function Bs(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=Array.isArray(e);if(jo(e)||n)for(var r in e)Array.isArray(e[r])||jo(e[r])&&!Vs(e[r])?(t[r]=Array.isArray(e[r])?[]:{},Bs(e[r],t[r])):Co(e[r])||(t[r]=!0);return t}function zs(e,t,n){var r=Array.isArray(e);if(jo(e)||r)for(var i in e)Array.isArray(e[i])||jo(e[i])&&!Vs(e[i])?Po(t)||js(n[i])?n[i]=Array.isArray(e[i])?Bs(e[i],[]):d({},Bs(e[i])):zs(e[i],Co(t)?{}:t[i],n[i]):Ds(e[i],t[i])?delete n[i]:n[i]=!0;return n}var qs=function(e,t){return zs(e,t,Bs(t))},Js=function(e,t){var n=t.valueAsNumber,r=t.valueAsDate,i=t.setValueAs;return Po(e)?e:n?""===e?NaN:e?+e:e:r&&as(e)?new Date(e):i?i(e):e};function Gs(e){var t=e.ref;if(!(e.refs?e.refs.every((function(e){return e.disabled})):t.disabled))return ys(t)?t.files:bs(t)?Es(e.refs).value:Fs(t)?C(t.selectedOptions).map((function(e){return e.value})):Oo(t)?Ts(e.refs).value:Js(Po(t.value)?e.ref.value:t.value,e)}var $s=function(e,t,n,r){var i,a={},o=D(e);try{for(o.s();!(i=o.n()).done;){var s=i.value,u=Uo(t,s);u&&ds(a,s,u._f)}}catch(e){o.e(e)}finally{o.f()}return{criteriaMode:n,names:C(e),fields:a,shouldUseNativeValidation:r}},Ws=function(e){return Po(e)?e:ws(e)?e.source:jo(e)?ws(e.value)?e.value.source:e.value:e},Hs=function(e){return e.mount&&(e.required||e.min||e.max||e.maxLength||e.minLength||e.pattern||e.validate)};function Ks(e,t,n){var r=Uo(e,n);if(r||cs(n))return{error:r,name:n};for(var i=n.split(".");i.length;){var a=i.join("."),o=Uo(t,a),s=Uo(e,a);if(o&&!Array.isArray(o)&&n!==a)return{name:n};if(s&&s.type)return{name:a,error:s};i.pop()}return{name:n}}var Qs=function(e,t,n,r,i){return!i.isOnAll&&(!n&&i.isOnTouch?!(t||e):(n?r.isOnBlur:i.isOnBlur)?!e:!(n?r.isOnChange:i.isOnChange)||e)},Ys=function(e,t){return!Fo(Uo(e,t)).length&&Cs(e,t)},Xs={mode:Jo,reValidateMode:qo,shouldFocusError:!0};function Zs(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=d(d({},Xs),t),r={submitCount:0,isDirty:!1,isValidating:!1,isSubmitted:!1,isSubmitting:!1,isSubmitSuccessful:!1,isValid:!1,touchedFields:{},dirtyFields:{},errors:{}},i={},a=us(n.defaultValues)||{},o=n.shouldUnregister?{}:us(a),s={action:!1,mount:!1,watch:!1},u={mount:new Set,unMount:new Set,array:new Set,watch:new Set},l=0,c={isDirty:!1,dirtyFields:!1,touchedFields:!1,isValidating:!1,isValid:!1,errors:!1},f={watch:Rs(),array:Rs(),state:Rs()},h=Os(n.mode),m=Os(n.reValidateMode),y=n.criteriaMode===$o,g=function(e){return function(t){clearTimeout(l),l=window.setTimeout(e,t)}},x=function(){var e=v(p().mark((function e(){var t;return p().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!c.isValid){e.next=14;break}if(!n.resolver){e.next=9;break}return e.t1=ts,e.next=5,L();case 5:e.t2=e.sent.errors,e.t0=(0,e.t1)(e.t2),e.next=12;break;case 9:return e.next=11,O(i,!0);case 11:e.t0=e.sent;case 12:(t=e.t0)!==r.isValid&&(r.isValid=t,f.state.next({isValid:t}));case 14:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),w=function(e){return c.isValidating&&e!==r.isValidating&&f.state.next({isValidating:e})},k=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],n=arguments.length>2?arguments[2]:void 0,u=arguments.length>3?arguments[3]:void 0,l=!(arguments.length>4&&void 0!==arguments[4])||arguments[4],d=!(arguments.length>5&&void 0!==arguments[5])||arguments[5];if(u&&n){if(s.action=!0,d&&Array.isArray(Uo(i,e))){var p=n(Uo(i,e),u.argA,u.argB);l&&ds(i,e,p)}if(d&&Array.isArray(Uo(r.errors,e))){var h=n(Uo(r.errors,e),u.argA,u.argB);l&&ds(r.errors,e,h),Ys(r.errors,e)}if(c.touchedFields&&d&&Array.isArray(Uo(r.touchedFields,e))){var m=n(Uo(r.touchedFields,e),u.argA,u.argB);l&&ds(r.touchedFields,e,m)}c.dirtyFields&&(r.dirtyFields=qs(a,o)),f.state.next({name:e,isDirty:R(e,t),dirtyFields:r.dirtyFields,errors:r.errors,isValid:r.isValid})}else ds(o,e,t)},N=function(e,t){ds(r.errors,e,t),f.state.next({errors:r.errors})},T=function(e,t,n,r){var u=Uo(i,e);if(u){var l=Uo(o,e,Po(n)?Uo(a,e):n);Po(l)||r&&r.defaultChecked||t?ds(o,e,t?l:Gs(u._f)):F(e,l),s.mount&&x()}},_=function(e,t,n,i,o){var s=!1,u=!1,l={name:e};if((!n||i)&&(c.isDirty&&(u=r.isDirty,r.isDirty=l.isDirty=R(),s=u!==l.isDirty),c.dirtyFields)){u=Uo(r.dirtyFields,e);var d=Ds(Uo(a,e),t);d?Cs(r.dirtyFields,e):ds(r.dirtyFields,e,!0),l.dirtyFields=r.dirtyFields,s=s||u!==!d}if(n){var p=Uo(r.touchedFields,e);p||(ds(r.touchedFields,e,n),l.touchedFields=r.touchedFields,s=s||c.touchedFields&&p!==n)}return s&&o&&f.state.next(l),s?l:{}},E=function(n,i,a,o){var s=Uo(r.errors,n),u=c.isValid&&vs(i)&&r.isValid!==i;if(t.delayError&&a?(e=g((function(){return N(n,a)})))(t.delayError):(clearTimeout(l),e=null,a?ds(r.errors,n,a):Cs(r.errors,n)),(a?!Ds(s,a):s)||!ts(o)||u){var p=d(d(d({},o),u&&vs(i)?{isValid:i}:{}),{},{errors:r.errors,name:n});r=d(d({},r),p),f.state.next(p)}w(!1)},L=function(){var e=v(p().mark((function e(t){return p().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,n.resolver(o,n.context,$s(t||u.mount,i,n.criteriaMode,n.shouldUseNativeValidation));case 2:return e.abrupt("return",e.sent);case 3:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),A=function(){var e=v(p().mark((function e(t){var n,i,a,o,s,u;return p().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,L();case 2:if(n=e.sent,i=n.errors,t){a=D(t);try{for(a.s();!(o=a.n()).done;)s=o.value,(u=Uo(i,s))?ds(r.errors,s,u):Cs(r.errors,s)}catch(e){a.e(e)}finally{a.f()}}else r.errors=i;return e.abrupt("return",i);case 6:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),O=function(){var e=v(p().mark((function e(t,i){var a,s,l,c,f,d,h,m=arguments;return p().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:a=m.length>2&&void 0!==m[2]?m[2]:{valid:!0},e.t0=p().keys(t);case 2:if((e.t1=e.t0()).done){e.next=23;break}if(s=e.t1.value,!(l=t[s])){e.next=21;break}if(c=l._f,f=S(l,Ao),!c){e.next=17;break}return d=u.array.has(c.name),e.next=11,As(l,Uo(o,c.name),y,n.shouldUseNativeValidation,d);case 11:if(!(h=e.sent)[c.name]){e.next=16;break}if(a.valid=!1,!i){e.next=16;break}return e.abrupt("break",23);case 16:!i&&(Uo(h,c.name)?d?ms(r.errors,h,c.name):ds(r.errors,c.name,h[c.name]):Cs(r.errors,c.name));case 17:if(e.t2=f,!e.t2){e.next=21;break}return e.next=21,O(f,i,a);case 21:e.next=2;break;case 23:return e.abrupt("return",a.valid);case 24:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}(),I=function(){var e,t=D(u.unMount);try{for(t.s();!(e=t.n()).done;){var n=e.value,r=Uo(i,n);r&&(r._f.refs?r._f.refs.every((function(e){return!Us(e)})):!Us(r._f.ref))&&W(n)}}catch(e){t.e(e)}finally{t.f()}u.unMount=new Set},R=function(e,t){return e&&t&&ds(o,e,t),!Ds(z(),a)},j=function(e,t,n){return os(e,u,d({},s.mount?o:Po(t)?a:as(e)?b({},e,t):t),n)},M=function(e){return Fo(Uo(s.mount?o:a,e,t.shouldUnregister?Uo(a,e,[]):[]))},F=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=Uo(i,e),a=t;if(r){var s=r._f;s&&(!s.disabled&&ds(o,e,Js(t,s)),a=ss&&Ms(s.ref)&&Co(t)?"":t,Fs(s.ref)?C(s.ref.options).forEach((function(e){return e.selected=a.includes(e.value)})):s.refs?Oo(s.ref)?s.refs.length>1?s.refs.forEach((function(e){return(!e.defaultChecked||!e.disabled)&&(e.checked=Array.isArray(a)?!!a.find((function(t){return t===e.value})):a===e.value)})):s.refs[0]&&(s.refs[0].checked=!!a):s.refs.forEach((function(e){return e.checked=e.value===a})):ys(s.ref)?s.ref.value="":(s.ref.value=a,s.ref.type||f.watch.next({name:e})))}(n.shouldDirty||n.shouldTouch)&&_(e,a,n.shouldTouch,n.shouldDirty,!0),n.shouldValidate&&B(e)},P=function e(t,n,r){for(var a in n){var o=n[a],s="".concat(t,".").concat(a),l=Uo(i,s);!u.array.has(t)&&js(o)&&(!l||l._f)||Io(o)?F(s,o,r):e(s,o,r)}},U=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},s=Uo(i,e),l=u.array.has(e),d=us(t);ds(o,e,d),l?(f.array.next({name:e,values:o}),(c.isDirty||c.dirtyFields)&&n.shouldDirty&&(r.dirtyFields=qs(a,o),f.state.next({name:e,dirtyFields:r.dirtyFields,isDirty:R(e,d)}))):!s||s._f||Co(d)?F(e,d,n):P(e,d,n),hs(e,u)&&f.state.next({}),f.watch.next({name:e})},V=function(){var t=v(p().mark((function t(a){var s,l,v,g,b,k,N,T,S,A,I,C,R,j,D,M;return p().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(s=a.target,l=s.name,v=Uo(i,l),g=function(){return s.type?Gs(v._f):Do(a)},!v){t.next=44;break}if(N=g(),T=a.type===Vo||a.type===Bo,S=!Hs(v._f)&&!n.resolver&&!Uo(r.errors,l)&&!v._f.deps||Qs(T,Uo(r.touchedFields,l),r.isSubmitted,m,h),A=hs(l,u,T),ds(o,l,N),T?(v._f.onBlur&&v._f.onBlur(a),e&&e(0)):v._f.onChange&&v._f.onChange(a),I=_(l,N,T,!1),C=!ts(I)||A,!T&&f.watch.next({name:l,type:a.type}),!S){t.next=17;break}return c.isValid&&x(),t.abrupt("return",C&&f.state.next(d({name:l},A?{}:I)));case 17:if(!T&&A&&f.state.next({}),w(!0),!n.resolver){t.next=31;break}return t.next=22,L([l]);case 22:R=t.sent,j=R.errors,D=Ks(r.errors,i,l),M=Ks(j,i,D.name||l),b=M.error,l=M.name,k=ts(j),t.next=43;break;case 31:return t.next=33,As(v,Uo(o,l),y,n.shouldUseNativeValidation);case 33:if(t.t0=l,!(b=t.sent[t.t0])){t.next=39;break}k=!1,t.next=43;break;case 39:if(!c.isValid){t.next=43;break}return t.next=42,O(i,!0);case 42:k=t.sent;case 43:js(N)&&g()!==N?w(!1):(v._f.deps&&B(v._f.deps),E(l,k,b,I));case 44:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),B=function(){var e=v(p().mark((function e(t){var a,o,s,l,h,m=arguments;return p().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(a=m.length>1&&void 0!==m[1]?m[1]:{},l=rs(t),w(!0),!n.resolver){e.next=11;break}return e.next=6,A(Po(t)?t:l);case 6:h=e.sent,o=ts(h),s=t?!l.some((function(e){return Uo(h,e)})):o,e.next=21;break;case 11:if(!t){e.next=18;break}return e.next=14,Promise.all(l.map(function(){var e=v(p().mark((function e(t){var n;return p().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=Uo(i,t),e.next=3,O(n&&n._f?b({},t,n):n);case 3:return e.abrupt("return",e.sent);case 4:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()));case 14:((s=e.sent.every(Boolean))||r.isValid)&&x(),e.next=21;break;case 18:return e.next=20,O(i);case 20:s=o=e.sent;case 21:return f.state.next(d(d(d({},!as(t)||c.isValid&&o!==r.isValid?{}:{name:t}),n.resolver||!t?{isValid:o}:{}),{},{errors:r.errors,isValidating:!1})),a.shouldFocus&&!s&&ps(i,(function(e){return e&&Uo(r.errors,e)}),t?l:u.mount),e.abrupt("return",s);case 24:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),z=function(e){var t=d(d({},a),s.mount?o:{});return Po(e)?t:as(e)?Uo(t,e):e.map((function(e){return Uo(t,e)}))},q=function(e,t){return{invalid:!!Uo((t||r).errors,e),isDirty:!!Uo((t||r).dirtyFields,e),isTouched:!!Uo((t||r).touchedFields,e),error:Uo((t||r).errors,e)}},J=function(e){e?rs(e).forEach((function(e){return Cs(r.errors,e)})):r.errors={},f.state.next({errors:r.errors})},G=function(e,t,n){var a=(Uo(i,e,{_f:{}})._f||{}).ref;ds(r.errors,e,d(d({},t),{},{ref:a})),f.state.next({name:e,errors:r.errors,isValid:!1}),n&&n.shouldFocus&&a&&a.focus&&a.focus()},$=function(e,t){return gs(e)?f.watch.subscribe({next:function(n){return e(j(void 0,t),n)}}):j(e,t,!0)},W=function(e){var t,s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},l=D(e?rs(e):u.mount);try{for(l.s();!(t=l.n()).done;){var c=t.value;u.mount.delete(c),u.array.delete(c),Uo(i,c)&&(s.keepValue||(Cs(i,c),Cs(o,c)),!s.keepError&&Cs(r.errors,c),!s.keepDirty&&Cs(r.dirtyFields,c),!s.keepTouched&&Cs(r.touchedFields,c),!n.shouldUnregister&&!s.keepDefaultValue&&Cs(a,c))}}catch(e){l.e(e)}finally{l.f()}f.watch.next({}),f.state.next(d(d({},r),s.keepDirty?{isDirty:R()}:{})),!s.keepIsValid&&x()},H=function e(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},l=Uo(i,t),c=vs(r.disabled);return ds(i,t,d(d({},l||{}),{},{_f:d(d({},l&&l._f?l._f:{ref:{name:t}}),{},{name:t,mount:!0},r)})),u.mount.add(t),l?c&&ds(o,t,r.disabled?void 0:Uo(o,t,Gs(l._f))):T(t,!0,r.value),d(d(d({},c?{disabled:r.disabled}:{}),n.shouldUseNativeValidation?{required:!!r.required,min:Ws(r.min),max:Ws(r.max),minLength:Ws(r.minLength),maxLength:Ws(r.maxLength),pattern:Ws(r.pattern)}:{}),{},{name:t,onChange:V,onBlur:V,ref:function(e){function t(t){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}((function(o){if(o){e(t,r),l=Uo(i,t);var c=Po(o.value)&&o.querySelectorAll&&o.querySelectorAll("input,select,textarea")[0]||o,f=Ps(c),p=l._f.refs||[];if(f?p.find((function(e){return e===c})):c===l._f.ref)return;ds(i,t,{_f:d(d({},l._f),f?{refs:[].concat(C(p.filter(Us)),[c],C(Array.isArray(Uo(a,t))?[{}]:[])),ref:{type:c.type,name:t}}:{ref:c})}),T(t,!1,void 0,c)}else(l=Uo(i,t,{}))._f&&(l._f.mount=!1),(n.shouldUnregister||r.shouldUnregister)&&(!Mo(u.array,t)||!s.action)&&u.unMount.add(t)}))})},K=function(){return n.shouldFocusError&&ps(i,(function(e){return e&&Uo(r.errors,e)}),u.mount)},Q=function(e,t){return function(){var a=v(p().mark((function a(s){var u,l,c,h,m;return p().wrap((function(a){for(;;)switch(a.prev=a.next){case 0:if(s&&(s.preventDefault&&s.preventDefault(),s.persist&&s.persist()),u=!0,l=us(o),f.state.next({isSubmitting:!0}),a.prev=4,!n.resolver){a.next=15;break}return a.next=8,L();case 8:c=a.sent,h=c.errors,m=c.values,r.errors=h,l=m,a.next=17;break;case 15:return a.next=17,O(i);case 17:if(!ts(r.errors)){a.next=23;break}return f.state.next({errors:{},isSubmitting:!0}),a.next=21,e(l,s);case 21:a.next=27;break;case 23:if(!t){a.next=26;break}return a.next=26,t(d({},r.errors),s);case 26:K();case 27:a.next=33;break;case 29:throw a.prev=29,a.t0=a.catch(4),u=!1,a.t0;case 33:return a.prev=33,r.isSubmitted=!0,f.state.next({isSubmitted:!0,isSubmitting:!1,isSubmitSuccessful:ts(r.errors)&&u,submitCount:r.submitCount+1,errors:r.errors}),a.finish(33);case 37:case"end":return a.stop()}}),a,null,[[4,29,33,37]])})));return function(e){return a.apply(this,arguments)}}()},Y=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};Uo(i,e)&&(Po(t.defaultValue)?U(e,Uo(a,e)):(U(e,t.defaultValue),ds(a,e,t.defaultValue)),t.keepTouched||Cs(r.touchedFields,e),t.keepDirty||(Cs(r.dirtyFields,e),r.isDirty=t.defaultValue?R(e,Uo(a,e)):R()),t.keepError||(Cs(r.errors,e),c.isValid&&x()),f.state.next(d({},r)))},X=function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},l=e||a,d=us(l),p=e&&!ts(e)?d:a;if(n.keepDefaultValues||(a=l),!n.keepValues){if(n.keepDirtyValues){var h,m=D(u.mount);try{for(m.s();!(h=m.n()).done;){var v=h.value;Uo(r.dirtyFields,v)?ds(p,v,Uo(o,v)):U(v,Uo(p,v))}}catch(e){m.e(e)}finally{m.f()}}else{if(ss&&Po(e)){var y,g=D(u.mount);try{for(g.s();!(y=g.n()).done;){var x=y.value,b=Uo(i,x);if(b&&b._f){var w=Array.isArray(b._f.refs)?b._f.refs[0]:b._f.ref;if(Ms(w)){var k=w.closest("form");if(k){k.reset();break}}}}}catch(e){g.e(e)}finally{g.f()}}i={}}o=t.shouldUnregister?n.keepDefaultValues?us(a):{}:d,f.array.next({values:p}),f.watch.next({values:p})}u={mount:new Set,unMount:new Set,array:new Set,watch:new Set,watchAll:!1,focus:""},s.mount=!c.isValid||!!n.keepIsValid,s.watch=!!t.shouldUnregister,f.state.next({submitCount:n.keepSubmitCount?r.submitCount:0,isDirty:n.keepDirty||n.keepDirtyValues?r.isDirty:!(!n.keepDefaultValues||Ds(e,a)),isSubmitted:!!n.keepIsSubmitted&&r.isSubmitted,dirtyFields:n.keepDirty||n.keepDirtyValues?r.dirtyFields:n.keepDefaultValues&&e?qs(a,e):{},touchedFields:n.keepTouched?r.touchedFields:{},errors:n.keepErrors?r.errors:{},isSubmitting:!1,isSubmitSuccessful:!1})},Z=function(e,t){return X(gs(e)?e(o):e,t)},ee=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=Uo(i,e),r=n&&n._f;if(r){var a=r.refs?r.refs[0]:r.ref;a.focus&&(a.focus(),t.shouldSelect&&a.select())}};return{control:{register:H,unregister:W,getFieldState:q,_executeSchema:L,_focusError:K,_getWatch:j,_getDirty:R,_updateValid:x,_removeUnmounted:I,_updateFieldArray:k,_getFieldArray:M,_subjects:f,_proxyFormState:c,get _fields(){return i},get _formValues(){return o},get _stateFlags(){return s},set _stateFlags(e){s=e},get _defaultValues(){return a},get _names(){return u},set _names(e){u=e},get _formState(){return r},set _formState(e){r=e},get _options(){return n},set _options(e){n=d(d({},n),e)}},trigger:B,register:H,handleSubmit:Q,watch:$,setValue:U,getValues:z,reset:Z,resetField:Y,clearErrors:J,unregister:W,setError:G,setFocus:ee,getFieldState:q}}function eu(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.useRef(),r=e.useState({isDirty:!1,isValidating:!1,isSubmitted:!1,isSubmitting:!1,isSubmitSuccessful:!1,isValid:!1,submitCount:0,dirtyFields:{},touchedFields:{},errors:{},defaultValues:t.defaultValues}),i=I(r,2),a=i[0],o=i[1];n.current||(n.current=d(d({},Zs(t)),{},{formState:a}));var s=n.current.control;return s._options=t,is({subject:s._subjects.state,callback:e.useCallback((function(e){ns(e,s._proxyFormState,!0)&&(s._formState=d(d({},s._formState),e),o(d({},s._formState)))}),[s])}),e.useEffect((function(){s._stateFlags.mount||(s._proxyFormState.isValid&&s._updateValid(),s._stateFlags.mount=!0),s._stateFlags.watch&&(s._stateFlags.watch=!1,s._subjects.state.next({})),s._removeUnmounted()})),e.useEffect((function(){a.submitCount&&s._focusError()}),[s,a.submitCount]),n.current.formState=es(a,s),n.current}function tu({className:e,...t}){return l.exports.jsxs("svg",{className:lt("animate-spin",e),...t,xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",children:[l.exports.jsx("circle",{className:"opacity-25",cx:"12",cy:"12",r:"10",stroke:"currentColor",strokeWidth:"4"}),l.exports.jsx("path",{className:"opacity-75",fill:"currentColor",d:"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"})]})}const nu=e.forwardRef((function({as:t,size:n="sm",color:r="primary",loading:i=!1,disabled:a=!1,icon:o,iconPosition:s="leading",className:u,children:c,...f},d){const p=Boolean(c),h=lt({"h-4 w-4":"xxs"===n||"xs"===n||"sm"===n,"h-5 w-5":"md"===n||"lg"===n||"xl"===n},{"-ml-[1px] mr-1.5":("xs"===n||"xxs"===n)&&p,"-ml-0.5 mr-2":"sm"===n&&p,"-ml-1 mr-2":"md"===n&&p,"-ml-1 mr-3":("lg"===n||"xl"===n)&&p}),m=lt("xs"===n||"sm"===n?"h-4 w-4":"h-5 w-5",{"ml-1.5 -mr-[1px]":("xs"===n||"xxs"===n)&&p,"ml-2 -mr-0.5":"sm"===n&&p,"ml-2 -mr-1":"md"===n&&p,"ml-3 -mr-1":("lg"===n||"xl"===n)&&p});return e.createElement(t||"button",{...f,ref:d,disabled:a||i,className:lt("inline-flex items-center justify-center border font-medium focus:outline-none transition-colors duration-200 ease-in-out rounded-md",{"border-transparent text-white bg-primary-600 hover:bg-primary-700":"primary"===r&&!(a||i),"border-transparent text-white bg-primary-300 cursor-not-allowed":"primary"===r&&(a||i),"border-transparent text-primary-700 bg-primary-100 hover:bg-primary-200":"secondary"===r&&!(a||i),"border-transparent text-primary-400 bg-blueGray-100 cursor-not-allowed":"secondary"===r&&(a||i),"border-gray-300 text-gray-700 bg-white hover:bg-gray-50":"white"===r&&!(a||i),"border-gray-300 text-gray-500 bg-gray-50":"white"===r&&(a||i),"border-transparent text-zinc-500 bg-transparent hover:bg-primary-100 hover:text-zinc-700":"transparent"===r&&!(a||i),"border-transparent text-zinc-500 bg-transparent":"transparent"===r&&(a||i),"border-transparent text-white bg-red-600 hover:bg-red-700":"red"===r&&!(a||i),"border-transparent text-white bg-red-300 cursor-not-allowed":"red"===r&&(a||i)},{"px-2.5 py-1.5 leading-none text-[13px] rounded":"xxs"===n,"px-2.5 py-1.5 text-sm":"xs"===n,"px-3 py-2 text-sm":"sm"===n,"px-4 py-2 text-sm":"md"===n,"px-4 py-2 text-base":"lg"===n,"px-6 py-3 text-base":"xl"===n},u)},i?l.exports.jsx(tu,{className:h,"aria-hidden":"true"}):"leading"===s&&o&&l.exports.jsx(o,{className:h,"aria-hidden":"true"}),c,"trailing"===s&&!i&&o&&l.exports.jsx(o,{className:m,"aria-hidden":"true"}))})),ru=e.createContext({open:!1,onClose:()=>{}}),iu=({size:t="sm",open:n,onClose:r,children:i,initialFocus:a,blank:o=!1,stretch:s=!1})=>l.exports.jsx(ru.Provider,{value:{open:n,onClose:r},children:l.exports.jsx(za.Root,{show:n,as:e.Fragment,children:l.exports.jsxs(Oi,{as:"div",className:"relative z-30",initialFocus:a,onClose:r,children:[l.exports.jsx(za.Child,{as:e.Fragment,enter:"ease-out duration-300",enterFrom:"opacity-0",enterTo:"opacity-100",leave:"ease-in duration-200",leaveFrom:"opacity-100",leaveTo:"opacity-0",children:l.exports.jsx("div",{className:"fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"})}),l.exports.jsx("div",{className:"fixed z-40 inset-0 overflow-y-auto",children:l.exports.jsx("div",{className:"flex items-end sm:items-center justify-center min-h-full p-4 text-center sm:p-0",children:l.exports.jsx(za.Child,{as:e.Fragment,enter:"ease-out duration-300",enterFrom:"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95",enterTo:"opacity-100 translate-y-0 sm:scale-100",leave:"ease-in duration-200",leaveFrom:"opacity-100 translate-y-0 sm:scale-100",leaveTo:"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95",children:l.exports.jsx(Oi.Panel,{className:lt("relative inline-block align-bottom bg-white rounded-lg text-left shadow-xl transform transition-all",{"px-4 pt-5 pb-4 sm:my-8 sm:align-middle sm:max-w-lg sm:w-auto sm:p-6":"sm"===t,"px-6 pt-8 pb-6 sm:my-8 sm:align-middle sm:max-w-xl sm:w-auto sm:p-6":"md"===t,"px-8 pt-12 pb-8 sm:my-8 sm:align-middle sm:max-w-[50rem] sm:w-auto sm:p-6":"lg"===t,"px-8 pt-12 pb-8 sm:my-8 sm:align-middle sm:max-w-[64rem] sm:w-auto sm:p-6":"xl"===t},o&&"!p-0",s&&"!w-full"),children:i})})})})]})})}),au=Oi.Title;au.displayName="Modal.Title",iu.Title=au;const ou=({children:e})=>l.exports.jsx("div",{className:"p-4",children:e});ou.displayName="Modal.Content",iu.Content=ou;const su=()=>{const{onClose:t}=(()=>{const t=e.useContext(ru);if(!t)throw new Error("useModalContext must be used within a Modal");return t})();return l.exports.jsx("button",{type:"button",onClick:()=>t(!1),className:"absolute top-0 -right-12 flex justify-center items-center bg-white rounded-full h-9 w-9 p-0 shadow-none border-none hover:shadow-none outline-none focus:outline-none",children:l.exports.jsx(st,{className:"h-5 w-5 text-neutral-700"})})};su.displayName="Modal.CloseButton",iu.CloseButton=su;var uu=e.forwardRef((function({className:e,children:t,...n},r){return l.exports.jsx("label",{...n,ref:r,className:lt("block text-sm font-medium text-gray-700 mb-0",e),children:t})})),lu=e.forwardRef((function({id:t,className:n,label:r,hint:i,disabled:a=!1,error:o,...s},u){const c=e.useMemo((()=>lt("form-textarea block w-full rounded-md px-3 py-2 border text-sm focus:outline-0 focus:ring-0",{"border-gray-200 hover:border-gray-300 focus:border-primary-500":!o,"text-red-900 placeholder-red-300 border-red-200 hover:border-red-300 focus:border-red-500":o,"bg-gray-100":a})),[a,o]);return l.exports.jsxs("div",{children:[Boolean(r||i)&&l.exports.jsxs("div",{className:lt("flex",r?"justify-between":"justify-end"),children:[r&&l.exports.jsx(uu,{htmlFor:t,children:r}),Boolean(i)&&l.exports.jsx("span",{className:"text-sm text-gray-500",children:i})]}),l.exports.jsx("div",{className:r||i?"mt-1":"",children:l.exports.jsx("textarea",{id:t,disabled:a,className:lt(c,n),...s,ref:u})}),Boolean(o)&&l.exports.jsx("p",{className:"mt-1 text-xs text-red-600",children:o})]})}));function cu(e){return{all:e=e||new Map,on:function(t,n){var r=e.get(t);r?r.push(n):e.set(t,[n])},off:function(t,n){var r=e.get(t);r&&(n?r.splice(r.indexOf(n)>>>0,1):e.set(t,[]))},emit:function(t,n){var r=e.get(t);r&&r.slice().map((function(e){e(n)})),(r=e.get("*"))&&r.slice().map((function(e){e(t,n)}))}}}function fu(e,t){if(!Boolean(e))throw new Error(t)}function du(e){return"object"==h(e)&&null!==e}function pu(e,t){if(!Boolean(e))throw new Error(null!=t?t:"Unexpected invariant triggered.")}var hu=/\r\n|[\n\r]/g;function mu(e,t){var n,r=0,i=1,a=D(e.body.matchAll(hu));try{for(a.s();!(n=a.n()).done;){var o=n.value;if("number"==typeof o.index||pu(!1),o.index>=t)break;r=o.index+o[0].length,i+=1}}catch(e){a.e(e)}finally{a.f()}return{line:i,column:t+1-r}}function vu(e){return yu(e.source,mu(e.source,e.start))}function yu(e,t){var n=e.locationOffset.column-1,r="".padStart(n)+e.body,i=t.line-1,a=e.locationOffset.line-1,o=t.line+a,s=1===t.line?n:0,u=t.column+s,l="".concat(e.name,":").concat(o,":").concat(u,"\n"),c=r.split(/\r\n|[\n\r]/g),f=c[i];if(f.length>120){for(var d=Math.floor(u/80),p=u%80,h=[],m=0;m<f.length;m+=80)h.push(f.slice(m,m+80));return l+gu([["".concat(o," |"),h[0]]].concat(C(h.slice(1,d+1).map((function(e){return["|",e]}))),[["|","^".padStart(p)],["|",h[d+1]]]))}return l+gu([["".concat(o-1," |"),c[i-1]],["".concat(o," |"),f],["|","^".padStart(u)],["".concat(o+1," |"),c[i+1]]])}function gu(e){var t=e.filter((function(e){var t=I(e,2);return t[0],void 0!==t[1]})),n=Math.max.apply(Math,C(t.map((function(e){return I(e,1)[0].length}))));return t.map((function(e){var t=I(e,2),r=t[0],i=t[1];return r.padStart(n)+(i?" "+i:"")})).join("\n")}function xu(e){var t=e[0];return null==t||"kind"in t||"length"in t?{nodes:t,source:e[1],positions:e[2],path:e[3],originalError:e[4],extensions:e[5]}:t}var bu=function(e,t){w(r,e);var n=O(r);function r(e){var t,i,a,o;y(this,r);for(var s=arguments.length,u=new Array(s>1?s-1:0),l=1;l<s;l++)u[l-1]=arguments[l];var c=xu(u),f=c.nodes,d=c.source,p=c.positions,h=c.path,m=c.originalError,v=c.extensions;(t=n.call(this,e)).name="GraphQLError",t.path=null!=h?h:void 0,t.originalError=null!=m?m:void 0,t.nodes=wu(Array.isArray(f)?f:f?[f]:void 0);var g=wu(null===(i=t.nodes)||void 0===i?void 0:i.map((function(e){return e.loc})).filter((function(e){return null!=e})));t.source=null!=d?d:null==g||null===(a=g[0])||void 0===a?void 0:a.source,t.positions=null!=p?p:null==g?void 0:g.map((function(e){return e.start})),t.locations=p&&d?p.map((function(e){return mu(d,e)})):null==g?void 0:g.map((function(e){return mu(e.source,e.start)}));var x=du(null==m?void 0:m.extensions)?null==m?void 0:m.extensions:void 0;return t.extensions=null!==(o=null!=v?v:x)&&void 0!==o?o:Object.create(null),Object.defineProperties(L(t),{message:{writable:!0,enumerable:!0},name:{enumerable:!1},nodes:{enumerable:!1},source:{enumerable:!1},positions:{enumerable:!1},originalError:{enumerable:!1}}),null!=m&&m.stack?Object.defineProperty(L(t),"stack",{value:m.stack,writable:!0,configurable:!0}):Error.captureStackTrace?Error.captureStackTrace(L(t),r):Object.defineProperty(L(t),"stack",{value:Error().stack,writable:!0,configurable:!0}),t}return x(r,[{key:t,get:function(){return"GraphQLError"}},{key:"toString",value:function(){var e=this.message;if(this.nodes){var t,n=D(this.nodes);try{for(n.s();!(t=n.n()).done;){var r=t.value;r.loc&&(e+="\n\n"+vu(r.loc))}}catch(e){n.e(e)}finally{n.f()}}else if(this.source&&this.locations){var i,a=D(this.locations);try{for(a.s();!(i=a.n()).done;){var o=i.value;e+="\n\n"+yu(this.source,o)}}catch(e){a.e(e)}finally{a.f()}}return e}},{key:"toJSON",value:function(){var e={message:this.message};return null!=this.locations&&(e.locations=this.locations),null!=this.path&&(e.path=this.path),null!=this.extensions&&Object.keys(this.extensions).length>0&&(e.extensions=this.extensions),e}}]),r}(E(Error),Symbol.toStringTag);function wu(e){return void 0===e||0===e.length?void 0:e}function ku(e,t,n){return new bu("Syntax Error: ".concat(n),{source:e,positions:[t]})}var Nu,Tu,_u,Eu,Su=function(e){function t(e,n,r){y(this,t),this.start=e.start,this.end=n.end,this.startToken=e,this.endToken=n,this.source=r}return x(t,[{key:Symbol.toStringTag,get:function(){return"Location"}},{key:"toJSON",value:function(){return{start:this.start,end:this.end}}}]),t}(),Lu=function(e){function t(e,n,r,i,a,o){y(this,t),this.kind=e,this.start=n,this.end=r,this.line=i,this.column=a,this.value=o,this.prev=null,this.next=null}return x(t,[{key:Symbol.toStringTag,get:function(){return"Token"}},{key:"toJSON",value:function(){return{kind:this.kind,value:this.value,line:this.line,column:this.column}}}]),t}(),Au={Name:[],Document:["definitions"],OperationDefinition:["name","variableDefinitions","directives","selectionSet"],VariableDefinition:["variable","type","defaultValue","directives"],Variable:["name"],SelectionSet:["selections"],Field:["alias","name","arguments","directives","selectionSet"],Argument:["name","value"],FragmentSpread:["name","directives"],InlineFragment:["typeCondition","directives","selectionSet"],FragmentDefinition:["name","variableDefinitions","typeCondition","directives","selectionSet"],IntValue:[],FloatValue:[],StringValue:[],BooleanValue:[],NullValue:[],EnumValue:[],ListValue:["values"],ObjectValue:["fields"],ObjectField:["name","value"],Directive:["name","arguments"],NamedType:["name"],ListType:["type"],NonNullType:["type"],SchemaDefinition:["description","directives","operationTypes"],OperationTypeDefinition:["type"],ScalarTypeDefinition:["description","name","directives"],ObjectTypeDefinition:["description","name","interfaces","directives","fields"],FieldDefinition:["description","name","arguments","type","directives"],InputValueDefinition:["description","name","type","defaultValue","directives"],InterfaceTypeDefinition:["description","name","interfaces","directives","fields"],UnionTypeDefinition:["description","name","directives","types"],EnumTypeDefinition:["description","name","directives","values"],EnumValueDefinition:["description","name","directives"],InputObjectTypeDefinition:["description","name","directives","fields"],DirectiveDefinition:["description","name","arguments","locations"],SchemaExtension:["directives","operationTypes"],ScalarTypeExtension:["name","directives"],ObjectTypeExtension:["name","interfaces","directives","fields"],InterfaceTypeExtension:["name","interfaces","directives","fields"],UnionTypeExtension:["name","directives","types"],EnumTypeExtension:["name","directives","values"],InputObjectTypeExtension:["name","directives","fields"]},Ou=new Set(Object.keys(Au));function Iu(e){var t=null==e?void 0:e.kind;return"string"==typeof t&&Ou.has(t)}function Cu(e){return 9===e||32===e}function Ru(e){return e>=48&&e<=57}function ju(e){return e>=97&&e<=122||e>=65&&e<=90}function Du(e){return ju(e)||95===e}function Mu(e){return ju(e)||Ru(e)||95===e}function Fu(e){for(var t,n=Number.MAX_SAFE_INTEGER,r=null,i=-1,a=0;a<e.length;++a){var o,s=e[a],u=Pu(s);u!==s.length&&(r=null!==(o=r)&&void 0!==o?o:a,i=a,0!==a&&u<n&&(n=u))}return e.map((function(e,t){return 0===t?e:e.slice(n)})).slice(null!==(t=r)&&void 0!==t?t:0,i+1)}function Pu(e){for(var t=0;t<e.length&&Cu(e.charCodeAt(t));)++t;return t}!function(e){e.QUERY="query",e.MUTATION="mutation",e.SUBSCRIPTION="subscription"}(Nu||(Nu={})),function(e){e.QUERY="QUERY",e.MUTATION="MUTATION",e.SUBSCRIPTION="SUBSCRIPTION",e.FIELD="FIELD",e.FRAGMENT_DEFINITION="FRAGMENT_DEFINITION",e.FRAGMENT_SPREAD="FRAGMENT_SPREAD",e.INLINE_FRAGMENT="INLINE_FRAGMENT",e.VARIABLE_DEFINITION="VARIABLE_DEFINITION",e.SCHEMA="SCHEMA",e.SCALAR="SCALAR",e.OBJECT="OBJECT",e.FIELD_DEFINITION="FIELD_DEFINITION",e.ARGUMENT_DEFINITION="ARGUMENT_DEFINITION",e.INTERFACE="INTERFACE",e.UNION="UNION",e.ENUM="ENUM",e.ENUM_VALUE="ENUM_VALUE",e.INPUT_OBJECT="INPUT_OBJECT",e.INPUT_FIELD_DEFINITION="INPUT_FIELD_DEFINITION"}(Tu||(Tu={})),function(e){e.NAME="Name",e.DOCUMENT="Document",e.OPERATION_DEFINITION="OperationDefinition",e.VARIABLE_DEFINITION="VariableDefinition",e.SELECTION_SET="SelectionSet",e.FIELD="Field",e.ARGUMENT="Argument",e.FRAGMENT_SPREAD="FragmentSpread",e.INLINE_FRAGMENT="InlineFragment",e.FRAGMENT_DEFINITION="FragmentDefinition",e.VARIABLE="Variable",e.INT="IntValue",e.FLOAT="FloatValue",e.STRING="StringValue",e.BOOLEAN="BooleanValue",e.NULL="NullValue",e.ENUM="EnumValue",e.LIST="ListValue",e.OBJECT="ObjectValue",e.OBJECT_FIELD="ObjectField",e.DIRECTIVE="Directive",e.NAMED_TYPE="NamedType",e.LIST_TYPE="ListType",e.NON_NULL_TYPE="NonNullType",e.SCHEMA_DEFINITION="SchemaDefinition",e.OPERATION_TYPE_DEFINITION="OperationTypeDefinition",e.SCALAR_TYPE_DEFINITION="ScalarTypeDefinition",e.OBJECT_TYPE_DEFINITION="ObjectTypeDefinition",e.FIELD_DEFINITION="FieldDefinition",e.INPUT_VALUE_DEFINITION="InputValueDefinition",e.INTERFACE_TYPE_DEFINITION="InterfaceTypeDefinition",e.UNION_TYPE_DEFINITION="UnionTypeDefinition",e.ENUM_TYPE_DEFINITION="EnumTypeDefinition",e.ENUM_VALUE_DEFINITION="EnumValueDefinition",e.INPUT_OBJECT_TYPE_DEFINITION="InputObjectTypeDefinition",e.DIRECTIVE_DEFINITION="DirectiveDefinition",e.SCHEMA_EXTENSION="SchemaExtension",e.SCALAR_TYPE_EXTENSION="ScalarTypeExtension",e.OBJECT_TYPE_EXTENSION="ObjectTypeExtension",e.INTERFACE_TYPE_EXTENSION="InterfaceTypeExtension",e.UNION_TYPE_EXTENSION="UnionTypeExtension",e.ENUM_TYPE_EXTENSION="EnumTypeExtension",e.INPUT_OBJECT_TYPE_EXTENSION="InputObjectTypeExtension"}(_u||(_u={})),function(e){e.SOF="<SOF>",e.EOF="<EOF>",e.BANG="!",e.DOLLAR="$",e.AMP="&",e.PAREN_L="(",e.PAREN_R=")",e.SPREAD="...",e.COLON=":",e.EQUALS="=",e.AT="@",e.BRACKET_L="[",e.BRACKET_R="]",e.BRACE_L="{",e.PIPE="|",e.BRACE_R="}",e.NAME="Name",e.INT="Int",e.FLOAT="Float",e.STRING="String",e.BLOCK_STRING="BlockString",e.COMMENT="Comment"}(Eu||(Eu={}));var Uu=function(e){function t(e){y(this,t);var n=new Lu(Eu.SOF,0,0,0,0);this.source=e,this.lastToken=n,this.token=n,this.line=1,this.lineStart=0}return x(t,[{key:Symbol.toStringTag,get:function(){return"Lexer"}},{key:"advance",value:function(){return this.lastToken=this.token,this.token=this.lookahead()}},{key:"lookahead",value:function(){var e=this.token;if(e.kind!==Eu.EOF)do{if(e.next)e=e.next;else{var t=$u(this,e.end);e.next=t,t.prev=e,e=t}}while(e.kind===Eu.COMMENT);return e}}]),t}();function Vu(e){return e>=0&&e<=55295||e>=57344&&e<=1114111}function Bu(e,t){return zu(e.charCodeAt(t))&&qu(e.charCodeAt(t+1))}function zu(e){return e>=55296&&e<=56319}function qu(e){return e>=56320&&e<=57343}function Ju(e,t){var n=e.source.body.codePointAt(t);if(void 0===n)return Eu.EOF;if(n>=32&&n<=126){var r=String.fromCodePoint(n);return'"'===r?"'\"'":'"'.concat(r,'"')}return"U+"+n.toString(16).toUpperCase().padStart(4,"0")}function Gu(e,t,n,r,i){var a=e.line,o=1+n-e.lineStart;return new Lu(t,n,r,a,o,i)}function $u(e,t){for(var n=e.source.body,r=n.length,i=t;i<r;){var a=n.charCodeAt(i);switch(a){case 65279:case 9:case 32:case 44:++i;continue;case 10:++i,++e.line,e.lineStart=i;continue;case 13:10===n.charCodeAt(i+1)?i+=2:++i,++e.line,e.lineStart=i;continue;case 35:return Wu(e,i);case 33:return Gu(e,Eu.BANG,i,i+1);case 36:return Gu(e,Eu.DOLLAR,i,i+1);case 38:return Gu(e,Eu.AMP,i,i+1);case 40:return Gu(e,Eu.PAREN_L,i,i+1);case 41:return Gu(e,Eu.PAREN_R,i,i+1);case 46:if(46===n.charCodeAt(i+1)&&46===n.charCodeAt(i+2))return Gu(e,Eu.SPREAD,i,i+3);break;case 58:return Gu(e,Eu.COLON,i,i+1);case 61:return Gu(e,Eu.EQUALS,i,i+1);case 64:return Gu(e,Eu.AT,i,i+1);case 91:return Gu(e,Eu.BRACKET_L,i,i+1);case 93:return Gu(e,Eu.BRACKET_R,i,i+1);case 123:return Gu(e,Eu.BRACE_L,i,i+1);case 124:return Gu(e,Eu.PIPE,i,i+1);case 125:return Gu(e,Eu.BRACE_R,i,i+1);case 34:return 34===n.charCodeAt(i+1)&&34===n.charCodeAt(i+2)?nl(e,i):Qu(e,i)}if(Ru(a)||45===a)return Hu(e,i,a);if(Du(a))return rl(e,i);throw ku(e.source,i,39===a?"Unexpected single quote character ('), did you mean to use a double quote (\")?":Vu(a)||Bu(n,i)?"Unexpected character: ".concat(Ju(e,i),"."):"Invalid character: ".concat(Ju(e,i),"."))}return Gu(e,Eu.EOF,r,r)}function Wu(e,t){for(var n=e.source.body,r=n.length,i=t+1;i<r;){var a=n.charCodeAt(i);if(10===a||13===a)break;if(Vu(a))++i;else{if(!Bu(n,i))break;i+=2}}return Gu(e,Eu.COMMENT,t,i,n.slice(t+1,i))}function Hu(e,t,n){var r=e.source.body,i=t,a=n,o=!1;if(45===a&&(a=r.charCodeAt(++i)),48===a){if(Ru(a=r.charCodeAt(++i)))throw ku(e.source,i,"Invalid number, unexpected digit after 0: ".concat(Ju(e,i),"."))}else i=Ku(e,i,a),a=r.charCodeAt(i);if(46===a&&(o=!0,a=r.charCodeAt(++i),i=Ku(e,i,a),a=r.charCodeAt(i)),69!==a&&101!==a||(o=!0,43!==(a=r.charCodeAt(++i))&&45!==a||(a=r.charCodeAt(++i)),i=Ku(e,i,a),a=r.charCodeAt(i)),46===a||Du(a))throw ku(e.source,i,"Invalid number, expected digit but got: ".concat(Ju(e,i),"."));return Gu(e,o?Eu.FLOAT:Eu.INT,t,i,r.slice(t,i))}function Ku(e,t,n){if(!Ru(n))throw ku(e.source,t,"Invalid number, expected digit but got: ".concat(Ju(e,t),"."));for(var r=e.source.body,i=t+1;Ru(r.charCodeAt(i));)++i;return i}function Qu(e,t){for(var n=e.source.body,r=n.length,i=t+1,a=i,o="";i<r;){var s=n.charCodeAt(i);if(34===s)return o+=n.slice(a,i),Gu(e,Eu.STRING,t,i+1,o);if(92!==s){if(10===s||13===s)break;if(Vu(s))++i;else{if(!Bu(n,i))throw ku(e.source,i,"Invalid character within String: ".concat(Ju(e,i),"."));i+=2}}else{o+=n.slice(a,i);var u=117===n.charCodeAt(i+1)?123===n.charCodeAt(i+2)?Yu(e,i):Xu(e,i):tl(e,i);o+=u.value,a=i+=u.size}}throw ku(e.source,i,"Unterminated string.")}function Yu(e,t){for(var n=e.source.body,r=0,i=3;i<12;){var a=n.charCodeAt(t+i++);if(125===a){if(i<5||!Vu(r))break;return{value:String.fromCodePoint(r),size:i}}if((r=r<<4|el(a))<0)break}throw ku(e.source,t,'Invalid Unicode escape sequence: "'.concat(n.slice(t,t+i),'".'))}function Xu(e,t){var n=e.source.body,r=Zu(n,t+2);if(Vu(r))return{value:String.fromCodePoint(r),size:6};if(zu(r)&&92===n.charCodeAt(t+6)&&117===n.charCodeAt(t+7)){var i=Zu(n,t+8);if(qu(i))return{value:String.fromCodePoint(r,i),size:12}}throw ku(e.source,t,'Invalid Unicode escape sequence: "'.concat(n.slice(t,t+6),'".'))}function Zu(e,t){return el(e.charCodeAt(t))<<12|el(e.charCodeAt(t+1))<<8|el(e.charCodeAt(t+2))<<4|el(e.charCodeAt(t+3))}function el(e){return e>=48&&e<=57?e-48:e>=65&&e<=70?e-55:e>=97&&e<=102?e-87:-1}function tl(e,t){var n=e.source.body;switch(n.charCodeAt(t+1)){case 34:return{value:'"',size:2};case 92:return{value:"\\",size:2};case 47:return{value:"/",size:2};case 98:return{value:"\b",size:2};case 102:return{value:"\f",size:2};case 110:return{value:"\n",size:2};case 114:return{value:"\r",size:2};case 116:return{value:"\t",size:2}}throw ku(e.source,t,'Invalid character escape sequence: "'.concat(n.slice(t,t+2),'".'))}function nl(e,t){for(var n=e.source.body,r=n.length,i=e.lineStart,a=t+3,o=a,s="",u=[];a<r;){var l=n.charCodeAt(a);if(34===l&&34===n.charCodeAt(a+1)&&34===n.charCodeAt(a+2)){s+=n.slice(o,a),u.push(s);var c=Gu(e,Eu.BLOCK_STRING,t,a+3,Fu(u).join("\n"));return e.line+=u.length-1,e.lineStart=i,c}if(92!==l||34!==n.charCodeAt(a+1)||34!==n.charCodeAt(a+2)||34!==n.charCodeAt(a+3))if(10!==l&&13!==l)if(Vu(l))++a;else{if(!Bu(n,a))throw ku(e.source,a,"Invalid character within String: ".concat(Ju(e,a),"."));a+=2}else s+=n.slice(o,a),u.push(s),13===l&&10===n.charCodeAt(a+1)?a+=2:++a,s="",o=a,i=a;else s+=n.slice(o,a),o=a+1,a+=4}throw ku(e.source,a,"Unterminated string.")}function rl(e,t){for(var n=e.source.body,r=n.length,i=t+1;i<r;){if(!Mu(n.charCodeAt(i)))break;++i}return Gu(e,Eu.NAME,t,i,n.slice(t,i))}function il(e){return al(e,[])}function al(e,t){switch(h(e)){case"string":return JSON.stringify(e);case"function":return e.name?"[function ".concat(e.name,"]"):"[function]";case"object":return function(e,t){if(null===e)return"null";if(t.includes(e))return"[Circular]";var n=[].concat(C(t),[e]);if(function(e){return"function"==typeof e.toJSON}(e)){var r=e.toJSON();if(r!==e)return"string"==typeof r?r:al(r,n)}else if(Array.isArray(e))return function(e,t){if(0===e.length)return"[]";if(t.length>2)return"[Array]";for(var n=Math.min(10,e.length),r=e.length-n,i=[],a=0;a<n;++a)i.push(al(e[a],t));1===r?i.push("... 1 more item"):r>1&&i.push("... ".concat(r," more items"));return"["+i.join(", ")+"]"}(e,n);return function(e,t){var n=Object.entries(e);if(0===n.length)return"{}";if(t.length>2)return"["+function(e){var t=Object.prototype.toString.call(e).replace(/^\[object /,"").replace(/]$/,"");if("Object"===t&&"function"==typeof e.constructor){var n=e.constructor.name;if("string"==typeof n&&""!==n)return n}return t}(e)+"]";var r=n.map((function(e){var n=I(e,2);return n[0]+": "+al(n[1],t)}));return"{ "+r.join(", ")+" }"}(e,n)}(e,t);default:return String(e)}}var ol=function(e,t){return e instanceof t},sl=function(e){function t(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"GraphQL request",r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{line:1,column:1};y(this,t),"string"==typeof e||fu(!1,"Body must be a string. Received: ".concat(il(e),".")),this.body=e,this.name=n,this.locationOffset=r,this.locationOffset.line>0||fu(!1,"line in locationOffset is 1-indexed and must be positive."),this.locationOffset.column>0||fu(!1,"column in locationOffset is 1-indexed and must be positive.")}return x(t,[{key:Symbol.toStringTag,get:function(){return"Source"}}]),t}();function ul(e){return ol(e,sl)}function ll(e,t){return new cl(e,t).parseDocument()}var cl=function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};y(this,e);var r=ul(t)?t:new sl(t);this._lexer=new Uu(r),this._options=n,this._tokenCounter=0}return x(e,[{key:"parseName",value:function(){var e=this.expectToken(Eu.NAME);return this.node(e,{kind:_u.NAME,value:e.value})}},{key:"parseDocument",value:function(){return this.node(this._lexer.token,{kind:_u.DOCUMENT,definitions:this.many(Eu.SOF,this.parseDefinition,Eu.EOF)})}},{key:"parseDefinition",value:function(){if(this.peek(Eu.BRACE_L))return this.parseOperationDefinition();var e=this.peekDescription(),t=e?this._lexer.lookahead():this._lexer.token;if(t.kind===Eu.NAME){switch(t.value){case"schema":return this.parseSchemaDefinition();case"scalar":return this.parseScalarTypeDefinition();case"type":return this.parseObjectTypeDefinition();case"interface":return this.parseInterfaceTypeDefinition();case"union":return this.parseUnionTypeDefinition();case"enum":return this.parseEnumTypeDefinition();case"input":return this.parseInputObjectTypeDefinition();case"directive":return this.parseDirectiveDefinition()}if(e)throw ku(this._lexer.source,this._lexer.token.start,"Unexpected description, descriptions are supported only on type definitions.");switch(t.value){case"query":case"mutation":case"subscription":return this.parseOperationDefinition();case"fragment":return this.parseFragmentDefinition();case"extend":return this.parseTypeSystemExtension()}}throw this.unexpected(t)}},{key:"parseOperationDefinition",value:function(){var e=this._lexer.token;if(this.peek(Eu.BRACE_L))return this.node(e,{kind:_u.OPERATION_DEFINITION,operation:Nu.QUERY,name:void 0,variableDefinitions:[],directives:[],selectionSet:this.parseSelectionSet()});var t,n=this.parseOperationType();return this.peek(Eu.NAME)&&(t=this.parseName()),this.node(e,{kind:_u.OPERATION_DEFINITION,operation:n,name:t,variableDefinitions:this.parseVariableDefinitions(),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet()})}},{key:"parseOperationType",value:function(){var e=this.expectToken(Eu.NAME);switch(e.value){case"query":return Nu.QUERY;case"mutation":return Nu.MUTATION;case"subscription":return Nu.SUBSCRIPTION}throw this.unexpected(e)}},{key:"parseVariableDefinitions",value:function(){return this.optionalMany(Eu.PAREN_L,this.parseVariableDefinition,Eu.PAREN_R)}},{key:"parseVariableDefinition",value:function(){return this.node(this._lexer.token,{kind:_u.VARIABLE_DEFINITION,variable:this.parseVariable(),type:(this.expectToken(Eu.COLON),this.parseTypeReference()),defaultValue:this.expectOptionalToken(Eu.EQUALS)?this.parseConstValueLiteral():void 0,directives:this.parseConstDirectives()})}},{key:"parseVariable",value:function(){var e=this._lexer.token;return this.expectToken(Eu.DOLLAR),this.node(e,{kind:_u.VARIABLE,name:this.parseName()})}},{key:"parseSelectionSet",value:function(){return this.node(this._lexer.token,{kind:_u.SELECTION_SET,selections:this.many(Eu.BRACE_L,this.parseSelection,Eu.BRACE_R)})}},{key:"parseSelection",value:function(){return this.peek(Eu.SPREAD)?this.parseFragment():this.parseField()}},{key:"parseField",value:function(){var e,t,n=this._lexer.token,r=this.parseName();return this.expectOptionalToken(Eu.COLON)?(e=r,t=this.parseName()):t=r,this.node(n,{kind:_u.FIELD,alias:e,name:t,arguments:this.parseArguments(!1),directives:this.parseDirectives(!1),selectionSet:this.peek(Eu.BRACE_L)?this.parseSelectionSet():void 0})}},{key:"parseArguments",value:function(e){var t=e?this.parseConstArgument:this.parseArgument;return this.optionalMany(Eu.PAREN_L,t,Eu.PAREN_R)}},{key:"parseArgument",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=this._lexer.token,n=this.parseName();return this.expectToken(Eu.COLON),this.node(t,{kind:_u.ARGUMENT,name:n,value:this.parseValueLiteral(e)})}},{key:"parseConstArgument",value:function(){return this.parseArgument(!0)}},{key:"parseFragment",value:function(){var e=this._lexer.token;this.expectToken(Eu.SPREAD);var t=this.expectOptionalKeyword("on");return!t&&this.peek(Eu.NAME)?this.node(e,{kind:_u.FRAGMENT_SPREAD,name:this.parseFragmentName(),directives:this.parseDirectives(!1)}):this.node(e,{kind:_u.INLINE_FRAGMENT,typeCondition:t?this.parseNamedType():void 0,directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet()})}},{key:"parseFragmentDefinition",value:function(){var e=this._lexer.token;return this.expectKeyword("fragment"),!0===this._options.allowLegacyFragmentVariables?this.node(e,{kind:_u.FRAGMENT_DEFINITION,name:this.parseFragmentName(),variableDefinitions:this.parseVariableDefinitions(),typeCondition:(this.expectKeyword("on"),this.parseNamedType()),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet()}):this.node(e,{kind:_u.FRAGMENT_DEFINITION,name:this.parseFragmentName(),typeCondition:(this.expectKeyword("on"),this.parseNamedType()),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet()})}},{key:"parseFragmentName",value:function(){if("on"===this._lexer.token.value)throw this.unexpected();return this.parseName()}},{key:"parseValueLiteral",value:function(e){var t=this._lexer.token;switch(t.kind){case Eu.BRACKET_L:return this.parseList(e);case Eu.BRACE_L:return this.parseObject(e);case Eu.INT:return this.advanceLexer(),this.node(t,{kind:_u.INT,value:t.value});case Eu.FLOAT:return this.advanceLexer(),this.node(t,{kind:_u.FLOAT,value:t.value});case Eu.STRING:case Eu.BLOCK_STRING:return this.parseStringLiteral();case Eu.NAME:switch(this.advanceLexer(),t.value){case"true":return this.node(t,{kind:_u.BOOLEAN,value:!0});case"false":return this.node(t,{kind:_u.BOOLEAN,value:!1});case"null":return this.node(t,{kind:_u.NULL});default:return this.node(t,{kind:_u.ENUM,value:t.value})}case Eu.DOLLAR:if(e){if(this.expectToken(Eu.DOLLAR),this._lexer.token.kind===Eu.NAME){var n=this._lexer.token.value;throw ku(this._lexer.source,t.start,'Unexpected variable "$'.concat(n,'" in constant value.'))}throw this.unexpected(t)}return this.parseVariable();default:throw this.unexpected()}}},{key:"parseConstValueLiteral",value:function(){return this.parseValueLiteral(!0)}},{key:"parseStringLiteral",value:function(){var e=this._lexer.token;return this.advanceLexer(),this.node(e,{kind:_u.STRING,value:e.value,block:e.kind===Eu.BLOCK_STRING})}},{key:"parseList",value:function(e){var t=this;return this.node(this._lexer.token,{kind:_u.LIST,values:this.any(Eu.BRACKET_L,(function(){return t.parseValueLiteral(e)}),Eu.BRACKET_R)})}},{key:"parseObject",value:function(e){var t=this;return this.node(this._lexer.token,{kind:_u.OBJECT,fields:this.any(Eu.BRACE_L,(function(){return t.parseObjectField(e)}),Eu.BRACE_R)})}},{key:"parseObjectField",value:function(e){var t=this._lexer.token,n=this.parseName();return this.expectToken(Eu.COLON),this.node(t,{kind:_u.OBJECT_FIELD,name:n,value:this.parseValueLiteral(e)})}},{key:"parseDirectives",value:function(e){for(var t=[];this.peek(Eu.AT);)t.push(this.parseDirective(e));return t}},{key:"parseConstDirectives",value:function(){return this.parseDirectives(!0)}},{key:"parseDirective",value:function(e){var t=this._lexer.token;return this.expectToken(Eu.AT),this.node(t,{kind:_u.DIRECTIVE,name:this.parseName(),arguments:this.parseArguments(e)})}},{key:"parseTypeReference",value:function(){var e,t=this._lexer.token;if(this.expectOptionalToken(Eu.BRACKET_L)){var n=this.parseTypeReference();this.expectToken(Eu.BRACKET_R),e=this.node(t,{kind:_u.LIST_TYPE,type:n})}else e=this.parseNamedType();return this.expectOptionalToken(Eu.BANG)?this.node(t,{kind:_u.NON_NULL_TYPE,type:e}):e}},{key:"parseNamedType",value:function(){return this.node(this._lexer.token,{kind:_u.NAMED_TYPE,name:this.parseName()})}},{key:"peekDescription",value:function(){return this.peek(Eu.STRING)||this.peek(Eu.BLOCK_STRING)}},{key:"parseDescription",value:function(){if(this.peekDescription())return this.parseStringLiteral()}},{key:"parseSchemaDefinition",value:function(){var e=this._lexer.token,t=this.parseDescription();this.expectKeyword("schema");var n=this.parseConstDirectives(),r=this.many(Eu.BRACE_L,this.parseOperationTypeDefinition,Eu.BRACE_R);return this.node(e,{kind:_u.SCHEMA_DEFINITION,description:t,directives:n,operationTypes:r})}},{key:"parseOperationTypeDefinition",value:function(){var e=this._lexer.token,t=this.parseOperationType();this.expectToken(Eu.COLON);var n=this.parseNamedType();return this.node(e,{kind:_u.OPERATION_TYPE_DEFINITION,operation:t,type:n})}},{key:"parseScalarTypeDefinition",value:function(){var e=this._lexer.token,t=this.parseDescription();this.expectKeyword("scalar");var n=this.parseName(),r=this.parseConstDirectives();return this.node(e,{kind:_u.SCALAR_TYPE_DEFINITION,description:t,name:n,directives:r})}},{key:"parseObjectTypeDefinition",value:function(){var e=this._lexer.token,t=this.parseDescription();this.expectKeyword("type");var n=this.parseName(),r=this.parseImplementsInterfaces(),i=this.parseConstDirectives(),a=this.parseFieldsDefinition();return this.node(e,{kind:_u.OBJECT_TYPE_DEFINITION,description:t,name:n,interfaces:r,directives:i,fields:a})}},{key:"parseImplementsInterfaces",value:function(){return this.expectOptionalKeyword("implements")?this.delimitedMany(Eu.AMP,this.parseNamedType):[]}},{key:"parseFieldsDefinition",value:function(){return this.optionalMany(Eu.BRACE_L,this.parseFieldDefinition,Eu.BRACE_R)}},{key:"parseFieldDefinition",value:function(){var e=this._lexer.token,t=this.parseDescription(),n=this.parseName(),r=this.parseArgumentDefs();this.expectToken(Eu.COLON);var i=this.parseTypeReference(),a=this.parseConstDirectives();return this.node(e,{kind:_u.FIELD_DEFINITION,description:t,name:n,arguments:r,type:i,directives:a})}},{key:"parseArgumentDefs",value:function(){return this.optionalMany(Eu.PAREN_L,this.parseInputValueDef,Eu.PAREN_R)}},{key:"parseInputValueDef",value:function(){var e=this._lexer.token,t=this.parseDescription(),n=this.parseName();this.expectToken(Eu.COLON);var r,i=this.parseTypeReference();this.expectOptionalToken(Eu.EQUALS)&&(r=this.parseConstValueLiteral());var a=this.parseConstDirectives();return this.node(e,{kind:_u.INPUT_VALUE_DEFINITION,description:t,name:n,type:i,defaultValue:r,directives:a})}},{key:"parseInterfaceTypeDefinition",value:function(){var e=this._lexer.token,t=this.parseDescription();this.expectKeyword("interface");var n=this.parseName(),r=this.parseImplementsInterfaces(),i=this.parseConstDirectives(),a=this.parseFieldsDefinition();return this.node(e,{kind:_u.INTERFACE_TYPE_DEFINITION,description:t,name:n,interfaces:r,directives:i,fields:a})}},{key:"parseUnionTypeDefinition",value:function(){var e=this._lexer.token,t=this.parseDescription();this.expectKeyword("union");var n=this.parseName(),r=this.parseConstDirectives(),i=this.parseUnionMemberTypes();return this.node(e,{kind:_u.UNION_TYPE_DEFINITION,description:t,name:n,directives:r,types:i})}},{key:"parseUnionMemberTypes",value:function(){return this.expectOptionalToken(Eu.EQUALS)?this.delimitedMany(Eu.PIPE,this.parseNamedType):[]}},{key:"parseEnumTypeDefinition",value:function(){var e=this._lexer.token,t=this.parseDescription();this.expectKeyword("enum");var n=this.parseName(),r=this.parseConstDirectives(),i=this.parseEnumValuesDefinition();return this.node(e,{kind:_u.ENUM_TYPE_DEFINITION,description:t,name:n,directives:r,values:i})}},{key:"parseEnumValuesDefinition",value:function(){return this.optionalMany(Eu.BRACE_L,this.parseEnumValueDefinition,Eu.BRACE_R)}},{key:"parseEnumValueDefinition",value:function(){var e=this._lexer.token,t=this.parseDescription(),n=this.parseEnumValueName(),r=this.parseConstDirectives();return this.node(e,{kind:_u.ENUM_VALUE_DEFINITION,description:t,name:n,directives:r})}},{key:"parseEnumValueName",value:function(){if("true"===this._lexer.token.value||"false"===this._lexer.token.value||"null"===this._lexer.token.value)throw ku(this._lexer.source,this._lexer.token.start,"".concat(fl(this._lexer.token)," is reserved and cannot be used for an enum value."));return this.parseName()}},{key:"parseInputObjectTypeDefinition",value:function(){var e=this._lexer.token,t=this.parseDescription();this.expectKeyword("input");var n=this.parseName(),r=this.parseConstDirectives(),i=this.parseInputFieldsDefinition();return this.node(e,{kind:_u.INPUT_OBJECT_TYPE_DEFINITION,description:t,name:n,directives:r,fields:i})}},{key:"parseInputFieldsDefinition",value:function(){return this.optionalMany(Eu.BRACE_L,this.parseInputValueDef,Eu.BRACE_R)}},{key:"parseTypeSystemExtension",value:function(){var e=this._lexer.lookahead();if(e.kind===Eu.NAME)switch(e.value){case"schema":return this.parseSchemaExtension();case"scalar":return this.parseScalarTypeExtension();case"type":return this.parseObjectTypeExtension();case"interface":return this.parseInterfaceTypeExtension();case"union":return this.parseUnionTypeExtension();case"enum":return this.parseEnumTypeExtension();case"input":return this.parseInputObjectTypeExtension()}throw this.unexpected(e)}},{key:"parseSchemaExtension",value:function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("schema");var t=this.parseConstDirectives(),n=this.optionalMany(Eu.BRACE_L,this.parseOperationTypeDefinition,Eu.BRACE_R);if(0===t.length&&0===n.length)throw this.unexpected();return this.node(e,{kind:_u.SCHEMA_EXTENSION,directives:t,operationTypes:n})}},{key:"parseScalarTypeExtension",value:function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("scalar");var t=this.parseName(),n=this.parseConstDirectives();if(0===n.length)throw this.unexpected();return this.node(e,{kind:_u.SCALAR_TYPE_EXTENSION,name:t,directives:n})}},{key:"parseObjectTypeExtension",value:function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("type");var t=this.parseName(),n=this.parseImplementsInterfaces(),r=this.parseConstDirectives(),i=this.parseFieldsDefinition();if(0===n.length&&0===r.length&&0===i.length)throw this.unexpected();return this.node(e,{kind:_u.OBJECT_TYPE_EXTENSION,name:t,interfaces:n,directives:r,fields:i})}},{key:"parseInterfaceTypeExtension",value:function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("interface");var t=this.parseName(),n=this.parseImplementsInterfaces(),r=this.parseConstDirectives(),i=this.parseFieldsDefinition();if(0===n.length&&0===r.length&&0===i.length)throw this.unexpected();return this.node(e,{kind:_u.INTERFACE_TYPE_EXTENSION,name:t,interfaces:n,directives:r,fields:i})}},{key:"parseUnionTypeExtension",value:function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("union");var t=this.parseName(),n=this.parseConstDirectives(),r=this.parseUnionMemberTypes();if(0===n.length&&0===r.length)throw this.unexpected();return this.node(e,{kind:_u.UNION_TYPE_EXTENSION,name:t,directives:n,types:r})}},{key:"parseEnumTypeExtension",value:function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("enum");var t=this.parseName(),n=this.parseConstDirectives(),r=this.parseEnumValuesDefinition();if(0===n.length&&0===r.length)throw this.unexpected();return this.node(e,{kind:_u.ENUM_TYPE_EXTENSION,name:t,directives:n,values:r})}},{key:"parseInputObjectTypeExtension",value:function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("input");var t=this.parseName(),n=this.parseConstDirectives(),r=this.parseInputFieldsDefinition();if(0===n.length&&0===r.length)throw this.unexpected();return this.node(e,{kind:_u.INPUT_OBJECT_TYPE_EXTENSION,name:t,directives:n,fields:r})}},{key:"parseDirectiveDefinition",value:function(){var e=this._lexer.token,t=this.parseDescription();this.expectKeyword("directive"),this.expectToken(Eu.AT);var n=this.parseName(),r=this.parseArgumentDefs(),i=this.expectOptionalKeyword("repeatable");this.expectKeyword("on");var a=this.parseDirectiveLocations();return this.node(e,{kind:_u.DIRECTIVE_DEFINITION,description:t,name:n,arguments:r,repeatable:i,locations:a})}},{key:"parseDirectiveLocations",value:function(){return this.delimitedMany(Eu.PIPE,this.parseDirectiveLocation)}},{key:"parseDirectiveLocation",value:function(){var e=this._lexer.token,t=this.parseName();if(Object.prototype.hasOwnProperty.call(Tu,t.value))return t;throw this.unexpected(e)}},{key:"node",value:function(e,t){return!0!==this._options.noLocation&&(t.loc=new Su(e,this._lexer.lastToken,this._lexer.source)),t}},{key:"peek",value:function(e){return this._lexer.token.kind===e}},{key:"expectToken",value:function(e){var t=this._lexer.token;if(t.kind===e)return this.advanceLexer(),t;throw ku(this._lexer.source,t.start,"Expected ".concat(dl(e),", found ").concat(fl(t),"."))}},{key:"expectOptionalToken",value:function(e){return this._lexer.token.kind===e&&(this.advanceLexer(),!0)}},{key:"expectKeyword",value:function(e){var t=this._lexer.token;if(t.kind!==Eu.NAME||t.value!==e)throw ku(this._lexer.source,t.start,'Expected "'.concat(e,'", found ').concat(fl(t),"."));this.advanceLexer()}},{key:"expectOptionalKeyword",value:function(e){var t=this._lexer.token;return t.kind===Eu.NAME&&t.value===e&&(this.advanceLexer(),!0)}},{key:"unexpected",value:function(e){var t=null!=e?e:this._lexer.token;return ku(this._lexer.source,t.start,"Unexpected ".concat(fl(t),"."))}},{key:"any",value:function(e,t,n){this.expectToken(e);for(var r=[];!this.expectOptionalToken(n);)r.push(t.call(this));return r}},{key:"optionalMany",value:function(e,t,n){if(this.expectOptionalToken(e)){var r=[];do{r.push(t.call(this))}while(!this.expectOptionalToken(n));return r}return[]}},{key:"many",value:function(e,t,n){this.expectToken(e);var r=[];do{r.push(t.call(this))}while(!this.expectOptionalToken(n));return r}},{key:"delimitedMany",value:function(e,t){this.expectOptionalToken(e);var n=[];do{n.push(t.call(this))}while(this.expectOptionalToken(e));return n}},{key:"advanceLexer",value:function(){var e=this._options.maxTokens,t=this._lexer.advance();if(void 0!==e&&t.kind!==Eu.EOF&&(++this._tokenCounter,this._tokenCounter>e))throw ku(this._lexer.source,t.start,"Document contains more that ".concat(e," tokens. Parsing aborted."))}}]),e}();function fl(e){var t=e.value;return dl(e.kind)+(null!=t?' "'.concat(t,'"'):"")}function dl(e){return function(e){return e===Eu.BANG||e===Eu.DOLLAR||e===Eu.AMP||e===Eu.PAREN_L||e===Eu.PAREN_R||e===Eu.SPREAD||e===Eu.COLON||e===Eu.EQUALS||e===Eu.AT||e===Eu.BRACKET_L||e===Eu.BRACKET_R||e===Eu.BRACE_L||e===Eu.PIPE||e===Eu.BRACE_R}(e)?'"'.concat(e,'"'):e}function pl(e){return e}function hl(e,t){var n,r=Object.create(null),i=D(e);try{for(i.s();!(n=i.n()).done;){var a=n.value;r[t(a)]=a}}catch(e){i.e(e)}finally{i.f()}return r}function ml(e,t,n){var r,i=Object.create(null),a=D(e);try{for(a.s();!(r=a.n()).done;){var o=r.value;i[t(o)]=n(o)}}catch(e){a.e(e)}finally{a.f()}return i}function vl(e,t){for(var n=Object.create(null),r=0,i=Object.keys(e);r<i.length;r++){var a=i[r];n[a]=t(e[a],a)}return n}var yl=48;function gl(e){return!isNaN(e)&&yl<=e&&e<=57}function xl(e,t){var n,r=Object.create(null),i=new bl(e),a=Math.floor(.4*e.length)+1,o=D(t);try{for(o.s();!(n=o.n()).done;){var s=n.value,u=i.measure(s,a);void 0!==u&&(r[s]=u)}}catch(e){o.e(e)}finally{o.f()}return Object.keys(r).sort((function(e,t){var n=r[e]-r[t];return 0!==n?n:function(e,t){for(var n=0,r=0;n<e.length&&r<t.length;){var i=e.charCodeAt(n),a=t.charCodeAt(r);if(gl(i)&&gl(a)){var o=0;do{++n,o=10*o+i-yl,i=e.charCodeAt(n)}while(gl(i)&&o>0);var s=0;do{++r,s=10*s+a-yl,a=t.charCodeAt(r)}while(gl(a)&&s>0);if(o<s)return-1;if(o>s)return 1}else{if(i<a)return-1;if(i>a)return 1;++n,++r}}return e.length-t.length}(e,t)}))}var bl=function(){function e(t){y(this,e),this._input=t,this._inputLowerCase=t.toLowerCase(),this._inputArray=wl(this._inputLowerCase),this._rows=[new Array(t.length+1).fill(0),new Array(t.length+1).fill(0),new Array(t.length+1).fill(0)]}return x(e,[{key:"measure",value:function(e,t){if(this._input===e)return 0;var n=e.toLowerCase();if(this._inputLowerCase===n)return 1;var r=wl(n),i=this._inputArray;if(r.length<i.length){var a=r;r=i,i=a}var o=r.length,s=i.length;if(!(o-s>t)){for(var u=this._rows,l=0;l<=s;l++)u[0][l]=l;for(var c=1;c<=o;c++){for(var f=u[(c-1)%3],d=u[c%3],p=d[0]=c,h=1;h<=s;h++){var m=r[c-1]===i[h-1]?0:1,v=Math.min(f[h]+1,d[h-1]+1,f[h-1]+m);if(c>1&&h>1&&r[c-1]===i[h-2]&&r[c-2]===i[h-1]){var y=u[(c-2)%3][h-2];v=Math.min(v,y+1)}v<p&&(p=v),d[h]=v}if(p>t)return}var g=u[o%3][s];return g<=t?g:void 0}}}]),e}();function wl(e){for(var t=e.length,n=new Array(t),r=0;r<t;++r)n[r]=e.charCodeAt(r);return n}function kl(e){if(null==e)return Object.create(null);if(null===Object.getPrototypeOf(e))return e;for(var t=Object.create(null),n=0,r=Object.entries(e);n<r.length;n++){var i=I(r[n],2),a=i[0],o=i[1];t[a]=o}return t}var Nl=/[\x00-\x1f\x22\x5c\x7f-\x9f]/g;function Tl(e){return _l[e.charCodeAt(0)]}var _l=["\\u0000","\\u0001","\\u0002","\\u0003","\\u0004","\\u0005","\\u0006","\\u0007","\\b","\\t","\\n","\\u000B","\\f","\\r","\\u000E","\\u000F","\\u0010","\\u0011","\\u0012","\\u0013","\\u0014","\\u0015","\\u0016","\\u0017","\\u0018","\\u0019","\\u001A","\\u001B","\\u001C","\\u001D","\\u001E","\\u001F","","",'\\"',"","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","\\\\","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","\\u007F","\\u0080","\\u0081","\\u0082","\\u0083","\\u0084","\\u0085","\\u0086","\\u0087","\\u0088","\\u0089","\\u008A","\\u008B","\\u008C","\\u008D","\\u008E","\\u008F","\\u0090","\\u0091","\\u0092","\\u0093","\\u0094","\\u0095","\\u0096","\\u0097","\\u0098","\\u0099","\\u009A","\\u009B","\\u009C","\\u009D","\\u009E","\\u009F"],El=Object.freeze({});function Sl(e,t){for(var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Au,r=new Map,i=0,a=Object.values(_u);i<a.length;i++){var o=a[i];r.set(o,Ll(t,o))}var s=void 0,u=Array.isArray(e),l=[e],c=-1,f=[],d=e,p=void 0,h=void 0,m=[],v=[];do{var y=++c===l.length,g=y&&0!==f.length;if(y){if(p=0===v.length?void 0:m[m.length-1],d=h,h=v.pop(),g)if(u){d=d.slice();var x,b=0,w=D(f);try{for(w.s();!(x=w.n()).done;){var k=I(x.value,2),N=k[0],T=k[1],_=N-b;null===T?(d.splice(_,1),b++):d[_]=T}}catch(e){w.e(e)}finally{w.f()}}else{d=Object.defineProperties({},Object.getOwnPropertyDescriptors(d));var E,S=D(f);try{for(S.s();!(E=S.n()).done;){var L=I(E.value,2),A=L[0],O=L[1];d[A]=O}}catch(e){S.e(e)}finally{S.f()}}c=s.index,l=s.keys,f=s.edits,u=s.inArray,s=s.prev}else if(h){if(null==(d=h[p=u?c:l[c]]))continue;m.push(p)}var C,R=void 0;if(!Array.isArray(d)){var j,M;Iu(d)||fu(!1,"Invalid AST Node: ".concat(il(d),"."));var F=y?null===(j=r.get(d.kind))||void 0===j?void 0:j.leave:null===(M=r.get(d.kind))||void 0===M?void 0:M.enter;if((R=null==F?void 0:F.call(t,d,p,h,m,v))===El)break;if(!1===R){if(!y){m.pop();continue}}else if(void 0!==R&&(f.push([p,R]),!y)){if(!Iu(R)){m.pop();continue}d=R}}if(void 0===R&&g&&f.push([p,d]),y)m.pop();else s={inArray:u,index:c,keys:l,edits:f,prev:s},l=(u=Array.isArray(d))?d:null!==(C=n[d.kind])&&void 0!==C?C:[],c=-1,f=[],h&&v.push(h),h=d}while(void 0!==s);return 0!==f.length?f[f.length-1][1]:e}function Ll(e,t){var n=e[t];return"object"===h(n)?n:"function"==typeof n?{enter:n,leave:void 0}:{enter:e.enter,leave:e.leave}}function Al(e){return Sl(e,Ol)}var Ol={Name:{leave:function(e){return e.value}},Variable:{leave:function(e){return"$"+e.name}},Document:{leave:function(e){return Il(e.definitions,"\n\n")}},OperationDefinition:{leave:function(e){var t=Rl("(",Il(e.variableDefinitions,", "),")"),n=Il([e.operation,Il([e.name,t]),Il(e.directives," ")]," ");return("query"===n?"":n+" ")+e.selectionSet}},VariableDefinition:{leave:function(e){var t=e.variable,n=e.type,r=e.defaultValue,i=e.directives;return t+": "+n+Rl(" = ",r)+Rl(" ",Il(i," "))}},SelectionSet:{leave:function(e){return Cl(e.selections)}},Field:{leave:function(e){var t=e.alias,n=e.name,r=e.arguments,i=e.directives,a=e.selectionSet,o=Rl("",t,": ")+n,s=o+Rl("(",Il(r,", "),")");return s.length>80&&(s=o+Rl("(\n",jl(Il(r,"\n")),"\n)")),Il([s,Il(i," "),a]," ")}},Argument:{leave:function(e){return e.name+": "+e.value}},FragmentSpread:{leave:function(e){return"..."+e.name+Rl(" ",Il(e.directives," "))}},InlineFragment:{leave:function(e){var t=e.typeCondition,n=e.directives,r=e.selectionSet;return Il(["...",Rl("on ",t),Il(n," "),r]," ")}},FragmentDefinition:{leave:function(e){var t=e.name,n=e.typeCondition,r=e.variableDefinitions,i=e.directives,a=e.selectionSet;return"fragment ".concat(t).concat(Rl("(",Il(r,", "),")")," ")+"on ".concat(n," ").concat(Rl("",Il(i," ")," "))+a}},IntValue:{leave:function(e){return e.value}},FloatValue:{leave:function(e){return e.value}},StringValue:{leave:function(e){var t=e.value;return e.block?function(e,t){var n=e.replace(/"""/g,'\\"""'),r=n.split(/\r\n|[\n\r]/g),i=1===r.length,a=r.length>1&&r.slice(1).every((function(e){return 0===e.length||Cu(e.charCodeAt(0))})),o=n.endsWith('\\"""'),s=e.endsWith('"')&&!o,u=e.endsWith("\\"),l=s||u,c=!(null!=t&&t.minimize)&&(!i||e.length>70||l||a||o),f="",d=i&&Cu(e.charCodeAt(0));return(c&&!d||a)&&(f+="\n"),f+=n,(c||l)&&(f+="\n"),'"""'+f+'"""'}(t):'"'.concat(t.replace(Nl,Tl),'"')}},BooleanValue:{leave:function(e){return e.value?"true":"false"}},NullValue:{leave:function(){return"null"}},EnumValue:{leave:function(e){return e.value}},ListValue:{leave:function(e){return"["+Il(e.values,", ")+"]"}},ObjectValue:{leave:function(e){return"{"+Il(e.fields,", ")+"}"}},ObjectField:{leave:function(e){return e.name+": "+e.value}},Directive:{leave:function(e){return"@"+e.name+Rl("(",Il(e.arguments,", "),")")}},NamedType:{leave:function(e){return e.name}},ListType:{leave:function(e){return"["+e.type+"]"}},NonNullType:{leave:function(e){return e.type+"!"}},SchemaDefinition:{leave:function(e){var t=e.description,n=e.directives,r=e.operationTypes;return Rl("",t,"\n")+Il(["schema",Il(n," "),Cl(r)]," ")}},OperationTypeDefinition:{leave:function(e){return e.operation+": "+e.type}},ScalarTypeDefinition:{leave:function(e){var t=e.description,n=e.name,r=e.directives;return Rl("",t,"\n")+Il(["scalar",n,Il(r," ")]," ")}},ObjectTypeDefinition:{leave:function(e){var t=e.description,n=e.name,r=e.interfaces,i=e.directives,a=e.fields;return Rl("",t,"\n")+Il(["type",n,Rl("implements ",Il(r," & ")),Il(i," "),Cl(a)]," ")}},FieldDefinition:{leave:function(e){var t=e.description,n=e.name,r=e.arguments,i=e.type,a=e.directives;return Rl("",t,"\n")+n+(Dl(r)?Rl("(\n",jl(Il(r,"\n")),"\n)"):Rl("(",Il(r,", "),")"))+": "+i+Rl(" ",Il(a," "))}},InputValueDefinition:{leave:function(e){var t=e.description,n=e.name,r=e.type,i=e.defaultValue,a=e.directives;return Rl("",t,"\n")+Il([n+": "+r,Rl("= ",i),Il(a," ")]," ")}},InterfaceTypeDefinition:{leave:function(e){var t=e.description,n=e.name,r=e.interfaces,i=e.directives,a=e.fields;return Rl("",t,"\n")+Il(["interface",n,Rl("implements ",Il(r," & ")),Il(i," "),Cl(a)]," ")}},UnionTypeDefinition:{leave:function(e){var t=e.description,n=e.name,r=e.directives,i=e.types;return Rl("",t,"\n")+Il(["union",n,Il(r," "),Rl("= ",Il(i," | "))]," ")}},EnumTypeDefinition:{leave:function(e){var t=e.description,n=e.name,r=e.directives,i=e.values;return Rl("",t,"\n")+Il(["enum",n,Il(r," "),Cl(i)]," ")}},EnumValueDefinition:{leave:function(e){var t=e.description,n=e.name,r=e.directives;return Rl("",t,"\n")+Il([n,Il(r," ")]," ")}},InputObjectTypeDefinition:{leave:function(e){var t=e.description,n=e.name,r=e.directives,i=e.fields;return Rl("",t,"\n")+Il(["input",n,Il(r," "),Cl(i)]," ")}},DirectiveDefinition:{leave:function(e){var t=e.description,n=e.name,r=e.arguments,i=e.repeatable,a=e.locations;return Rl("",t,"\n")+"directive @"+n+(Dl(r)?Rl("(\n",jl(Il(r,"\n")),"\n)"):Rl("(",Il(r,", "),")"))+(i?" repeatable":"")+" on "+Il(a," | ")}},SchemaExtension:{leave:function(e){var t=e.directives,n=e.operationTypes;return Il(["extend schema",Il(t," "),Cl(n)]," ")}},ScalarTypeExtension:{leave:function(e){return Il(["extend scalar",e.name,Il(e.directives," ")]," ")}},ObjectTypeExtension:{leave:function(e){var t=e.name,n=e.interfaces,r=e.directives,i=e.fields;return Il(["extend type",t,Rl("implements ",Il(n," & ")),Il(r," "),Cl(i)]," ")}},InterfaceTypeExtension:{leave:function(e){var t=e.name,n=e.interfaces,r=e.directives,i=e.fields;return Il(["extend interface",t,Rl("implements ",Il(n," & ")),Il(r," "),Cl(i)]," ")}},UnionTypeExtension:{leave:function(e){var t=e.name,n=e.directives,r=e.types;return Il(["extend union",t,Il(n," "),Rl("= ",Il(r," | "))]," ")}},EnumTypeExtension:{leave:function(e){var t=e.name,n=e.directives,r=e.values;return Il(["extend enum",t,Il(n," "),Cl(r)]," ")}},InputObjectTypeExtension:{leave:function(e){var t=e.name,n=e.directives,r=e.fields;return Il(["extend input",t,Il(n," "),Cl(r)]," ")}}};function Il(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return null!==(t=null==e?void 0:e.filter((function(e){return e})).join(n))&&void 0!==t?t:""}function Cl(e){return Rl("{\n",jl(Il(e,"\n")),"\n}")}function Rl(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";return null!=t&&""!==t?e+t+n:""}function jl(e){return Rl("  ",e.replace(/\n/g,"\n  "))}function Dl(e){var t;return null!==(t=null==e?void 0:e.some((function(e){return e.includes("\n")})))&&void 0!==t&&t}function Ml(e,t){switch(e.kind){case _u.NULL:return null;case _u.INT:return parseInt(e.value,10);case _u.FLOAT:return parseFloat(e.value);case _u.STRING:case _u.ENUM:case _u.BOOLEAN:return e.value;case _u.LIST:return e.values.map((function(e){return Ml(e,t)}));case _u.OBJECT:return ml(e.fields,(function(e){return e.name.value}),(function(e){return Ml(e.value,t)}));case _u.VARIABLE:return null==t?void 0:t[e.name.value]}}function Fl(e){if(null!=e||fu(!1,"Must provide name."),"string"==typeof e||fu(!1,"Expected name to be a string."),0===e.length)throw new bu("Expected name to be a non-empty string.");for(var t=1;t<e.length;++t)if(!Mu(e.charCodeAt(t)))throw new bu('Names must only contain [_a-zA-Z0-9] but "'.concat(e,'" does not.'));if(!Du(e.charCodeAt(0)))throw new bu('Names must start with [_a-zA-Z] but "'.concat(e,'" does not.'));return e}function Pl(e){if("true"===e||"false"===e||"null"===e)throw new bu("Enum values cannot be named: ".concat(e));return Fl(e)}function Ul(e){return Vl(e)||Bl(e)||zl(e)||ql(e)||Jl(e)||Gl(e)||$l(e)||Wl(e)}function Vl(e){return ol(e,ac)}function Bl(e){return ol(e,oc)}function zl(e){return ol(e,pc)}function ql(e){return ol(e,hc)}function Jl(e){return ol(e,vc)}function Gl(e){return ol(e,gc)}function $l(e){return ol(e,Xl)}function Wl(e){return ol(e,Zl)}function Hl(e){return Vl(e)||Jl(e)||Gl(e)||ec(e)&&Hl(e.ofType)}function Kl(e){return Vl(e)||Bl(e)||zl(e)||ql(e)||Jl(e)||ec(e)&&Kl(e.ofType)}function Ql(e){return Vl(e)||Jl(e)}function Yl(e){return Bl(e)||zl(e)||ql(e)}var Xl=function(e){function t(e){y(this,t),Ul(e)||fu(!1,"Expected ".concat(il(e)," to be a GraphQL type.")),this.ofType=e}return x(t,[{key:Symbol.toStringTag,get:function(){return"GraphQLList"}},{key:"toString",value:function(){return"["+String(this.ofType)+"]"}},{key:"toJSON",value:function(){return this.toString()}}]),t}(),Zl=function(e){function t(e){y(this,t),tc(e)||fu(!1,"Expected ".concat(il(e)," to be a GraphQL nullable type.")),this.ofType=e}return x(t,[{key:Symbol.toStringTag,get:function(){return"GraphQLNonNull"}},{key:"toString",value:function(){return String(this.ofType)+"!"}},{key:"toJSON",value:function(){return this.toString()}}]),t}();function ec(e){return $l(e)||Wl(e)}function tc(e){return Ul(e)&&!Wl(e)}function nc(e){if(e){for(var t=e;ec(t);)t=t.ofType;return t}}function rc(e){return"function"==typeof e?e():e}function ic(e){return"function"==typeof e?e():e}var ac=function(e){function t(e){var n,r,i,a;y(this,t);var o=null!==(n=e.parseValue)&&void 0!==n?n:pl;this.name=Fl(e.name),this.description=e.description,this.specifiedByURL=e.specifiedByURL,this.serialize=null!==(r=e.serialize)&&void 0!==r?r:pl,this.parseValue=o,this.parseLiteral=null!==(i=e.parseLiteral)&&void 0!==i?i:function(e,t){return o(Ml(e,t))},this.extensions=kl(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(a=e.extensionASTNodes)&&void 0!==a?a:[],null==e.specifiedByURL||"string"==typeof e.specifiedByURL||fu(!1,"".concat(this.name,' must provide "specifiedByURL" as a string, ')+"but got: ".concat(il(e.specifiedByURL),".")),null==e.serialize||"function"==typeof e.serialize||fu(!1,"".concat(this.name,' must provide "serialize" function. If this custom Scalar is also used as an input type, ensure "parseValue" and "parseLiteral" functions are also provided.')),e.parseLiteral&&("function"==typeof e.parseValue&&"function"==typeof e.parseLiteral||fu(!1,"".concat(this.name,' must provide both "parseValue" and "parseLiteral" functions.')))}return x(t,[{key:Symbol.toStringTag,get:function(){return"GraphQLScalarType"}},{key:"toConfig",value:function(){return{name:this.name,description:this.description,specifiedByURL:this.specifiedByURL,serialize:this.serialize,parseValue:this.parseValue,parseLiteral:this.parseLiteral,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}},{key:"toString",value:function(){return this.name}},{key:"toJSON",value:function(){return this.toString()}}]),t}(),oc=function(e){function t(e){var n;y(this,t),this.name=Fl(e.name),this.description=e.description,this.isTypeOf=e.isTypeOf,this.extensions=kl(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(n=e.extensionASTNodes)&&void 0!==n?n:[],this._fields=function(){return uc(e)},this._interfaces=function(){return sc(e)},null==e.isTypeOf||"function"==typeof e.isTypeOf||fu(!1,"".concat(this.name,' must provide "isTypeOf" as a function, ')+"but got: ".concat(il(e.isTypeOf),"."))}return x(t,[{key:Symbol.toStringTag,get:function(){return"GraphQLObjectType"}},{key:"getFields",value:function(){return"function"==typeof this._fields&&(this._fields=this._fields()),this._fields}},{key:"getInterfaces",value:function(){return"function"==typeof this._interfaces&&(this._interfaces=this._interfaces()),this._interfaces}},{key:"toConfig",value:function(){return{name:this.name,description:this.description,interfaces:this.getInterfaces(),fields:fc(this.getFields()),isTypeOf:this.isTypeOf,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}},{key:"toString",value:function(){return this.name}},{key:"toJSON",value:function(){return this.toString()}}]),t}();function sc(e){var t,n=rc(null!==(t=e.interfaces)&&void 0!==t?t:[]);return Array.isArray(n)||fu(!1,"".concat(e.name," interfaces must be an Array or a function which returns an Array.")),n}function uc(e){var t=ic(e.fields);return cc(t)||fu(!1,"".concat(e.name," fields must be an object with field names as keys or a function which returns such an object.")),vl(t,(function(t,n){var r;cc(t)||fu(!1,"".concat(e.name,".").concat(n," field config must be an object.")),null==t.resolve||"function"==typeof t.resolve||fu(!1,"".concat(e.name,".").concat(n," field resolver must be a function if ")+"provided, but got: ".concat(il(t.resolve),"."));var i=null!==(r=t.args)&&void 0!==r?r:{};return cc(i)||fu(!1,"".concat(e.name,".").concat(n," args must be an object with argument names as keys.")),{name:Fl(n),description:t.description,type:t.type,args:lc(i),resolve:t.resolve,subscribe:t.subscribe,deprecationReason:t.deprecationReason,extensions:kl(t.extensions),astNode:t.astNode}}))}function lc(e){return Object.entries(e).map((function(e){var t=I(e,2),n=t[0],r=t[1];return{name:Fl(n),description:r.description,type:r.type,defaultValue:r.defaultValue,deprecationReason:r.deprecationReason,extensions:kl(r.extensions),astNode:r.astNode}}))}function cc(e){return du(e)&&!Array.isArray(e)}function fc(e){return vl(e,(function(e){return{description:e.description,type:e.type,args:dc(e.args),resolve:e.resolve,subscribe:e.subscribe,deprecationReason:e.deprecationReason,extensions:e.extensions,astNode:e.astNode}}))}function dc(e){return ml(e,(function(e){return e.name}),(function(e){return{description:e.description,type:e.type,defaultValue:e.defaultValue,deprecationReason:e.deprecationReason,extensions:e.extensions,astNode:e.astNode}}))}var pc=function(e){function t(e){var n;y(this,t),this.name=Fl(e.name),this.description=e.description,this.resolveType=e.resolveType,this.extensions=kl(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(n=e.extensionASTNodes)&&void 0!==n?n:[],this._fields=uc.bind(void 0,e),this._interfaces=sc.bind(void 0,e),null==e.resolveType||"function"==typeof e.resolveType||fu(!1,"".concat(this.name,' must provide "resolveType" as a function, ')+"but got: ".concat(il(e.resolveType),"."))}return x(t,[{key:Symbol.toStringTag,get:function(){return"GraphQLInterfaceType"}},{key:"getFields",value:function(){return"function"==typeof this._fields&&(this._fields=this._fields()),this._fields}},{key:"getInterfaces",value:function(){return"function"==typeof this._interfaces&&(this._interfaces=this._interfaces()),this._interfaces}},{key:"toConfig",value:function(){return{name:this.name,description:this.description,interfaces:this.getInterfaces(),fields:fc(this.getFields()),resolveType:this.resolveType,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}},{key:"toString",value:function(){return this.name}},{key:"toJSON",value:function(){return this.toString()}}]),t}(),hc=function(e){function t(e){var n;y(this,t),this.name=Fl(e.name),this.description=e.description,this.resolveType=e.resolveType,this.extensions=kl(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(n=e.extensionASTNodes)&&void 0!==n?n:[],this._types=mc.bind(void 0,e),null==e.resolveType||"function"==typeof e.resolveType||fu(!1,"".concat(this.name,' must provide "resolveType" as a function, ')+"but got: ".concat(il(e.resolveType),"."))}return x(t,[{key:Symbol.toStringTag,get:function(){return"GraphQLUnionType"}},{key:"getTypes",value:function(){return"function"==typeof this._types&&(this._types=this._types()),this._types}},{key:"toConfig",value:function(){return{name:this.name,description:this.description,types:this.getTypes(),resolveType:this.resolveType,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}},{key:"toString",value:function(){return this.name}},{key:"toJSON",value:function(){return this.toString()}}]),t}();function mc(e){var t=rc(e.types);return Array.isArray(t)||fu(!1,"Must provide Array of types or a function which returns such an array for Union ".concat(e.name,".")),t}var vc=function(e){function t(e){var n,r,i;y(this,t),this.name=Fl(e.name),this.description=e.description,this.extensions=kl(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(n=e.extensionASTNodes)&&void 0!==n?n:[],this._values=(r=this.name,cc(i=e.values)||fu(!1,"".concat(r," values must be an object with value names as keys.")),Object.entries(i).map((function(e){var t=I(e,2),n=t[0],i=t[1];return cc(i)||fu(!1,"".concat(r,".").concat(n,' must refer to an object with a "value" key ')+"representing an internal value but got: ".concat(il(i),".")),{name:Pl(n),description:i.description,value:void 0!==i.value?i.value:n,deprecationReason:i.deprecationReason,extensions:kl(i.extensions),astNode:i.astNode}}))),this._valueLookup=new Map(this._values.map((function(e){return[e.value,e]}))),this._nameLookup=hl(this._values,(function(e){return e.name}))}return x(t,[{key:Symbol.toStringTag,get:function(){return"GraphQLEnumType"}},{key:"getValues",value:function(){return this._values}},{key:"getValue",value:function(e){return this._nameLookup[e]}},{key:"serialize",value:function(e){var t=this._valueLookup.get(e);if(void 0===t)throw new bu('Enum "'.concat(this.name,'" cannot represent value: ').concat(il(e)));return t.name}},{key:"parseValue",value:function(e){if("string"!=typeof e){var t=il(e);throw new bu('Enum "'.concat(this.name,'" cannot represent non-string value: ').concat(t,".")+yc(this,t))}var n=this.getValue(e);if(null==n)throw new bu('Value "'.concat(e,'" does not exist in "').concat(this.name,'" enum.')+yc(this,e));return n.value}},{key:"parseLiteral",value:function(e,t){if(e.kind!==_u.ENUM){var n=Al(e);throw new bu('Enum "'.concat(this.name,'" cannot represent non-enum value: ').concat(n,".")+yc(this,n),{nodes:e})}var r=this.getValue(e.value);if(null==r){var i=Al(e);throw new bu('Value "'.concat(i,'" does not exist in "').concat(this.name,'" enum.')+yc(this,i),{nodes:e})}return r.value}},{key:"toConfig",value:function(){var e=ml(this.getValues(),(function(e){return e.name}),(function(e){return{description:e.description,value:e.value,deprecationReason:e.deprecationReason,extensions:e.extensions,astNode:e.astNode}}));return{name:this.name,description:this.description,values:e,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}},{key:"toString",value:function(){return this.name}},{key:"toJSON",value:function(){return this.toString()}}]),t}();function yc(e,t){return function(e,t){var n=I(t?[e,t]:[void 0,e],2),r=n[0],i=" Did you mean ";r&&(i+=r+" ");var a=n[1].map((function(e){return'"'.concat(e,'"')}));switch(a.length){case 0:return"";case 1:return i+a[0]+"?";case 2:return i+a[0]+" or "+a[1]+"?"}var o=a.slice(0,5),s=o.pop();return i+o.join(", ")+", or "+s+"?"}("the enum value",xl(t,e.getValues().map((function(e){return e.name}))))}var gc=function(e){function t(e){var n;y(this,t),this.name=Fl(e.name),this.description=e.description,this.extensions=kl(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(n=e.extensionASTNodes)&&void 0!==n?n:[],this._fields=xc.bind(void 0,e)}return x(t,[{key:Symbol.toStringTag,get:function(){return"GraphQLInputObjectType"}},{key:"getFields",value:function(){return"function"==typeof this._fields&&(this._fields=this._fields()),this._fields}},{key:"toConfig",value:function(){var e=vl(this.getFields(),(function(e){return{description:e.description,type:e.type,defaultValue:e.defaultValue,deprecationReason:e.deprecationReason,extensions:e.extensions,astNode:e.astNode}}));return{name:this.name,description:this.description,fields:e,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}},{key:"toString",value:function(){return this.name}},{key:"toJSON",value:function(){return this.toString()}}]),t}();function xc(e){var t=ic(e.fields);return cc(t)||fu(!1,"".concat(e.name," fields must be an object with field names as keys or a function which returns such an object.")),vl(t,(function(t,n){return!("resolve"in t)||fu(!1,"".concat(e.name,".").concat(n," field has a resolve property, but Input Types cannot define resolvers.")),{name:Fl(n),description:t.description,type:t.type,defaultValue:t.defaultValue,deprecationReason:t.deprecationReason,extensions:kl(t.extensions),astNode:t.astNode}}))}var bc=2147483647,wc=-2147483648,kc=new ac({name:"Int",description:"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.",serialize:function(e){var t=Lc(e);if("boolean"==typeof t)return t?1:0;var n=t;if("string"==typeof t&&""!==t&&(n=Number(t)),"number"!=typeof n||!Number.isInteger(n))throw new bu("Int cannot represent non-integer value: ".concat(il(t)));if(n>bc||n<wc)throw new bu("Int cannot represent non 32-bit signed integer value: "+il(t));return n},parseValue:function(e){if("number"!=typeof e||!Number.isInteger(e))throw new bu("Int cannot represent non-integer value: ".concat(il(e)));if(e>bc||e<wc)throw new bu("Int cannot represent non 32-bit signed integer value: ".concat(e));return e},parseLiteral:function(e){if(e.kind!==_u.INT)throw new bu("Int cannot represent non-integer value: ".concat(Al(e)),{nodes:e});var t=parseInt(e.value,10);if(t>bc||t<wc)throw new bu("Int cannot represent non 32-bit signed integer value: ".concat(e.value),{nodes:e});return t}}),Nc=new ac({name:"Float",description:"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).",serialize:function(e){var t=Lc(e);if("boolean"==typeof t)return t?1:0;var n=t;if("string"==typeof t&&""!==t&&(n=Number(t)),"number"!=typeof n||!Number.isFinite(n))throw new bu("Float cannot represent non numeric value: ".concat(il(t)));return n},parseValue:function(e){if("number"!=typeof e||!Number.isFinite(e))throw new bu("Float cannot represent non numeric value: ".concat(il(e)));return e},parseLiteral:function(e){if(e.kind!==_u.FLOAT&&e.kind!==_u.INT)throw new bu("Float cannot represent non numeric value: ".concat(Al(e)),e);return parseFloat(e.value)}}),Tc=new ac({name:"String",description:"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.",serialize:function(e){var t=Lc(e);if("string"==typeof t)return t;if("boolean"==typeof t)return t?"true":"false";if("number"==typeof t&&Number.isFinite(t))return t.toString();throw new bu("String cannot represent value: ".concat(il(e)))},parseValue:function(e){if("string"!=typeof e)throw new bu("String cannot represent a non string value: ".concat(il(e)));return e},parseLiteral:function(e){if(e.kind!==_u.STRING)throw new bu("String cannot represent a non string value: ".concat(Al(e)),{nodes:e});return e.value}}),_c=new ac({name:"Boolean",description:"The `Boolean` scalar type represents `true` or `false`.",serialize:function(e){var t=Lc(e);if("boolean"==typeof t)return t;if(Number.isFinite(t))return 0!==t;throw new bu("Boolean cannot represent a non boolean value: ".concat(il(t)))},parseValue:function(e){if("boolean"!=typeof e)throw new bu("Boolean cannot represent a non boolean value: ".concat(il(e)));return e},parseLiteral:function(e){if(e.kind!==_u.BOOLEAN)throw new bu("Boolean cannot represent a non boolean value: ".concat(Al(e)),{nodes:e});return e.value}}),Ec=new ac({name:"ID",description:'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.',serialize:function(e){var t=Lc(e);if("string"==typeof t)return t;if(Number.isInteger(t))return String(t);throw new bu("ID cannot represent value: ".concat(il(e)))},parseValue:function(e){if("string"==typeof e)return e;if("number"==typeof e&&Number.isInteger(e))return e.toString();throw new bu("ID cannot represent value: ".concat(il(e)))},parseLiteral:function(e){if(e.kind!==_u.STRING&&e.kind!==_u.INT)throw new bu("ID cannot represent a non-string and non-integer value: "+Al(e),{nodes:e});return e.value}}),Sc=Object.freeze([Tc,kc,Nc,_c,Ec]);function Lc(e){if(du(e)){if("function"==typeof e.valueOf){var t=e.valueOf();if(!du(t))return t}if("function"==typeof e.toJSON)return e.toJSON()}return e}function Ac(e){return ol(e,Oc)}var Oc=function(e){function t(e){var n,r;y(this,t),this.name=Fl(e.name),this.description=e.description,this.locations=e.locations,this.isRepeatable=null!==(n=e.isRepeatable)&&void 0!==n&&n,this.extensions=kl(e.extensions),this.astNode=e.astNode,Array.isArray(e.locations)||fu(!1,"@".concat(e.name," locations must be an Array."));var i=null!==(r=e.args)&&void 0!==r?r:{};du(i)&&!Array.isArray(i)||fu(!1,"@".concat(e.name," args must be an object with argument names as keys.")),this.args=lc(i)}return x(t,[{key:Symbol.toStringTag,get:function(){return"GraphQLDirective"}},{key:"toConfig",value:function(){return{name:this.name,description:this.description,locations:this.locations,args:dc(this.args),isRepeatable:this.isRepeatable,extensions:this.extensions,astNode:this.astNode}}},{key:"toString",value:function(){return"@"+this.name}},{key:"toJSON",value:function(){return this.toString()}}]),t}(),Ic=new Oc({name:"include",description:"Directs the executor to include this field or fragment only when the `if` argument is true.",locations:[Tu.FIELD,Tu.FRAGMENT_SPREAD,Tu.INLINE_FRAGMENT],args:{if:{type:new Zl(_c),description:"Included when true."}}}),Cc=new Oc({name:"skip",description:"Directs the executor to skip this field or fragment when the `if` argument is true.",locations:[Tu.FIELD,Tu.FRAGMENT_SPREAD,Tu.INLINE_FRAGMENT],args:{if:{type:new Zl(_c),description:"Skipped when true."}}}),Rc=new Oc({name:"deprecated",description:"Marks an element of a GraphQL schema as no longer supported.",locations:[Tu.FIELD_DEFINITION,Tu.ARGUMENT_DEFINITION,Tu.INPUT_FIELD_DEFINITION,Tu.ENUM_VALUE],args:{reason:{type:Tc,description:"Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).",defaultValue:"No longer supported"}}}),jc=new Oc({name:"specifiedBy",description:"Exposes a URL that specifies the behavior of this scalar.",locations:[Tu.SCALAR],args:{url:{type:new Zl(Tc),description:"The URL that specifies the behavior of this scalar."}}}),Dc=Object.freeze([Ic,Cc,Rc,jc]);function Mc(e,t){if(Wl(t)){var n=Mc(e,t.ofType);return(null==n?void 0:n.kind)===_u.NULL?null:n}if(null===e)return{kind:_u.NULL};if(void 0===e)return null;if($l(t)){var r=t.ofType;if("object"===h(u=e)&&"function"==typeof(null==u?void 0:u[Symbol.iterator])){var i,a=[],o=D(e);try{for(o.s();!(i=o.n()).done;){var s=Mc(i.value,r);null!=s&&a.push(s)}}catch(e){o.e(e)}finally{o.f()}return{kind:_u.LIST,values:a}}return Mc(e,r)}var u;if(Gl(t)){if(!du(e))return null;for(var l=[],c=0,f=Object.values(t.getFields());c<f.length;c++){var d=f[c],p=Mc(e[d.name],d.type);p&&l.push({kind:_u.OBJECT_FIELD,name:{kind:_u.NAME,value:d.name},value:p})}return{kind:_u.OBJECT,fields:l}}if(Ql(t)){var m=t.serialize(e);if(null==m)return null;if("boolean"==typeof m)return{kind:_u.BOOLEAN,value:m};if("number"==typeof m&&Number.isFinite(m)){var v=String(m);return Pc.test(v)?{kind:_u.INT,value:v}:{kind:_u.FLOAT,value:v}}if("string"==typeof m)return Jl(t)?{kind:_u.ENUM,value:m}:t===Ec&&Pc.test(m)?{kind:_u.INT,value:m}:{kind:_u.STRING,value:m};throw new TypeError("Cannot convert value to AST: ".concat(il(m),"."))}pu(!1,"Unexpected input type: "+il(t))}var Fc,Pc=/^-?(?:0|[1-9][0-9]*)$/,Uc=new oc({name:"__Schema",description:"A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.",fields:function(){return{description:{type:Tc,resolve:function(e){return e.description}},types:{description:"A list of all types supported by this server.",type:new Zl(new Xl(new Zl(zc))),resolve:function(e){return Object.values(e.getTypeMap())}},queryType:{description:"The type that query operations will be rooted at.",type:new Zl(zc),resolve:function(e){return e.getQueryType()}},mutationType:{description:"If this server supports mutation, the type that mutation operations will be rooted at.",type:zc,resolve:function(e){return e.getMutationType()}},subscriptionType:{description:"If this server support subscription, the type that subscription operations will be rooted at.",type:zc,resolve:function(e){return e.getSubscriptionType()}},directives:{description:"A list of all directives supported by this server.",type:new Zl(new Xl(new Zl(Vc))),resolve:function(e){return e.getDirectives()}}}}}),Vc=new oc({name:"__Directive",description:"A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\n\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.",fields:function(){return{name:{type:new Zl(Tc),resolve:function(e){return e.name}},description:{type:Tc,resolve:function(e){return e.description}},isRepeatable:{type:new Zl(_c),resolve:function(e){return e.isRepeatable}},locations:{type:new Zl(new Xl(new Zl(Bc))),resolve:function(e){return e.locations}},args:{type:new Zl(new Xl(new Zl(Jc))),args:{includeDeprecated:{type:_c,defaultValue:!1}},resolve:function(e,t){return t.includeDeprecated?e.args:e.args.filter((function(e){return null==e.deprecationReason}))}}}}}),Bc=new vc({name:"__DirectiveLocation",description:"A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.",values:{QUERY:{value:Tu.QUERY,description:"Location adjacent to a query operation."},MUTATION:{value:Tu.MUTATION,description:"Location adjacent to a mutation operation."},SUBSCRIPTION:{value:Tu.SUBSCRIPTION,description:"Location adjacent to a subscription operation."},FIELD:{value:Tu.FIELD,description:"Location adjacent to a field."},FRAGMENT_DEFINITION:{value:Tu.FRAGMENT_DEFINITION,description:"Location adjacent to a fragment definition."},FRAGMENT_SPREAD:{value:Tu.FRAGMENT_SPREAD,description:"Location adjacent to a fragment spread."},INLINE_FRAGMENT:{value:Tu.INLINE_FRAGMENT,description:"Location adjacent to an inline fragment."},VARIABLE_DEFINITION:{value:Tu.VARIABLE_DEFINITION,description:"Location adjacent to a variable definition."},SCHEMA:{value:Tu.SCHEMA,description:"Location adjacent to a schema definition."},SCALAR:{value:Tu.SCALAR,description:"Location adjacent to a scalar definition."},OBJECT:{value:Tu.OBJECT,description:"Location adjacent to an object type definition."},FIELD_DEFINITION:{value:Tu.FIELD_DEFINITION,description:"Location adjacent to a field definition."},ARGUMENT_DEFINITION:{value:Tu.ARGUMENT_DEFINITION,description:"Location adjacent to an argument definition."},INTERFACE:{value:Tu.INTERFACE,description:"Location adjacent to an interface definition."},UNION:{value:Tu.UNION,description:"Location adjacent to a union definition."},ENUM:{value:Tu.ENUM,description:"Location adjacent to an enum definition."},ENUM_VALUE:{value:Tu.ENUM_VALUE,description:"Location adjacent to an enum value definition."},INPUT_OBJECT:{value:Tu.INPUT_OBJECT,description:"Location adjacent to an input object type definition."},INPUT_FIELD_DEFINITION:{value:Tu.INPUT_FIELD_DEFINITION,description:"Location adjacent to an input object field definition."}}}),zc=new oc({name:"__Type",description:"The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.",fields:function(){return{kind:{type:new Zl($c),resolve:function(e){return Vl(e)?Fc.SCALAR:Bl(e)?Fc.OBJECT:zl(e)?Fc.INTERFACE:ql(e)?Fc.UNION:Jl(e)?Fc.ENUM:Gl(e)?Fc.INPUT_OBJECT:$l(e)?Fc.LIST:Wl(e)?Fc.NON_NULL:void pu(!1,'Unexpected type: "'.concat(il(e),'".'))}},name:{type:Tc,resolve:function(e){return"name"in e?e.name:void 0}},description:{type:Tc,resolve:function(e){return"description"in e?e.description:void 0}},specifiedByURL:{type:Tc,resolve:function(e){return"specifiedByURL"in e?e.specifiedByURL:void 0}},fields:{type:new Xl(new Zl(qc)),args:{includeDeprecated:{type:_c,defaultValue:!1}},resolve:function(e,t){var n=t.includeDeprecated;if(Bl(e)||zl(e)){var r=Object.values(e.getFields());return n?r:r.filter((function(e){return null==e.deprecationReason}))}}},interfaces:{type:new Xl(new Zl(zc)),resolve:function(e){if(Bl(e)||zl(e))return e.getInterfaces()}},possibleTypes:{type:new Xl(new Zl(zc)),resolve:function(e,t,n,r){var i=r.schema;if(function(e){return zl(e)||ql(e)}(e))return i.getPossibleTypes(e)}},enumValues:{type:new Xl(new Zl(Gc)),args:{includeDeprecated:{type:_c,defaultValue:!1}},resolve:function(e,t){var n=t.includeDeprecated;if(Jl(e)){var r=e.getValues();return n?r:r.filter((function(e){return null==e.deprecationReason}))}}},inputFields:{type:new Xl(new Zl(Jc)),args:{includeDeprecated:{type:_c,defaultValue:!1}},resolve:function(e,t){var n=t.includeDeprecated;if(Gl(e)){var r=Object.values(e.getFields());return n?r:r.filter((function(e){return null==e.deprecationReason}))}}},ofType:{type:zc,resolve:function(e){return"ofType"in e?e.ofType:void 0}}}}}),qc=new oc({name:"__Field",description:"Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.",fields:function(){return{name:{type:new Zl(Tc),resolve:function(e){return e.name}},description:{type:Tc,resolve:function(e){return e.description}},args:{type:new Zl(new Xl(new Zl(Jc))),args:{includeDeprecated:{type:_c,defaultValue:!1}},resolve:function(e,t){return t.includeDeprecated?e.args:e.args.filter((function(e){return null==e.deprecationReason}))}},type:{type:new Zl(zc),resolve:function(e){return e.type}},isDeprecated:{type:new Zl(_c),resolve:function(e){return null!=e.deprecationReason}},deprecationReason:{type:Tc,resolve:function(e){return e.deprecationReason}}}}}),Jc=new oc({name:"__InputValue",description:"Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.",fields:function(){return{name:{type:new Zl(Tc),resolve:function(e){return e.name}},description:{type:Tc,resolve:function(e){return e.description}},type:{type:new Zl(zc),resolve:function(e){return e.type}},defaultValue:{type:Tc,description:"A GraphQL-formatted string representing the default value for this input value.",resolve:function(e){var t=e.type,n=Mc(e.defaultValue,t);return n?Al(n):null}},isDeprecated:{type:new Zl(_c),resolve:function(e){return null!=e.deprecationReason}},deprecationReason:{type:Tc,resolve:function(e){return e.deprecationReason}}}}}),Gc=new oc({name:"__EnumValue",description:"One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.",fields:function(){return{name:{type:new Zl(Tc),resolve:function(e){return e.name}},description:{type:Tc,resolve:function(e){return e.description}},isDeprecated:{type:new Zl(_c),resolve:function(e){return null!=e.deprecationReason}},deprecationReason:{type:Tc,resolve:function(e){return e.deprecationReason}}}}});!function(e){e.SCALAR="SCALAR",e.OBJECT="OBJECT",e.INTERFACE="INTERFACE",e.UNION="UNION",e.ENUM="ENUM",e.INPUT_OBJECT="INPUT_OBJECT",e.LIST="LIST",e.NON_NULL="NON_NULL"}(Fc||(Fc={}));var $c=new vc({name:"__TypeKind",description:"An enum describing what kind of type a given `__Type` is.",values:{SCALAR:{value:Fc.SCALAR,description:"Indicates this type is a scalar."},OBJECT:{value:Fc.OBJECT,description:"Indicates this type is an object. `fields` and `interfaces` are valid fields."},INTERFACE:{value:Fc.INTERFACE,description:"Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields."},UNION:{value:Fc.UNION,description:"Indicates this type is a union. `possibleTypes` is a valid field."},ENUM:{value:Fc.ENUM,description:"Indicates this type is an enum. `enumValues` is a valid field."},INPUT_OBJECT:{value:Fc.INPUT_OBJECT,description:"Indicates this type is an input object. `inputFields` is a valid field."},LIST:{value:Fc.LIST,description:"Indicates this type is a list. `ofType` is a valid field."},NON_NULL:{value:Fc.NON_NULL,description:"Indicates this type is a non-null. `ofType` is a valid field."}}}),Wc={name:"__schema",type:new Zl(Uc),description:"Access the current type schema of this server.",args:[],resolve:function(e,t,n,r){return r.schema},deprecationReason:void 0,extensions:Object.create(null),astNode:void 0},Hc={name:"__type",type:zc,description:"Request the type information of a single type.",args:[{name:"name",description:void 0,type:new Zl(Tc),defaultValue:void 0,deprecationReason:void 0,extensions:Object.create(null),astNode:void 0}],resolve:function(e,t,n,r){var i=t.name;return r.schema.getType(i)},deprecationReason:void 0,extensions:Object.create(null),astNode:void 0},Kc={name:"__typename",type:new Zl(Tc),description:"The name of the current Object type at runtime.",args:[],resolve:function(e,t,n,r){return r.parentType.name},deprecationReason:void 0,extensions:Object.create(null),astNode:void 0},Qc=Object.freeze([Uc,Vc,Bc,zc,qc,Jc,Gc,$c]),Yc=function(e){function t(e){var n,r;y(this,t),this.__validationErrors=!0===e.assumeValid?[]:void 0,du(e)||fu(!1,"Must provide configuration object."),!e.types||Array.isArray(e.types)||fu(!1,'"types" must be Array if provided but got: '.concat(il(e.types),".")),!e.directives||Array.isArray(e.directives)||fu(!1,'"directives" must be Array if provided but got: '+"".concat(il(e.directives),".")),this.description=e.description,this.extensions=kl(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(n=e.extensionASTNodes)&&void 0!==n?n:[],this._queryType=e.query,this._mutationType=e.mutation,this._subscriptionType=e.subscription,this._directives=null!==(r=e.directives)&&void 0!==r?r:Dc;var i=new Set(e.types);if(null!=e.types){var a,o=D(e.types);try{for(o.s();!(a=o.n()).done;){var s=a.value;i.delete(s),Xc(s,i)}}catch(e){o.e(e)}finally{o.f()}}null!=this._queryType&&Xc(this._queryType,i),null!=this._mutationType&&Xc(this._mutationType,i),null!=this._subscriptionType&&Xc(this._subscriptionType,i);var u,l=D(this._directives);try{for(l.s();!(u=l.n()).done;){var c=u.value;if(Ac(c)){var f,d=D(c.args);try{for(d.s();!(f=d.n()).done;){Xc(f.value.type,i)}}catch(e){d.e(e)}finally{d.f()}}}}catch(e){l.e(e)}finally{l.f()}Xc(Uc,i),this._typeMap=Object.create(null),this._subTypeMap=Object.create(null),this._implementationsMap=Object.create(null);var p,h=D(i);try{for(h.s();!(p=h.n()).done;){var m=p.value;if(null!=m){var v=m.name;if(v||fu(!1,"One of the provided types for building the Schema is missing a name."),void 0!==this._typeMap[v])throw new Error('Schema must contain uniquely named types but contains multiple types named "'.concat(v,'".'));if(this._typeMap[v]=m,zl(m)){var g,x=D(m.getInterfaces());try{for(x.s();!(g=x.n()).done;){var b=g.value;if(zl(b)){var w=this._implementationsMap[b.name];void 0===w&&(w=this._implementationsMap[b.name]={objects:[],interfaces:[]}),w.interfaces.push(m)}}}catch(e){x.e(e)}finally{x.f()}}else if(Bl(m)){var k,N=D(m.getInterfaces());try{for(N.s();!(k=N.n()).done;){var T=k.value;if(zl(T)){var _=this._implementationsMap[T.name];void 0===_&&(_=this._implementationsMap[T.name]={objects:[],interfaces:[]}),_.objects.push(m)}}}catch(e){N.e(e)}finally{N.f()}}}}}catch(e){h.e(e)}finally{h.f()}}return x(t,[{key:Symbol.toStringTag,get:function(){return"GraphQLSchema"}},{key:"getQueryType",value:function(){return this._queryType}},{key:"getMutationType",value:function(){return this._mutationType}},{key:"getSubscriptionType",value:function(){return this._subscriptionType}},{key:"getRootType",value:function(e){switch(e){case Nu.QUERY:return this.getQueryType();case Nu.MUTATION:return this.getMutationType();case Nu.SUBSCRIPTION:return this.getSubscriptionType()}}},{key:"getTypeMap",value:function(){return this._typeMap}},{key:"getType",value:function(e){return this.getTypeMap()[e]}},{key:"getPossibleTypes",value:function(e){return ql(e)?e.getTypes():this.getImplementations(e).objects}},{key:"getImplementations",value:function(e){var t=this._implementationsMap[e.name];return null!=t?t:{objects:[],interfaces:[]}}},{key:"isSubType",value:function(e,t){var n=this._subTypeMap[e.name];if(void 0===n){if(n=Object.create(null),ql(e)){var r,i=D(e.getTypes());try{for(i.s();!(r=i.n()).done;){n[r.value.name]=!0}}catch(e){i.e(e)}finally{i.f()}}else{var a,o=this.getImplementations(e),s=D(o.objects);try{for(s.s();!(a=s.n()).done;){n[a.value.name]=!0}}catch(e){s.e(e)}finally{s.f()}var u,l=D(o.interfaces);try{for(l.s();!(u=l.n()).done;){n[u.value.name]=!0}}catch(e){l.e(e)}finally{l.f()}}this._subTypeMap[e.name]=n}return void 0!==n[t.name]}},{key:"getDirectives",value:function(){return this._directives}},{key:"getDirective",value:function(e){return this.getDirectives().find((function(t){return t.name===e}))}},{key:"toConfig",value:function(){return{description:this.description,query:this.getQueryType(),mutation:this.getMutationType(),subscription:this.getSubscriptionType(),types:Object.values(this.getTypeMap()),directives:this.getDirectives(),extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes,assumeValid:void 0!==this.__validationErrors}}}]),t}();function Xc(e,t){var n=nc(e);if(!t.has(n))if(t.add(n),ql(n)){var r,i=D(n.getTypes());try{for(i.s();!(r=i.n()).done;){Xc(r.value,t)}}catch(e){i.e(e)}finally{i.f()}}else if(Bl(n)||zl(n)){var a,o=D(n.getInterfaces());try{for(o.s();!(a=o.n()).done;){Xc(a.value,t)}}catch(e){o.e(e)}finally{o.f()}for(var s=0,u=Object.values(n.getFields());s<u.length;s++){var l=u[s];Xc(l.type,t);var c,f=D(l.args);try{for(f.s();!(c=f.n()).done;){Xc(c.value.type,t)}}catch(e){f.e(e)}finally{f.f()}}}else if(Gl(n))for(var d=0,p=Object.values(n.getFields());d<p.length;d++){Xc(p[d].type,t)}return t}function Zc(e,t){switch(t.kind){case _u.LIST_TYPE:var n=Zc(e,t.type);return n&&new Xl(n);case _u.NON_NULL_TYPE:var r=Zc(e,t.type);return r&&new Zl(r);case _u.NAMED_TYPE:return e.getType(t.name.value)}}var ef=function(e){function t(e,n,r){y(this,t),this._schema=e,this._typeStack=[],this._parentTypeStack=[],this._inputTypeStack=[],this._fieldDefStack=[],this._defaultValueStack=[],this._directive=null,this._argument=null,this._enumValue=null,this._getFieldDef=null!=r?r:tf,n&&(Hl(n)&&this._inputTypeStack.push(n),Yl(n)&&this._parentTypeStack.push(n),Kl(n)&&this._typeStack.push(n))}return x(t,[{key:Symbol.toStringTag,get:function(){return"TypeInfo"}},{key:"getType",value:function(){if(this._typeStack.length>0)return this._typeStack[this._typeStack.length-1]}},{key:"getParentType",value:function(){if(this._parentTypeStack.length>0)return this._parentTypeStack[this._parentTypeStack.length-1]}},{key:"getInputType",value:function(){if(this._inputTypeStack.length>0)return this._inputTypeStack[this._inputTypeStack.length-1]}},{key:"getParentInputType",value:function(){if(this._inputTypeStack.length>1)return this._inputTypeStack[this._inputTypeStack.length-2]}},{key:"getFieldDef",value:function(){if(this._fieldDefStack.length>0)return this._fieldDefStack[this._fieldDefStack.length-1]}},{key:"getDefaultValue",value:function(){if(this._defaultValueStack.length>0)return this._defaultValueStack[this._defaultValueStack.length-1]}},{key:"getDirective",value:function(){return this._directive}},{key:"getArgument",value:function(){return this._argument}},{key:"getEnumValue",value:function(){return this._enumValue}},{key:"enter",value:function(e){var t=this._schema;switch(e.kind){case _u.SELECTION_SET:var n=nc(this.getType());this._parentTypeStack.push(Yl(n)?n:void 0);break;case _u.FIELD:var r,i,a=this.getParentType();a&&(r=this._getFieldDef(t,a,e))&&(i=r.type),this._fieldDefStack.push(r),this._typeStack.push(Kl(i)?i:void 0);break;case _u.DIRECTIVE:this._directive=t.getDirective(e.name.value);break;case _u.OPERATION_DEFINITION:var o=t.getRootType(e.operation);this._typeStack.push(Bl(o)?o:void 0);break;case _u.INLINE_FRAGMENT:case _u.FRAGMENT_DEFINITION:var s=e.typeCondition,u=s?Zc(t,s):nc(this.getType());this._typeStack.push(Kl(u)?u:void 0);break;case _u.VARIABLE_DEFINITION:var l=Zc(t,e.type);this._inputTypeStack.push(Hl(l)?l:void 0);break;case _u.ARGUMENT:var c,f,d,p=null!==(c=this.getDirective())&&void 0!==c?c:this.getFieldDef();p&&(f=p.args.find((function(t){return t.name===e.name.value})))&&(d=f.type),this._argument=f,this._defaultValueStack.push(f?f.defaultValue:void 0),this._inputTypeStack.push(Hl(d)?d:void 0);break;case _u.LIST:var h=function(e){if(e)return Wl(e)?e.ofType:e}(this.getInputType()),m=$l(h)?h.ofType:h;this._defaultValueStack.push(void 0),this._inputTypeStack.push(Hl(m)?m:void 0);break;case _u.OBJECT_FIELD:var v,y,g=nc(this.getInputType());Gl(g)&&(y=g.getFields()[e.name.value])&&(v=y.type),this._defaultValueStack.push(y?y.defaultValue:void 0),this._inputTypeStack.push(Hl(v)?v:void 0);break;case _u.ENUM:var x,b=nc(this.getInputType());Jl(b)&&(x=b.getValue(e.value)),this._enumValue=x}}},{key:"leave",value:function(e){switch(e.kind){case _u.SELECTION_SET:this._parentTypeStack.pop();break;case _u.FIELD:this._fieldDefStack.pop(),this._typeStack.pop();break;case _u.DIRECTIVE:this._directive=null;break;case _u.OPERATION_DEFINITION:case _u.INLINE_FRAGMENT:case _u.FRAGMENT_DEFINITION:this._typeStack.pop();break;case _u.VARIABLE_DEFINITION:this._inputTypeStack.pop();break;case _u.ARGUMENT:this._argument=null,this._defaultValueStack.pop(),this._inputTypeStack.pop();break;case _u.LIST:case _u.OBJECT_FIELD:this._defaultValueStack.pop(),this._inputTypeStack.pop();break;case _u.ENUM:this._enumValue=null}}}]),t}();function tf(e,t,n){var r=n.name.value;return r===Wc.name&&e.getQueryType()===t?Wc:r===Hc.name&&e.getQueryType()===t?Hc:r===Kc.name&&Yl(t)?Kc:Bl(t)||zl(t)?t.getFields()[r]:void 0}function nf(e,t,n){if(e){if(e.kind===_u.VARIABLE){var r=e.name.value;if(null==n||void 0===n[r])return;var i=n[r];if(null===i&&Wl(t))return;return i}if(Wl(t)){if(e.kind===_u.NULL)return;return nf(e,t.ofType,n)}if(e.kind===_u.NULL)return null;if($l(t)){var a=t.ofType;if(e.kind===_u.LIST){var o,s=[],u=D(e.values);try{for(u.s();!(o=u.n()).done;){var l=o.value;if(rf(l,n)){if(Wl(a))return;s.push(null)}else{var c=nf(l,a,n);if(void 0===c)return;s.push(c)}}}catch(e){u.e(e)}finally{u.f()}return s}var f=nf(e,a,n);if(void 0===f)return;return[f]}if(Gl(t)){if(e.kind!==_u.OBJECT)return;for(var d=Object.create(null),p=hl(e.fields,(function(e){return e.name.value})),h=0,m=Object.values(t.getFields());h<m.length;h++){var v=m[h],y=p[v.name];if(y&&!rf(y.value,n)){var g=nf(y.value,v.type,n);if(void 0===g)return;d[v.name]=g}else if(void 0!==v.defaultValue)d[v.name]=v.defaultValue;else if(Wl(v.type))return}return d}if(Ql(t)){var x;try{x=t.parseLiteral(e,n)}catch(e){return}if(void 0===x)return;return x}pu(!1,"Unexpected input type: "+il(t))}}function rf(e,t){return e.kind===_u.VARIABLE&&(null==t||void 0===t[e.name.value])}function af(e,t){du(e)&&du(e.__schema)||fu(!1,'Invalid or incomplete introspection result. Ensure that you are passing "data" property of introspection response and no "errors" was returned alongside: '.concat(il(e),"."));for(var n=e.__schema,r=ml(n.types,(function(e){return e.name}),(function(e){return function(e){if(null!=e&&null!=e.name&&null!=e.kind)switch(e.kind){case Fc.SCALAR:return new ac({name:(r=e).name,description:r.description,specifiedByURL:r.specifiedByURL});case Fc.OBJECT:return new oc({name:(n=e).name,description:n.description,interfaces:function(){return m(n)},fields:function(){return v(n)}});case Fc.INTERFACE:return new pc({name:(t=e).name,description:t.description,interfaces:function(){return m(t)},fields:function(){return v(t)}});case Fc.UNION:return function(e){if(!e.possibleTypes){var t=il(e);throw new Error("Introspection result missing possibleTypes: ".concat(t,"."))}return new hc({name:e.name,description:e.description,types:function(){return e.possibleTypes.map(p)}})}(e);case Fc.ENUM:return function(e){if(!e.enumValues){var t=il(e);throw new Error("Introspection result missing enumValues: ".concat(t,"."))}return new vc({name:e.name,description:e.description,values:ml(e.enumValues,(function(e){return e.name}),(function(e){return{description:e.description,deprecationReason:e.deprecationReason}}))})}(e);case Fc.INPUT_OBJECT:return function(e){if(!e.inputFields){var t=il(e);throw new Error("Introspection result missing inputFields: ".concat(t,"."))}return new gc({name:e.name,description:e.description,fields:function(){return g(e.inputFields)}})}(e)}var t;var n;var r;var i=il(e);throw new Error("Invalid or incomplete introspection result. Ensure that a full introspection query is used in order to build a client schema: ".concat(i,"."))}(e)})),i=0,a=[].concat(C(Sc),C(Qc));i<a.length;i++){var o=a[i];r[o.name]&&(r[o.name]=o)}var s=n.queryType?p(n.queryType):null,u=n.mutationType?p(n.mutationType):null,l=n.subscriptionType?p(n.subscriptionType):null,c=n.directives?n.directives.map((function(e){if(!e.args){var t=il(e);throw new Error("Introspection result missing directive args: ".concat(t,"."))}if(!e.locations){var n=il(e);throw new Error("Introspection result missing directive locations: ".concat(n,"."))}return new Oc({name:e.name,description:e.description,isRepeatable:e.isRepeatable,locations:e.locations.slice(),args:g(e.args)})})):[];return new Yc({description:n.description,query:s,mutation:u,subscription:l,types:Object.values(r),directives:c,assumeValid:null==t?void 0:t.assumeValid});function f(e){if(e.kind===Fc.LIST){var t=e.ofType;if(!t)throw new Error("Decorated type deeper than introspection query.");return new Xl(f(t))}if(e.kind===Fc.NON_NULL){var n=e.ofType;if(!n)throw new Error("Decorated type deeper than introspection query.");var r=f(n);return new Zl(function(e){if(!tc(e))throw new Error("Expected ".concat(il(e)," to be a GraphQL nullable type."));return e}(r))}return d(e)}function d(e){var t=e.name;if(!t)throw new Error("Unknown type reference: ".concat(il(e),"."));var n=r[t];if(!n)throw new Error("Invalid or incomplete schema, unknown type: ".concat(t,". Ensure that a full introspection query is used in order to build a client schema."));return n}function p(e){return function(e){if(!Bl(e))throw new Error("Expected ".concat(il(e)," to be a GraphQL Object type."));return e}(d(e))}function h(e){return function(e){if(!zl(e))throw new Error("Expected ".concat(il(e)," to be a GraphQL Interface type."));return e}(d(e))}function m(e){if(null===e.interfaces&&e.kind===Fc.INTERFACE)return[];if(!e.interfaces){var t=il(e);throw new Error("Introspection result missing interfaces: ".concat(t,"."))}return e.interfaces.map(h)}function v(e){if(!e.fields)throw new Error("Introspection result missing fields: ".concat(il(e),"."));return ml(e.fields,(function(e){return e.name}),y)}function y(e){var t=f(e.type);if(!Kl(t)){var n=il(t);throw new Error("Introspection must provide output type for fields, but received: ".concat(n,"."))}if(!e.args){var r=il(e);throw new Error("Introspection result missing field args: ".concat(r,"."))}return{description:e.description,deprecationReason:e.deprecationReason,type:t,args:g(e.args)}}function g(e){return ml(e,(function(e){return e.name}),x)}function x(e){var t=f(e.type);if(!Hl(t)){var n=il(t);throw new Error("Introspection must provide input type for arguments, but received: ".concat(n,"."))}var r=null!=e.defaultValue?nf(function(e,t){var n=new cl(e,t);n.expectToken(Eu.SOF);var r=n.parseValueLiteral(!1);return n.expectToken(Eu.EOF),r}(e.defaultValue),t):void 0;return{description:e.description,type:t,defaultValue:r,deprecationReason:e.deprecationReason}}}var of=function(){},sf=of;function uf(e){var t=[e];return t.tag=0,t}function lf(e){var t=[e];return t.tag=1,t}var cf=function(e){return e};function ff(e){return function(t){return function(n){var r=sf;t((function(t){0===t?n(0):0===t.tag?(r=t[0],n(t)):e(t[0])?n(t):r(0)}))}}}function df(e){return function(t){return function(n){return t((function(t){0===t||0===t.tag?n(t):n(lf(e(t[0])))}))}}}function pf(e){return function(t){return function(n){var r=[],i=sf,a=!1,o=!1;t((function(t){o||(0===t?(o=!0,r.length||n(0)):0===t.tag?i=t[0]:(a=!1,function(e){var t=sf;e((function(e){if(0===e){if(r.length){var s=r.indexOf(t);s>-1&&(r=r.slice()).splice(s,1),r.length||(o?n(0):a||(a=!0,i(0)))}}else 0===e.tag?(r.push(t=e[0]),t(0)):r.length&&(n(e),t(0))}))}(e(t[0])),a||(a=!0,i(0))))})),n(uf((function(e){if(1===e){o||(o=!0,i(1));for(var t=0,n=r,s=r.length;t<s;t++)n[t](1);r.length=0}else{o||a?a=!1:(a=!0,i(0));for(var u=0,l=r,c=r.length;u<c;u++)l[u](0)}})))}}}function hf(e){return function(e){return pf(cf)(e)}(Nf(e))}function mf(e){return function(t){return function(n){var r=!1;t((function(t){if(r);else if(0===t)r=!0,n(0),e();else if(0===t.tag){var i=t[0];n(uf((function(t){1===t?(r=!0,i(1),e()):i(t)})))}else n(t)}))}}}function vf(e){return function(t){return function(n){var r=!1;t((function(t){if(r);else if(0===t)r=!0,n(0);else if(0===t.tag){var i=t[0];n(uf((function(e){1===e&&(r=!0),i(e)})))}else e(t[0]),n(t)}))}}}function yf(e){return function(t){return function(n){return t((function(t){0===t?n(0):0===t.tag?(n(t),e()):n(t)}))}}}function gf(e){var t=[],n=sf,r=!1;return function(i){t.push(i),1===t.length&&e((function(e){if(0===e){for(var i=0,a=t,o=t.length;i<o;i++)a[i](0);t.length=0}else if(0===e.tag)n=e[0];else{r=!1;for(var s=0,u=t,l=t.length;s<l;s++)u[s](e)}})),i(uf((function(e){if(1===e){var a=t.indexOf(i);a>-1&&(t=t.slice()).splice(a,1),t.length||n(1)}else r||(r=!0,n(0))})))}}function xf(e){return function(t){return function(n){var r=sf,i=sf,a=!1,o=!1,s=!1,u=!1;t((function(t){u||(0===t?(u=!0,s||n(0)):0===t.tag?r=t[0]:(s&&(i(1),i=sf),a?a=!1:(a=!0,r(0)),function(e){s=!0,e((function(e){s&&(0===e?(s=!1,u?n(0):a||(a=!0,r(0))):0===e.tag?(o=!1,(i=e[0])(0)):(n(e),o?o=!1:i(0)))}))}(e(t[0]))))})),n(uf((function(e){1===e?(u||(u=!0,r(1)),s&&(s=!1,i(1))):(u||a||(a=!0,r(0)),s&&!o&&(o=!0,i(0)))})))}}}function bf(e){return function(t){return function(n){var r=sf,i=!1,a=0;t((function(t){i||(0===t?(i=!0,n(0)):0===t.tag?e<=0?(i=!0,n(0),t[0](1)):r=t[0]:a++<e?(n(t),!i&&a>=e&&(i=!0,n(0),r(1))):n(t))})),n(uf((function(t){1!==t||i?0===t&&!i&&a<e&&r(0):(i=!0,r(1))})))}}}function wf(e){return function(t){return function(n){var r=sf,i=sf,a=!1;t((function(t){a||(0===t?(a=!0,i(1),n(0)):0===t.tag?(r=t[0],e((function(e){0===e||(0===e.tag?(i=e[0])(0):(a=!0,r(1),n(0)))}))):n(t))})),n(uf((function(e){1!==e||a?a||r(0):(a=!0,r(1),i(1))})))}}}function kf(e){return function(t){return function(n){var r=sf,i=!1;t((function(t){i||(0===t?(i=!0,n(0)):0===t.tag?(r=t[0],n(t)):e(t[0])?n(t):(i=!0,n(0),r(1)))}))}}}var Nf=function(e){return e[Symbol.asyncIterator]?function(e){return function(t){var n,r=e[Symbol.asyncIterator](),i=!1,a=!1,o=!1;t(uf(function(){var e=v(p().mark((function e(s){return p().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(1!==s){e.next=5;break}i=!0,r.return&&r.return(),e.next=39;break;case 5:if(!a){e.next=9;break}o=!0,e.next=39;break;case 9:o=a=!0;case 10:if(!o||i){e.next=38;break}return e.next=13,r.next();case 13:if(!(n=e.sent).done){e.next=21;break}if(i=!0,!r.return){e.next=18;break}return e.next=18,r.return();case 18:t(0),e.next=36;break;case 21:e.prev=21,o=!1,t(lf(n.value)),e.next=36;break;case 26:if(e.prev=26,e.t0=e.catch(21),!r.throw){e.next=35;break}return e.next=31,r.throw(e.t0);case 31:if(!(i=!!e.sent.done)){e.next=33;break}t(0);case 33:e.next=36;break;case 35:throw e.t0;case 36:e.next=10;break;case 38:a=!1;case 39:case"end":return e.stop()}}),e,null,[[21,26]])})));return function(t){return e.apply(this,arguments)}}()))}}(e):function(t){var n,r=e[Symbol.iterator](),i=!1,a=!1,o=!1;t(uf((function(e){if(1===e)i=!0,r.return&&r.return();else if(a)o=!0;else{for(o=a=!0;o&&!i;)if((n=r.next()).done)i=!0,r.return&&r.return(),t(0);else try{o=!1,t(lf(n.value))}catch(e){if(!r.throw)throw e;(i=!!r.throw(e).done)&&t(0)}a=!1}})))}};function Tf(e){return function(t){var n=!1;t(uf((function(r){1===r?n=!0:n||(n=!0,t(lf(e)),t(0))})))}}function _f(e){return function(t){var n=!1,r=e({next:function(e){n||t(lf(e))},complete:function(){n||(n=!0,t(0))}});t(uf((function(e){1!==e||n||(n=!0,r())})))}}function Ef(){var e,t;return{source:gf(_f((function(n){return e=n.next,t=n.complete,of}))),next:function(t){e&&e(t)},complete:function(){t&&t()}}}var Sf=function(e){var t=!1;e(uf((function(n){1===n?t=!0:t||(t=!0,e(0))})))};function Lf(e){return function(t){var n=sf,r=!1;return t((function(t){0===t?r=!0:0===t.tag?(n=t[0])(0):r||(e(t[0]),n(0))})),{unsubscribe:function(){r||(r=!0,n(1))}}}}function Af(e){return new Promise((function(t){var n,r=sf;e((function(e){0===e?t(n):0===e.tag?(r=e[0])(0):(n=e[0],r(0))}))}))}var Of=function(e){return"string"==typeof e?new bu(e):"object"==h(e)&&e.message?new bu(e.message,e.nodes,e.source,e.positions,e.path,e,e.extensions||{}):e},If=function(e){w(n,e);var t=O(n);function n(e){var r;y(this,n);var i=(e.graphQLErrors||[]).map(Of),a=function(e,t){var n="";if(e)return"[Network] ".concat(e.message);if(t){var r,i=D(t);try{for(i.s();!(r=i.n()).done;){var a=r.value;n&&(n+="\n"),n+="[GraphQL] ".concat(a.message)}}catch(e){i.e(e)}finally{i.f()}}return n}(e.networkError,i);return(r=t.call(this,a)).name="CombinedError",r.message=a,r.graphQLErrors=i,r.networkError=e.networkError,r.response=e.response,r}return x(n,[{key:"toString",value:function(){return this.message}}]),n}(E(Error)),Cf=function(e,t){for(var n=0,r=0|t.length;n<r;n++)e=(e<<5)+e+t.charCodeAt(n);return 0|e},Rf=function(e){return Cf(5381,e)>>>0},jf=new Set,Df=new WeakMap,Mf=function e(t){if(null===t||jf.has(t))return"null";if("object"!=h(t))return JSON.stringify(t)||"";if(t.toJSON)return e(t.toJSON());if(Array.isArray(t)){var n,r="[",i=D(t);try{for(i.s();!(n=i.n()).done;){var a=n.value;"["!==r&&(r+=","),r+=(a=e(a)).length>0?a:"null"}}catch(e){i.e(e)}finally{i.f()}return r+"]"}var o=Object.keys(t).sort();if(!o.length&&t.constructor&&t.constructor!==Object){var s=Df.get(t)||Math.random().toString(36).slice(2);return Df.set(t,s),'{"__key":"'.concat(s,'"}')}jf.add(t);var u,l="{",c=D(o);try{for(c.s();!(u=c.n()).done;){var f=u.value,d=e(t[f]);d&&(l.length>1&&(l+=","),l+=e(f)+":"+d)}}catch(e){c.e(e)}finally{c.f()}return jf.delete(t),l+"}"},Ff=function(e){return jf.clear(),Mf(e)},Pf=/("{3}[\s\S]*"{3}|"(?:\\.|[^"])*")/g,Uf=/([\s,]|#[^\n\r]+)+/g,Vf=function(e,t){return t%2==0?e.replace(Uf," ").trim():e},Bf=function(e){var t=("string"!=typeof e?e.loc&&e.loc.source.body||Al(e):e).split(Pf).map(Vf).join("");if("string"!=typeof e){var n="definitions"in e&&Gf(e);n&&(t="# ".concat(n,"\n").concat(t)),e.loc||(e.loc={start:0,end:t.length,source:{body:t,name:"gql",locationOffset:{line:1,column:1}}})}return t},zf=new Map,qf=function(e){var t,n;return"string"==typeof e?(t=Rf(Bf(e)),n=zf.get(t)||ll(e,{noLocation:!0})):(t=e.__key||Rf(Bf(e)),n=zf.get(t)||e),n.loc||Bf(n),n.__key=t,zf.set(t,n),n},Jf=function(e,t){t||(t={});var n=qf(e);return{key:Cf(n.__key,Ff(t))>>>0,query:n,variables:t}},Gf=function(e){var t,n=D(e.definitions);try{for(n.s();!(t=n.n()).done;){var r=t.value;if(r.kind===_u.OPERATION_DEFINITION&&r.name)return r.name.value}}catch(e){n.e(e)}finally{n.f()}},$f=function(e,t,n){if(!("data"in t)&&!("errors"in t)||"path"in t)throw new Error("No Content");return{operation:e,data:t.data,error:Array.isArray(t.errors)?new If({graphQLErrors:t.errors,response:n}):void 0,extensions:"object"==h(t.extensions)&&t.extensions||void 0,hasNext:!!t.hasNext}},Wf=function(e,t,n){var r=d({},e);if(r.hasNext=!!t.hasNext,!("path"in t))return"data"in t&&(r.data=t.data),r;Array.isArray(t.errors)&&(r.error=new If({graphQLErrors:r.error?[].concat(C(r.error.graphQLErrors),C(t.errors)):t.errors,response:n}));for(var i,a=r.data=d({},r.data),o=0;o<t.path.length;)a=a[i=t.path[o++]]=Array.isArray(a[i])?C(a[i]):d({},a[i]);return Object.assign(a,t.data),r},Hf=function(e,t,n){return{operation:e,data:void 0,error:new If({networkError:t,response:n}),extensions:void 0}};function Kf(e){return{query:Al(e.query),operationName:Gf(e.query),variables:e.variables||void 0,extensions:void 0}}var Qf=function(e,t){var n="query"===e.kind&&e.context.preferGetMethod;if(!n||!t)return e.context.url;var r=new URL(e.context.url),i=r.searchParams;t.operationName&&i.set("operationName",t.operationName),t.query&&i.set("query",t.query.replace(/#[^\n\r]+/g," ").trim()),t.variables&&i.set("variables",Ff(t.variables)),t.extensions&&i.set("extensions",Ff(t.extensions));var a=r.toString();return a.length>2047&&"force"!==n?(e.context.preferGetMethod=!1,e.context.url):a},Yf=function(e,t){var n="query"===e.kind&&!!e.context.preferGetMethod,r={accept:"application/graphql+json, application/json"};n||(r["content-type"]="application/json");var i=("function"==typeof e.context.fetchOptions?e.context.fetchOptions():e.context.fetchOptions)||{};if(i.headers)for(var a in i.headers)r[a.toLowerCase()]=i.headers[a];return d(d({},i),{},{body:!n&&t?JSON.stringify(t):void 0,method:n?"GET":"POST",headers:r})},Xf="undefined"!=typeof TextDecoder?new TextDecoder:null,Zf=/content-type:[^\r\n]*application\/json/i,ed=/boundary="?([^=";]+)"?/i,td=function(e,t,n){var r="manual"===n.redirect?400:300,i=e.context.fetch;return _f((function(a){var o=a.next,s=a.complete,u="undefined"!=typeof AbortController?new AbortController:null;u&&(n.signal=u.signal);var l,c=!1,f=!1,d=!1;return Promise.resolve().then((function(){if(!f)return(i||fetch)(t,n)})).then((function(t){if(t)return d=(l=t).status<200||l.status>=r,function(e,t,n){var r=n.headers&&n.headers.get("Content-Type")||"";if(/text\//i.test(r))return n.text().then((function(r){e(Hf(t,new Error(r),n))}));if(!/multipart\/mixed/i.test(r))return n.text().then((function(r){e($f(t,JSON.parse(r),n))}));var i,a="---",o=r.match(ed);o&&(a="--"+o[1]);var s=function(){};if(n[Symbol.asyncIterator]){var u=n[Symbol.asyncIterator]();i=u.next.bind(u)}else{if(!("body"in n)||!n.body)throw new TypeError("Streaming requests unsupported");var l=n.body.getReader();s=function(){return l.cancel()},i=function(){return l.read()}}var f="",d=!0,p=null,h=null;return i().then((function r(o){if(o.done)c=!0;else{var s="Buffer"===(b=o.value).constructor.name?b.toString():Xf.decode(b),u=s.indexOf(a);for(u>-1?u+=f.length:u=f.indexOf(a),f+=s;u>-1;){var l=f.slice(0,u),m=f.slice(u+a.length);if(d)d=!1;else{var v=l.indexOf("\r\n\r\n")+4,y=l.slice(0,v),g=l.slice(v,l.lastIndexOf("\r\n")),x=void 0;if(Zf.test(y))try{x=JSON.parse(g),p=h=h?Wf(h,x,n):$f(t,x,n)}catch(e){}if("--"===m.slice(0,2)||x&&!x.hasNext){if(!h)return e($f(t,{},n));break}}u=(f=m).indexOf(a)}}var b;if(p&&(e(p),p=null),!o.done&&(!h||h.hasNext))return i().then(r)})).finally(s)}(o,e,l)})).then(s).catch((function(t){if(c)throw t;var n=Hf(e,d&&l.statusText?new Error(l.statusText):t,l);o(n),s()})),function(){f=!0,u&&u.abort()}}))},nd=function e(t,n){if(Array.isArray(t)){var r,i=D(t);try{for(i.s();!(r=i.n()).done;){e(r.value,n)}}catch(e){i.e(e)}finally{i.f()}}else if("object"==h(t)&&null!==t)for(var a in t)"__typename"===a&&"string"==typeof t[a]?n.add(t[a]):e(t[a],n);return n},rd=function(e){if(!e.selectionSet)return e;var t,n=D(e.selectionSet.selections);try{for(n.s();!(t=n.n()).done;){var r=t.value;if(r.kind===_u.FIELD&&"__typename"===r.name.value&&!r.alias)return e}}catch(e){n.e(e)}finally{n.f()}return d(d({},e),{},{selectionSet:d(d({},e.selectionSet),{},{selections:[].concat(C(e.selectionSet.selections),[{kind:_u.FIELD,name:{kind:_u.NAME,value:"__typename"}}])})})},id=new Map,ad=function(e){var t=qf(e),n=id.get(t.__key);return n||(n=Sl(t,{Field:rd,InlineFragment:rd}),Object.defineProperty(n,"__key",{value:t.__key,enumerable:!1}),id.set(t.__key,n)),n},od=function e(t,n){if(t&&"object"==h(t)){if(Array.isArray(t))return t.map((function(t){return e(t)}));if(t&&"object"==h(t)&&(n||"__typename"in t)){var r={};for(var i in t)"__typename"===i?Object.defineProperty(r,"__typename",{enumerable:!1,value:t.__typename}):r[i]=e(t[i]);return r}return t}return t};function sd(e){return e.toPromise=function(){return new Promise((function(t){var n=Lf((function(e){e.stale||e.hasNext||Promise.resolve().then((function(){n.unsubscribe(),t(e)}))}))(e)}))},e}function ud(e,t,n){return n||(n=t.context),{key:t.key,query:t.query,variables:t.variables,kind:e,context:n}}var ld=function(e,t){return ud(e.kind,e,d(d({},e.context),{},{meta:d(d({},e.context.meta),t)}))},cd=function(){},fd=function(e){var t=e.kind;return"mutation"!==t&&"query"!==t},dd=function(e,t){return e.reexecuteOperation(ud(t.kind,t,d(d({},t.context),{},{requestPolicy:"network-only"})))},pd=function(e){var t=e.forwardSubscription,n=e.enableAllOperations,r=e.isSubscriptionOperation;return function(e){var i=e.client,a=e.forward,o=r||function(e){var t=e.kind;return"subscription"===t||!!n&&("query"===t||"mutation"===t)};return function(e){var n=gf(e),r=pf((function(e){var r=e.key,a=ff((function(e){return"teardown"===e.kind&&e.key===r}))(n);return wf(a)(function(e){var n=t({key:e.key.toString(36),query:Al(e.query),variables:e.variables,context:d({},e.context)});return _f((function(t){var r,a=t.next,o=t.complete,s=!1;return Promise.resolve().then((function(){s||(r=n.subscribe({next:function(t){return a($f(e,t))},error:function(t){return a(Hf(e,t))},complete:function(){s||(s=!0,"subscription"===e.kind&&i.reexecuteOperation(ud("teardown",e,e.context)),o())}}))})),function(){s=!0,r&&r.unsubscribe()}}))}(e))}))(ff(o)(n)),s=a(ff((function(e){return!o(e)}))(n));return hf([r,s])}}},hd=function(e){var t=e.forward;e.dispatchDebug;var n=new Set,r=function(e){var t=e.key,r=e.kind;if("teardown"===r||"mutation"===r)return n.delete(t),!0;var i=n.has(t);return n.add(t),!i},i=function(e){var t=e.operation;e.hasNext||n.delete(t.key)};return function(e){var n=ff(r)(e);return vf(i)(t(n))}},md=function(e){return e.dispatchDebug,function(e){return ff((function(){return!1}))(vf((function(e){e.kind}))(e))}};md({dispatchDebug:cd});var vd=[hd,function(e){var t=e.forward,n=e.client;e.dispatchDebug;var r=new Map,i=new Map,a=function(e){var t=ud(e.kind,e);return t.query=ad(e.query),t},o=function(e){var t=e.key,n=e.kind,i=e.context.requestPolicy;return"query"===n&&"network-only"!==i&&("cache-only"===i||r.has(t))};return function(e){var s=gf(e),u=df((function(e){var t=r.get(e.key),i=d(d({},t),{},{operation:ld(e,{cacheOutcome:t?"hit":"miss"})});return"cache-and-network"===e.context.requestPolicy&&(i.stale=!0,dd(n,e)),i}))(ff((function(e){return!fd(e)&&o(e)}))(s)),l=vf((function(e){var t=e.operation;if(t){var a=function(e){return C(nd(e,new Set))}(e.data).concat(t.context.additionalTypenames||[]);if("mutation"===e.operation.kind){for(var o=new Set,s=0;s<a.length;s++){var u=a[s],l=i.get(u);l||i.set(u,l=new Set);var c,f=D(l.values());try{for(f.s();!(c=f.n()).done;){var d=c.value;o.add(d)}}catch(e){f.e(e)}finally{f.f()}l.clear()}var p,h=D(o.values());try{for(h.s();!(p=h.n()).done;){var m=p.value;r.has(m)&&(t=r.get(m).operation,r.delete(m),dd(n,t))}}catch(e){h.e(e)}finally{h.f()}}else if("query"===t.kind&&e.data){r.set(t.key,e);for(var v=0;v<a.length;v++){var y=a[v],g=i.get(y);g||i.set(y,g=new Set),g.add(t.key)}}}}))(t(ff((function(e){return"query"!==e.kind||"cache-only"!==e.context.requestPolicy}))(df((function(e){return ld(e,{cacheOutcome:"miss"})}))(hf([df(a)(ff((function(e){return!fd(e)&&!o(e)}))(s)),ff((function(e){return fd(e)}))(s)])))));return hf([u,l])}},function(e){var t=e.forward;return e.dispatchDebug,function(e){var n=gf(e),r=pf((function(e){var t=e.key,r=Kf(e),i=Qf(e,r),a=Yf(e,r),o=wf(ff((function(e){return"teardown"===e.kind&&e.key===t}))(n))(td(e,i,a));return o}))(ff((function(e){return"query"===e.kind||"mutation"===e.kind}))(n));return hf([r,t(ff((function(e){return"query"!==e.kind&&"mutation"!==e.kind}))(n))])}}],yd=function e(t){var n=0,r=new Map,i=new Map,a=[],o={url:t.url,fetchOptions:t.fetchOptions,fetch:t.fetch,preferGetMethod:!!t.preferGetMethod,requestPolicy:t.requestPolicy||"cache-first"},s=Ef(),u=s.source,l=s.next,c=!1;function f(e){if(e&&l(e),!c){for(c=!0;c&&(e=a.shift());)l(e);c=!1}}var p=function(e){var n=ff((function(t){return t.operation.kind===e.kind&&t.operation.key===e.key&&(!t.operation.context._instance||t.operation.context._instance===e.context._instance)}))(g);return t.maskTypename&&(n=df((function(e){return d(d({},e),{},{data:od(e.data,!0)})}))(n)),"mutation"===e.kind?bf(1)(yf((function(){return l(e)}))(n)):gf(mf((function(){r.delete(e.key),i.delete(e.key);for(var t=a.length-1;t>=0;t--)a[t].key===e.key&&a.splice(t,1);l(ud("teardown",e,e.context))}))(vf((function(t){r.set(e.key,t)}))(xf((function(t){return"query"!==e.kind||t.stale?Tf(t):hf([Tf(t),df((function(){return d(d({},t),{},{stale:!0})}))(bf(1)(ff((function(t){return"query"===t.kind&&t.key===e.key&&"cache-only"!==t.context.requestPolicy}))(u)))])}))(wf(ff((function(t){return"teardown"===t.kind&&t.key===e.key}))(u))(n)))))},h=this instanceof e?this:Object.create(e.prototype),m=Object.assign(h,{suspense:!!t.suspense,operations$:u,reexecuteOperation:function(e){("mutation"===e.kind||i.has(e.key))&&(a.push(e),Promise.resolve().then(f))},createRequestOperation:function(e,t,r){return r||(r={}),function(e){var t,n=D(e.definitions);try{for(n.s();!(t=n.n()).done;){var r=t.value;if(r.kind===_u.OPERATION_DEFINITION)return r.operation}}catch(e){n.e(e)}finally{n.f()}}(t.query),ud(e,t,d(d(d({_instance:"mutation"===e?n=n+1|0:void 0},o),r),{},{requestPolicy:r.requestPolicy||o.requestPolicy,suspense:r.suspense||!1!==r.suspense&&m.suspense}))},executeRequestOperation:function(e){return"mutation"===e.kind?p(e):_f((function(t){var n=i.get(e.key);n||i.set(e.key,n=p(e));var a="cache-and-network"===e.context.requestPolicy||"network-only"===e.context.requestPolicy;return Lf(t.next)(mf((function(){c=!1,t.complete()}))(yf((function(){var n=r.get(e.key);if("subscription"===e.kind)return f(e);a&&f(e),null!=n&&n===r.get(e.key)?t.next(a?d(d({},n),{},{stale:!0}):n):a||f(e)}))(n))).unsubscribe}))},executeQuery:function(e,t){var n=m.createRequestOperation("query",e,t);return m.executeRequestOperation(n)},executeSubscription:function(e,t){var n=m.createRequestOperation("subscription",e,t);return m.executeRequestOperation(n)},executeMutation:function(e,t){var n=m.createRequestOperation("mutation",e,t);return m.executeRequestOperation(n)},query:function(e,t,n){return n&&"boolean"==typeof n.suspense||(n=d(d({},n),{},{suspense:!1})),sd(m.executeQuery(Jf(e,t),n))},readQuery:function(e,t,n){var r=null;return Lf((function(e){r=e}))(m.query(e,t,n)).unsubscribe(),r},subscription:function(e,t,n){return m.executeSubscription(Jf(e,t),n)},mutation:function(e,t,n){return sd(m.executeMutation(Jf(e,t),n))}}),v=cd,y=function(e){return function(t){var n=t.client,r=t.forward;return t.dispatchDebug,e.reduceRight((function(e,t){return t({client:n,forward:e,dispatchDebug:function(e){}})}),r)}}(void 0!==t.exchanges?t.exchanges:vd),g=gf(y({client:m,dispatchDebug:v,forward:md({dispatchDebug:v})})(u));return function(e){Lf((function(e){}))(e)}(g),m},gd=yd({url:"/graphql"}),xd=e.createContext(gd),bd=xd.Provider;xd.Consumer,xd.displayName="UrqlContext";var wd=function(){return e.useContext(xd)},kd={fetching:!1,stale:!1,error:void 0,data:void 0,extensions:void 0,operation:void 0},Nd=function(e,t){var n=d(d(d({},e),t),{},{data:void 0!==t.data||t.error?t.data:e.data,fetching:!!t.fetching,stale:!!t.stale});return function(e,t){if("object"!=h(e)||"object"!=h(t))return e!==t;for(var n in e)if(!(n in t))return!0;for(var r in t)if(e[r]!==t[r])return!0;return!1}(e,n)?n:e},Td=function(e,t){for(var n=0,r=t.length;n<r;n++)if(e[n]!==t[n])return!0;return!1};function _d(t){var n=e.useRef(!0),r=wd(),i=I(e.useState(kd),2),a=i[0],o=i[1],s=e.useCallback((function(e,i){return o(d(d({},kd),{},{fetching:!0})),Af(r.executeMutation(Jf(t,e),i||{})).then((function(e){return n.current&&o({fetching:!1,stale:!!e.stale,data:e.data,error:e.error,extensions:e.extensions,operation:e.operation}),e}))}),[r,t,o]);return e.useEffect((function(){return n.current=!0,function(){n.current=!1}}),[]),[a,s]}function Ed(t,n){var r=e.useRef(void 0);return e.useMemo((function(){var e=Jf(t,n);return void 0!==r.current&&r.current.key===e.key?r.current:(r.current=e,e)}),[t,n])}function Sd(t){var n=wd(),r=function(e){if(!e._react){var t=new Set,n=new Map;e.operations$&&Lf((function(e){"teardown"===e.kind&&t.has(e.key)&&(t.delete(e.key),n.delete(e.key))}))(e.operations$),e._react={get:function(e){return n.get(e)},set:function(e,r){t.delete(e),n.set(e,r)},dispose:function(e){t.add(e)}}}return e._react}(n),i=function(e,t){return e.suspense&&(!t||!1!==t.suspense)}(n,t.context),a=Ed(t.query,t.variables),o=e.useMemo((function(){if(t.pause)return null;var e=n.executeQuery(a,d({requestPolicy:t.requestPolicy},t.context));return i?vf((function(e){r.set(a.key,e)}))(e):e}),[r,n,a,i,t.pause,t.requestPolicy,t.context]),s=e.useCallback((function(e,t){if(!e)return{fetching:!1};var n=r.get(a.key);if(n){if(t&&null!=n&&"then"in n)throw n}else{var i,o=Lf((function(e){n=e,i&&i(n)}))(kf((function(){return t&&!i||!n}))(e));if(null==n&&t){var s=new Promise((function(e){i=e}));throw r.set(a.key,s),s}o.unsubscribe()}return n||{fetching:!0}}),[r,a]),u=[n,a,t.requestPolicy,t.context,t.pause],l=I(e.useState((function(){return[o,Nd(kd,s(o,i)),u]})),2),c=l[0],f=l[1],p=c[1];o!==c[0]&&Td(c[2],u)&&f([o,p=Nd(c[1],s(o,i)),u]),e.useEffect((function(){var e=c[0],t=c[2][1],n=!1,i=function(e){n=!0,f((function(t){var n=Nd(t[1],e);return t[1]!==n?[t[0],n,t[2]]:t}))};if(e){var a=Lf(i)(mf((function(){i({fetching:!1})}))(e));return n||i({fetching:!0}),function(){r.dispose(t.key),a.unsubscribe()}}i({fetching:!1})}),[r,c[0],c[2][1]]);var h=e.useCallback((function(e){var o=d(d({requestPolicy:t.requestPolicy},t.context),e);f((function(e){return[i?vf((function(e){r.set(a.key,e)}))(n.executeQuery(a,o)):n.executeQuery(a,o),e[1],u]}))}),[n,r,a,i,s,t.requestPolicy,t.context]);return[p,h]}function Ld(t,n){var r=wd(),i=Ed(t.query,t.variables),a=e.useRef(n);a.current=n;var o=e.useMemo((function(){return t.pause?null:r.executeSubscription(i,t.context)}),[r,i,t.pause,t.context]),s=[r,i,t.context,t.pause],u=I(e.useState((function(){return[o,d(d({},kd),{},{fetching:!!o}),s]})),2),l=u[0],c=u[1],f=l[1];o!==l[0]&&Td(l[2],s)&&c([o,f=Nd(l[1],{fetching:!!o}),s]),e.useEffect((function(){var e=function(e){c((function(t){var n=Nd(t[1],e);return t[1]===n?t:(a.current&&t[1].data!==n.data&&(n.data=a.current(t[1].data,n.data)),[t[0],n,t[2]])}))};if(l[0])return Lf(e)(mf((function(){e({fetching:!!o})}))(l[0])).unsubscribe;e({fetching:!1})}),[l[0]]);var p=e.useCallback((function(e){var n=r.executeSubscription(i,d(d({},t.context),e));c((function(e){return[n,e[1],s]}))}),[r,t.context,i]);return[f,p]}var Ad=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:21;return crypto.getRandomValues(new Uint8Array(e)).reduce((function(e,t){return e+=(t&=63)<36?t.toString(36):t<62?(t-26).toString(36).toUpperCase():t>62?"-":"_"}),"")};const Od=cu();function Id({id:t,type:n="info",delay:r=5e3,message:i,shortMessage:a}){const[o,s]=e.useState(!0),u=e.useCallback((()=>{s(!1),setTimeout((()=>Od.emit("close",{id:t})),500)}),[t]);e.useEffect((()=>{const e=setTimeout(u,r);return()=>clearTimeout(e)}),[r,u]);const c=e.useMemo((()=>lt("w-11/12 mx-auto mb-2 rounded-lg shadow-lg",{"bg-green-600":"success"===n,"bg-red-600":"error"===n,"bg-yellow-600":"warning"===n,"bg-blue-600":"info"===n})),[n]),f=e.useMemo((()=>lt("flex text-white p-2 rounded-lg",{"bg-green-700":"success"===n,"bg-red-700":"error"===n,"bg-yellow-700":"warning"===n,"bg-blue-700":"info"===n})),[n]),d=e.useMemo((()=>{switch(n){case"success":return l.exports.jsx(Ue,{className:"h-6 w-6"});case"error":return l.exports.jsx(at,{className:"h-6 w-6"});case"warning":return l.exports.jsx(qe,{className:"h-6 w-6"});case"info":return l.exports.jsx(Ge,{className:"h-6 w-6"})}}),[n]),p=e.useMemo((()=>lt("-mr-1 flex p-2 rounded-md focus:outline-none sm:-mr-2 transition ease-in-out duration-150",{"focus:bg-green-500 hover:bg-green-500":"success"===n,"focus:bg-red-500 hover:bg-red-500":"error"===n,"focus:bg-yellow-500 hover:bg-yellow-500":"warning"===n,"focus:bg-blue-500 hover:bg-blue-500":"info"===n})),[n]);return l.exports.jsx(za,{appear:!0,show:o,as:"div",className:c,enter:"transition ease-out duration-150",enterFrom:"translate-y-full opacity-0",enterTo:"translate-y-0 opacity-100",leave:"transition ease-out duration-150",leaveFrom:"translate-y-0 opacity-100",leaveTo:"translate-y-full opacity-0",children:l.exports.jsx("div",{className:"mx-auto py-3 px-3 sm:px-6 lg:px-8",children:l.exports.jsxs("div",{className:"flex items-center justify-between flex-wrap",children:[l.exports.jsxs("div",{className:"w-0 flex-1 flex items-center",children:[l.exports.jsx("span",{className:f,children:d}),l.exports.jsxs("p",{className:"ml-3 text-white text-sm md:text-base text-center w-full ",children:[Boolean(a)&&l.exports.jsx("span",{className:"md:hidden",children:a}),l.exports.jsx("span",{className:lt(a?"hidden md:inline":"inline"),children:i})]})]}),l.exports.jsx("div",{className:"order-2 flex-shrink-0 sm:order-3 sm:ml-3",children:l.exports.jsx("button",{type:"button",className:p,"aria-label":"Dismiss",onClick:u,children:l.exports.jsx(st,{className:"h-5 w-5 text-white"})})})]})})})}const Cd=({delay:t}={})=>{const n=e.useCallback((e=>{Od.emit("show",{delay:t,...e})}),[t]),r=e.useCallback((e=>{Od.emit("close",{id:e})}),[]),i=e.useCallback(((e,t={})=>{n({...t,message:e,type:"success",id:Ad(8)})}),[n]),a=e.useCallback(((e,t={})=>{n({...t,message:e,type:"error",id:Ad(8)})}),[n]),o=e.useCallback(((e,t={})=>{n({...t,message:e,type:"warning",id:Ad(8)})}),[n]),s=e.useCallback(((e,t={})=>{n({...t,message:e,type:"info",id:Ad(8)})}),[n]);return e.useMemo((()=>({success:i,error:a,warning:o,info:s,show:n,close:r})),[i,a,o,s,n,r])},Rd=()=>{const[t,n]=e.useState(null);return e.useEffect((()=>{const e=e=>{n(e)},t=e=>{n(null)};return Od.on("show",e),Od.on("close",t),()=>{Od.off("show",e),Od.off("close",t)}}),[]),l.exports.jsx("div",{className:"fixed bottom-0 inset-x-0 z-50",children:t&&l.exports.jsx("div",{className:"w-full pb-2",children:l.exports.jsx(Id,{...t})})})};function jd(e,t){if(null===e)return void 0===t?null:t;try{return JSON.parse(e)}catch(e){return t??null}}const Dd={emerald:"#10b981",violet:"#8b5cf6",amber:"#f59e0b",indigo:"#6366f1",orange:"#f97316",cyan:"#06b6d4",fuchsia:"#d946ef",lime:"#84cc16",teal:"#14b8a6",red:"#ef4444",purple:"#a855f7",blue:"#3b82f6",pink:"#ec4899",rose:"#f43f5e",zinc:"#71717a"},Md=e=>{for(const[t,n]of Object.entries(Dd))if(n.toLowerCase()===e.toLowerCase())return t;return"zinc"},Fd=(e,t)=>{const n=Date.UTC(e.getFullYear(),e.getMonth(),e.getDate()),r=Date.UTC(t.getFullYear(),t.getMonth(),t.getDate());return Math.floor((r-n)/864e5)},Pd=(e,t=(()=>{}))=>n=>e(n).catch(t);var Ud=function(){return Ud=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},Ud.apply(this,arguments)},Vd=new Map,Bd=new Map,zd=!0,qd=!1;function Jd(e){return e.replace(/[\s,]+/g," ").trim()}function Gd(e){var t=new Set,n=[];return e.definitions.forEach((function(e){if("FragmentDefinition"===e.kind){var r=e.name.value,i=Jd((o=e.loc).source.body.substring(o.start,o.end)),a=Bd.get(r);a&&!a.has(i)?zd&&console.warn("Warning: fragment with name "+r+" already exists.\ngraphql-tag enforces all fragment names across your application to be unique; read more about\nthis in the docs: http://dev.apollodata.com/core/fragments.html#unique-names"):a||Bd.set(r,a=new Set),a.add(i),t.has(i)||(t.add(i),n.push(e))}else n.push(e);var o})),Ud(Ud({},e),{definitions:n})}function $d(e){var t=Jd(e);if(!Vd.has(t)){var n=ll(e,{experimentalFragmentVariables:qd,allowLegacyFragmentVariables:qd});if(!n||"Document"!==n.kind)throw new Error("Not a valid GraphQL document.");Vd.set(t,function(e){var t=new Set(e.definitions);t.forEach((function(e){e.loc&&delete e.loc,Object.keys(e).forEach((function(n){var r=e[n];r&&"object"===h(r)&&t.add(r)}))}));var n=e.loc;return n&&(delete n.startToken,delete n.endToken),e}(Gd(n)))}return Vd.get(t)}function Wd(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];"string"==typeof e&&(e=[e]);var r=e[0];return t.forEach((function(t,n){t&&"Document"===t.kind?r+=t.loc.source.body:r+=t,r+=e[n+1]})),$d(r)}var Hd,Kd=Wd,Qd=function(){Vd.clear(),Bd.clear()},Yd=function(){zd=!1},Xd=function(){qd=!0},Zd=function(){qd=!1};(Hd=Wd||(Wd={})).gql=Kd,Hd.resetCaches=Qd,Hd.disableFragmentWarnings=Yd,Hd.enableExperimentalFragmentVariables=Xd,Hd.disableExperimentalFragmentVariables=Zd,Wd.default=Wd;var ep,tp=Wd;!function(e){e.Instructor="Instructor",e.Student="Student"}(ep||(ep={}));const np=tp`
    fragment User on User {
  id
  email
  name
  bio
  avatarUrl
  profileColor
  isInstructor
  isStudent
}
    `,rp=tp`
    fragment Annotation on Annotation {
  id
  createdAt
  quote
  text
  target
  author {
    ...User
  }
  commentsCount
}
    `,ip=tp`
    fragment Comment on Comment {
  id
  annotationId
  text
  createdAt
  author {
    ...User
  }
}
    `,ap=tp`
    fragment Group on Group {
  id
  createdAt
  name
  token
}
    `,op=tp`
    fragment Lecture on Lecture {
  id
  createdAt
  name
  url
  owner {
    id
    name
  }
}
    `,sp=tp`
    fragment Message on Message {
  id
  createdAt
  updatedAt
  text
  author {
    ...User
  }
  parent {
    id
    text
  }
  groupId
}
    `,up=tp`
    mutation CreateAnnotation($quote: String!, $text: String!, $target: Json!) {
  createAnnotation(input: {quote: $quote, text: $text, target: $target}) {
    ...Annotation
  }
}
    ${rp}
${np}`;const lp=tp`
    mutation CreateComment($annotationId: ID!, $text: String!) {
  createComment(input: {annotation: $annotationId, text: $text}) {
    ...Comment
  }
}
    ${ip}
${np}`;const cp=tp`
    mutation DeleteAnnotation($id: ID!) {
  deleteAnnotation(id: $id) {
    success
  }
}
    `;const fp=tp`
    mutation Login($email: String!, $password: String!) {
  login(input: {email: $email, password: $password}) {
    accessToken
    accessTokenExpiresAt
    user {
      ...User
    }
  }
}
    ${np}`,dp=tp`
    mutation Logout {
  logout {
    success
  }
}
    `,pp=tp`
    mutation RefreshLogin {
  refreshLogin {
    __typename
    accessToken
    accessTokenExpiresAt
  }
}
    `;const hp=tp`
    mutation Register($name: String!, $email: String!, $bio: String, $password: String!, $color: String!, $avatar: Upload) {
  register(
    input: {name: $name, email: $email, bio: $bio, password: $password, color: $color, avatar: $avatar}
  ) {
    ...User
  }
}
    ${np}`;const mp=tp`
    mutation CreateGroup($name: String!) {
  createGroup(input: {name: $name}) {
    ...Group
  }
}
    ${ap}`;const vp=tp`
    mutation JoinGroup($token: String!) {
  joinGroup(token: $token) {
    ...Group
  }
}
    ${ap}`;const yp=tp`
    mutation LeaveGroup($id: ID!) {
  leaveGroup(id: $id) {
    id
  }
}
    `;const gp=tp`
    mutation UpdateGroup($id: ID!, $name: String) {
  updateGroup(id: $id, input: {name: $name}) {
    ...Group
  }
}
    ${ap}`;const xp=tp`
    mutation CreateLecture($name: String!, $url: String!) {
  createLecture(input: {name: $name, url: $url}) {
    ...Lecture
  }
}
    ${op}`;const bp=tp`
    mutation DeleteLecture {
  deleteLecture {
    success
  }
}
    `;const wp=tp`
    mutation JoinLecture($id: ID!, $url: String!) {
  joinLecture(lectureId: $id, url: $url) {
    ...Lecture
  }
}
    ${op}`;const kp=tp`
    mutation KickParticipant($userId: ID!) {
  kickParticipant(id: $userId) {
    success
  }
}
    `;const Np=tp`
    mutation LeaveLecture {
  leaveLecture {
    success
  }
}
    `;const Tp=tp`
    mutation UpdateLecture($name: String!) {
  updateLecture(input: {name: $name}) {
    ...Lecture
  }
}
    ${op}`;const _p=tp`
    mutation SendMessage($text: String!, $parentMessage: ID, $groupId: ID) {
  sendMessage(
    input: {text: $text, parentMessage: $parentMessage, group: $groupId}
  ) {
    ...Message
  }
}
    ${sp}
${np}`;const Ep=tp`
    mutation DeleteProfile {
  deleteProfile {
    success
  }
}
    `;const Sp=tp`
    mutation UpdateProfile($name: String, $bio: String, $color: String, $avatar: Upload, $deleteAvatar: Boolean) {
  updateProfile(
    input: {name: $name, bio: $bio, color: $color, avatar: $avatar, deleteAvatar: $deleteAvatar}
  ) {
    ...User
  }
}
    ${np}`;const Lp=tp`
    query Annotations {
  annotations {
    ...Annotation
  }
}
    ${rp}
${np}`;const Ap=tp`
    query Comments($annotationId: ID!) {
  comments(annotationId: $annotationId) {
    ...Comment
  }
}
    ${ip}
${np}`;const Op=tp`
    query Me {
  me {
    ...User
  }
}
    ${np}`,Ip=tp`
    query Group {
  group {
    ...Group
  }
}
    ${ap}`,Cp=tp`
    query GroupMembers($id: ID!) {
  groupMembers(id: $id) {
    ...User
  }
}
    ${np}`;tp`
    query Lecture {
  lecture {
    ...Lecture
  }
}
    ${op}`;const Rp=tp`
    query Participants {
  participants {
    ...User
  }
}
    ${np}`;const jp=tp`
    query Messages($groupId: ID, $before: String, $after: String, $last: Int, $first: Int) {
  messages(
    group: $groupId
    before: $before
    after: $after
    last: $last
    first: $first
  ) {
    totalCount
    pageInfo {
      startCursor
      hasNextPage
      hasPreviousPage
      endCursor
    }
    nodes {
      ...Message
    }
  }
}
    ${sp}
${np}`;const Dp=tp`
    subscription AnnotationWasCreated {
  annotationWasCreated {
    ...Annotation
  }
}
    ${rp}
${np}`;const Mp=tp`
    subscription AnnotationWasRemoved {
  annotationWasRemoved {
    id
  }
}
    `;const Fp=tp`
    subscription CommentWasAdded($annotationId: ID) {
  commentWasAdded(annotationId: $annotationId) {
    ...Comment
  }
}
    ${ip}
${np}`;function Pp(e={},t){return Ld({query:Fp,...e},t)}const Up=tp`
    subscription GroupMemberJoined($id: ID!) {
  groupMemberJoined(id: $id) {
    ...User
  }
}
    ${np}`;const Vp=tp`
    subscription GroupMemberLeft($id: ID!) {
  groupMemberLeft(id: $id) {
    ...User
  }
}
    ${np}`;const Bp=tp`
    subscription GroupWasUpdated($id: ID!) {
  groupWasUpdated(id: $id) {
    ...Group
  }
}
    ${ap}`;const zp=tp`
    subscription LectureWasUpdated {
  lectureWasUpdated {
    ...Lecture
  }
}
    ${op}`;const qp=tp`
    subscription ParticipantJoined {
  participantJoined {
    ...User
  }
}
    ${np}`;const Jp=tp`
    subscription ParticipantLeft {
  participantLeft {
    ...User
  }
}
    ${np}`;const Gp=tp`
    subscription MessageWasSent($groupId: ID) {
  messageWasSent(groupId: $groupId) {
    ...Message
  }
}
    ${sp}
${np}`;const $p=tp`
    subscription UserWasRemoved {
  userWasRemoved {
    id
  }
}
    `;const Wp=tp`
    subscription UserWasUpdated {
  userWasUpdated {
    ...User
  }
}
    ${np}`;const Hp="auth_token",Kp="auth_token_expires_at",Qp=()=>{const e=localStorage.getItem(Hp),t=localStorage.getItem(Kp);return e?{token:jd(e,e),tokenExpiresAt:new Date(jd(t,t))}:null},Yp=()=>{const t=go(Hp,{initializeWithValue:!0}),n=go(Kp,{initializeWithValue:!0}),r=e.useCallback((({token:e,tokenExpiresAt:r})=>{t.set(e),n.set(r.toISOString())}),[t,n]),i=e.useCallback((()=>{t.remove(),n.remove()}),[t,n]),a=e.useCallback((()=>{t.fetch(),n.fetch()}),[t,n]),o=e.useMemo((()=>t.value&&n.value?{token:t.value,tokenExpiresAt:new Date(n.value)}:null),[t.value,n.value]),[,s]=_d(pp),u=e.useCallback((async()=>{if(!o?.tokenExpiresAt||new Date<o.tokenExpiresAt)return;const{data:e}=await s({});if(!e)return;const{accessToken:t,accessTokenExpiresAt:n}=e.refreshLogin;r({token:t,tokenExpiresAt:n})}),[o,r,s]);return{auth:o,refresh:u,setAuth:r,removeAuth:i,refetchAuth:a}},Xp=e.createContext(null);function Zp({children:t,makeClient:n}){const{removeAuth:r}=Yp(),{error:i}=Cd(),a=e.useCallback((()=>{r(),s(n({onLogout:a})),i("You have been logged out for security reasons. Please sign back in to continue.")}),[n,r,i]),[o,s]=e.useState(n({onLogout:a})),u=e.useCallback((({lecture:e}={})=>{s(n({onLogout:a,lecture:e}))}),[n,a]),c=e.useMemo((()=>({client:o,resetClient:u})),[o,u]);return l.exports.jsx(Xp.Provider,{value:c,children:l.exports.jsx(bd,{value:o,children:t})})}const eh=()=>{const t=e.useContext(Xp);if(!t)throw new Error("useClient must be used within a ClientProvider");return t},th=e.createContext(null),nh=()=>{const t=e.useContext(th);if(!t)throw new Error("useAuth must be used within an AuthProvider");return t},rh=e.createContext(null),ih=()=>{const t=e.useContext(rh);if(!t)throw new Error("useLecture must be used within a LectureProvider");return t},ah=()=>{const e=Reveal.getConfig().socialPresence??{};return{...e,annotations:e.annotations??!0,chat:e.chat??!0,cursors:e.cursors??!0,groups:e.groups??!0}},oh=(t,n)=>{const r=go(t,{initializeWithValue:!0,defaultValue:n,parse:e=>jd(e),stringify:e=>JSON.stringify(e)}),i=e.useRef(!1);return e.useEffect((()=>{i.current||(localStorage.getItem(t)||(localStorage.setItem(t,n.toString()),r.fetch()),i.current=!0)}),[n,t]),[r.value,r.set]},sh=[{id:"chat",name:"Chat",icon:Fe,activeIcon:Y,enabled:()=>ah().chat},{id:"group",name:"Group",icon:Ze,activeIcon:Ne,enabled:()=>ah().groups},{id:"annotation",name:"Annotation",icon:We,activeIcon:me,enabled:()=>ah().annotations},{id:"participants",name:"Participants",icon:tt,activeIcon:Se,enabled:()=>!0},{id:"profile",name:"Profile",icon:Ye,activeIcon:we,enabled:()=>!0},{id:"settings",name:"Settings",icon:rt,activeIcon:Ae,enabled:()=>!0},{id:"lecture-info",name:"Lecture Info",icon:Ge,activeIcon:ae,enabled:()=>!0}],uh=e.createContext(null),lh=()=>{const t=e.useContext(uh);if(!t)throw new Error("Controls context not found");return t};function ch(e,t){try{const n=t.nodeValue?.length??t.childNodes.length;return e.comparePoint(t,0)<=0&&e.comparePoint(t,n)>=0}catch(e){return!1}}function fh(e,t,n){const r=function(e){if(e.collapsed)return[];let t=e.commonAncestorContainer;if(t&&t.nodeType!==Node.ELEMENT_NODE&&(t=t.parentElement),!t)return[];const n=[],r=t.ownerDocument.createNodeIterator(t,NodeFilter.SHOW_TEXT);let i;for(;i=r.nextNode();){if(!ch(e,i))continue;const t=i;t===e.startContainer&&e.startOffset>0?t.splitText(e.startOffset):(t===e.endContainer&&e.endOffset<t.data.length&&t.splitText(e.endOffset),n.push(t))}return n}(e);let i=[],a=null,o=null;r.forEach((e=>{a&&a.nextSibling===e?o.push(e):(o=[e],i.push(o)),a=e}));const s=/^\s*$/;i=i.filter((e=>e.some((e=>!s.test(e.data)))));const u=[];return i.forEach((e=>{const r=document.createElement("annotation-highlight");r.className=lt("annotation-highlight",n),r.dataset.annotationId=t;e[0].parentNode.replaceChild(r,e[0]),e.forEach((e=>r.appendChild(e))),u.push(r)})),u}function dh(e,t){const n=e.parentNode;t.forEach((t=>n.insertBefore(t,e))),e.remove()}function ph(e){for(const t of e){if(t.parentNode){dh(t,Array.from(t.childNodes))}t.svgHighlight&&t.svgHighlight.remove()}}function hh(e){return e.split("").reverse().join("")}function mh(e){return(e|-e)>>31&1}function vh(e,t,n,r){var i=e.P[n],a=e.M[n],o=r>>>31,s=t[n]|o,u=s|a,l=(s&i)+i^i|s,c=a|~(l|i),f=i&l,d=mh(c&e.lastRowMask[n])-mh(f&e.lastRowMask[n]);return c<<=1,f<<=1,i=(f|=o)|~(u|(c|=mh(r)-o)),a=c&u,e.P[n]=i,e.M[n]=a,d}function yh(e,t,n){if(0===t.length)return[];n=Math.min(n,t.length);var r=[],i=32,a=Math.ceil(t.length/i)-1,o={P:new Uint32Array(a+1),M:new Uint32Array(a+1),lastRowMask:new Uint32Array(a+1)};o.lastRowMask.fill(1<<31),o.lastRowMask[a]=1<<(t.length-1)%i;for(var s=new Uint32Array(a+1),u=new Map,l=[],c=0;c<256;c++)l.push(s);for(var f=0;f<t.length;f+=1){var d=t.charCodeAt(f);if(!u.has(d)){var p=new Uint32Array(a+1);u.set(d,p),d<l.length&&(l[d]=p);for(var h=0;h<=a;h+=1){p[h]=0;for(var m=0;m<i;m+=1){var v=h*i+m;if(!(v>=t.length))t.charCodeAt(v)===d&&(p[h]|=1<<m)}}}}for(var y=Math.max(0,Math.ceil(n/i)-1),g=new Uint32Array(a+1),x=0;x<=y;x+=1)g[x]=(x+1)*i;g[a]=t.length;for(var b=0;b<=y;b+=1)o.P[b]=-1,o.M[b]=0;for(var w=0;w<e.length;w+=1){var k=e.charCodeAt(w),N=void 0;k<l.length?N=l[k]:void 0===(N=u.get(k))&&(N=s);for(var T=0,_=0;_<=y;_+=1)T=vh(o,N,_,T),g[_]+=T;if(g[y]-T<=n&&y<a&&(1&N[y+1]||T<0)){y+=1,o.P[y]=-1,o.M[y]=0;var E=void 0;if(y===a){var S=t.length%i;E=0===S?i:S}else E=i;g[y]=g[y-1]+E-T+vh(o,N,y,T)}else for(;y>0&&g[y]>=n+i;)y-=1;y===a&&g[y]<=n&&(g[y]<n&&r.splice(0,r.length),r.push({start:-1,end:w+1,errors:g[y]}),n=g[y])}return r}function gh(e,t,n){return function(e,t,n){var r=hh(t);return n.map((function(n){var i=Math.max(0,n.end-t.length-n.errors),a=yh(hh(e.slice(i,n.end)),r,n.errors).reduce((function(e,t){return n.end-t.end<e?n.end-t.end:e}),n.end);return{start:a,end:n.end,errors:n.errors}}))}(e,t,yh(e,t,n))}function xh(e,t,n){let r=0;const i=[];for(;-1!==r;)r=e.indexOf(t,r),-1!==r&&(i.push({start:r,end:r+t.length,errors:0}),r+=1);return i.length>0?i:gh(e,t,n)}function bh(e,t){if(0===t.length||0===e.length)return 0;return 1-xh(e,t,t.length)[0].errors/t.length}function wh(e){switch(e.nodeType){case Node.ELEMENT_NODE:case Node.TEXT_NODE:return e.textContent.length;default:return 0}}function kh(e){let t=e.previousSibling,n=0;for(;t;)n+=wh(t),t=t.previousSibling;return n}function Nh(e,...t){let n=t.shift();const r=e.ownerDocument.createNodeIterator(e,NodeFilter.SHOW_TEXT),i=[];let a,o=r.nextNode(),s=0;for(;void 0!==n&&o;)a=o,s+a.data.length>n?(i.push({node:a,offset:n-s}),n=t.shift()):(o=r.nextNode(),s+=a.data.length);for(;void 0!==n&&a&&s===n;)i.push({node:a,offset:a.data.length}),n=t.shift();if(void 0!==n)throw new RangeError("Offset exceeds text length");return i}class Th{element;offset;constructor(e,t){if(t<0)throw new Error("Offset is invalid");this.element=e,this.offset=t}relativeTo(e){if(!e.contains(this.element))throw new Error("Parent is not an ancestor of current element");let t=this.element,n=this.offset;for(;t!==e;)n+=kh(t),t=t.parentElement;return new Th(t,n)}resolve(e={}){try{return Nh(this.element,this.offset)[0]}catch(t){if(0===this.offset&&void 0!==e.direction){const n=document.createTreeWalker(this.element.getRootNode(),NodeFilter.SHOW_TEXT);n.currentNode=this.element;const r=1===e.direction,i=r?n.nextNode():n.previousNode();if(!i)throw t;return{node:i,offset:r?0:i.data.length}}throw t}}static fromCharOffset(e,t){switch(e.nodeType){case Node.TEXT_NODE:return Th.fromPoint(e,t);case Node.ELEMENT_NODE:return new Th(e,t);default:throw new Error("Node is not an element or text node")}}static fromPoint(e,t){switch(e.nodeType){case Node.TEXT_NODE:{if(t<0||t>e.data.length)throw new Error("Text node offset is out of range");if(!e.parentElement)throw new Error("Text node has no parent");const n=kh(e)+t;return new Th(e.parentElement,n)}case Node.ELEMENT_NODE:{if(t<0||t>e.childNodes.length)throw new Error("Child node offset is out of range");let n=0;for(let r=0;r<t;r++)n+=wh(e.childNodes[r]);return new Th(e,n)}default:throw new Error("Point is not in an element or text node")}}}class _h{start;end;constructor(e,t){this.start=e,this.end=t}relativeTo(e){return new _h(this.start.relativeTo(e),this.end.relativeTo(e))}toRange(){let e,t;this.start.element===this.end.element&&this.start.offset<=this.end.offset?[e,t]=Nh(this.start.element,this.start.offset,this.end.offset):(e=this.start.resolve({direction:1}),t=this.end.resolve({direction:2}));const n=new Range;return n.setStart(e.node,e.offset),n.setEnd(t.node,t.offset),n}static fromRange(e){const t=Th.fromPoint(e.startContainer,e.startOffset),n=Th.fromPoint(e.endContainer,e.endOffset);return new _h(t,n)}static fromOffsets(e,t,n){return new _h(new Th(e,t),new Th(e,n))}}function Eh(e){const t=function(e){const t=e.nodeName.toLowerCase();let n=t;return"#text"===t&&(n="text()"),n}(e),n=function(e){let t=0,n=e;for(;n;)n.nodeName===e.nodeName&&(t+=1),n=n.previousSibling;return t}(e);return`${t}[${n}]`}function Sh(e,t){let n="",r=e;for(;r!==t;){if(!r)throw new Error("Node is not a descendant of root");n=`${Eh(r)}/${n}`,r=r.parentNode}return n=`/${n}`,n=n.replace(/\/$/,""),n}function Lh(e,t,n){t=t.toUpperCase();let r=-1;for(let i=0;i<e.children.length;i++){const a=e.children[i];if(a.nodeName.toUpperCase()===t&&(++r,r===n))return a}return null}function Ah(e,t=document.body){try{return function(e,t){if(null===e.match(/^(\/[A-Za-z0-9-]+(\[[0-9]+\])?)+$/))throw new Error("Expression is not a simple XPath");const n=e.split("/");let r=t;n.shift();for(const e of n){let t,n;const i=e.indexOf("[");if(-1!==i){t=e.slice(0,i);const r=e.slice(i+1,e.indexOf("]"));if(n=parseInt(r)-1,n<0)return null}else t=e,n=0;const a=Lh(r,t,n);if(!a)return null;r=a}return r}(e,t)}catch(n){return document.evaluate(`.${e}`,t,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue}}class Oh{root;range;constructor(e,t){this.root=e,this.range=t}static fromRange(e,t){return new Oh(e,t)}static fromSelector(e,t){const n=Ah(t.startContainer,e);if(!n)throw new Error("Failed to resolve startContainer XPath");const r=Ah(t.endContainer,e);if(!r)throw new Error("Failed to resolve endContainer XPath");const i=Th.fromCharOffset(n,t.startOffset),a=Th.fromCharOffset(r,t.endOffset),o=new _h(i,a).toRange();return new Oh(e,o)}toRange(){return this.range}toSelector(){const e=_h.fromRange(this.range).toRange(),t=_h.fromRange(e),n=Sh(t.start.element,this.root),r=Sh(t.end.element,this.root);return{type:"RangeSelector",startContainer:n,startOffset:t.start.offset,endContainer:r,endOffset:t.end.offset}}}class Ih{root;start;end;constructor(e,t,n){this.root=e,this.start=t,this.end=n}static fromRange(e,t){const n=_h.fromRange(t).relativeTo(e);return new Ih(e,n.start.offset,n.end.offset)}static fromSelector(e,t){return new Ih(e,t.start,t.end)}toSelector(){return{type:"TextPositionSelector",start:this.start,end:this.end}}toRange(){return _h.fromOffsets(this.root,this.start,this.end).toRange()}}class Ch{root;exact;context;constructor(e,t,n={}){this.root=e,this.exact=t,this.context=n}static fromRange(e,t){const n=e.textContent,r=_h.fromRange(t).relativeTo(e),i=r.start.offset,a=r.end.offset;return new Ch(e,n.slice(i,a),{prefix:n.slice(Math.max(0,i-32),i),suffix:n.slice(a,Math.min(n.length,a+32))})}static fromSelector(e,t){const{prefix:n,suffix:r}=t;return new Ch(e,t.exact,{prefix:n,suffix:r})}toSelector(){return{type:"TextQuoteSelector",exact:this.exact,prefix:this.context.prefix,suffix:this.context.suffix}}toRange(e={}){return this.toPositionAnchor(e).toRange()}toPositionAnchor(e={}){const t=function(e,t,n={}){if(0===t.length)return null;const r=Math.min(256,t.length/2),i=xh(e,t,r);if(0===i.length)return null;const a=r=>{const i=1-r.errors/t.length,a=n.prefix?bh(e.slice(Math.max(0,r.start-n.prefix.length),r.start),n.prefix):1,o=n.suffix?bh(e.slice(r.end,r.end+n.suffix.length),n.suffix):1;let s=1;return"number"==typeof n.hint&&(s=1-Math.abs(r.start-n.hint)/e.length),(50*i+20*a+20*o+2*s)/92},o=i.map((e=>({start:e.start,end:e.end,score:a(e),errors:e.errors})));return o.sort(((e,t)=>t.score-e.score)),o[0]}(this.root.textContent,this.exact,{...this.context,hint:e.hint});if(!t)throw new Error("Quote not found");return new Ih(this.root,t.start,t.end)}}async function Rh(e,t={}){return e.toRange(t)}async function jh(e){const t=await Promise.all(e.map((async e=>{if(!e.selectors.some((e=>"TextQuoteSelector"===e.type)))return{annotation:e};const t=await function(e,t,n={}){let r=null,i=null,a=null;for(const e of t)switch(e.type){case"TextPositionSelector":r=e,n.hint=r.start;break;case"TextQuoteSelector":i=e;break;case"RangeSelector":a=e}const o=e=>{if(i?.exact&&e.toString()!==i.exact)throw new Error("quote mismatch");return e};let s=Promise.reject(new Error("unable to anchor"));if(a){const t=a;s=s.catch((()=>Rh(Oh.fromSelector(e,t),n).then(o)))}if(r){const t=r;s=s.catch((()=>Rh(Ih.fromSelector(e,t),n).then(o)))}if(i){const t=i;s=s.catch((()=>Rh(Ch.fromSelector(e,t),n)))}return s}(document.body,e.selectors);return{annotation:e,range:_h.fromRange(t)}})));return t.forEach((e=>{const t=function(e){if(!e.range)return null;try{return e.range.toRange()}catch{return null}}(e);if(!t)return;const n=fh(t,e.annotation.tag);e.highlights=n})),t}function Dh(e){for(const t of e)t.highlights&&ph(t.highlights)}const Mh=e.createContext(null);const Fh=()=>{const t=e.useContext(Mh);if(!t)throw new Error("useAnnotations must be used within a AnnotationsProvider");return t};function Ph({range:t,...n}){const r=t?.toString()||"",{register:i,handleSubmit:a,formState:{errors:o,isSubmitting:s}}=eu({defaultValues:{comment:""},mode:"onBlur",reValidateMode:"onChange",criteriaMode:"firstError"}),[,{addAnnotation:u}]=Fh(),c=To((async e=>{const i=function(e,t){const n=[Oh,Ih,Ch],r=[];for(const i of n)try{const n=i.fromRange(e,t);r.push(n.toSelector())}catch(e){continue}return r}(document.body,t);await u({text:e.comment,quote:r,target:i}),n.onClose(!1)})),f=e.useRef(null),d=To((e=>{"Enter"===e.key&&e.metaKey&&(e.preventDefault(),f.current.submit())}));return t?l.exports.jsxs(iu,{...n,size:"md",stretch:!0,children:[l.exports.jsx(iu.Title,{as:"h3",className:"font-bold text-gray-900 text-lg",children:"Add Annotation"}),l.exports.jsxs(iu.Content,{children:[l.exports.jsx("blockquote",{className:"mb-6 p-2 pr-4 border-l-4 border-solid border-primary-500 bg-primary-300 bg-opacity-50 rounded",children:l.exports.jsxs("p",{className:"text-gray-700 italic",children:['"',r,'"']})}),l.exports.jsxs("form",{ref:f,onSubmit:Pd(a(c)),className:"space-y-4",children:[l.exports.jsx(lu,{label:"Your comment",rows:5,className:"resize-none",...i("comment",{required:!0}),error:o.comment?.message,onKeyDown:d}),l.exports.jsx(nu,{type:"submit",loading:s,className:"w-full",children:"Annotate"})]})]})]}):null}function Uh(){const[t,n]=e.useState(!1),[r,i]=e.useState(null),a=To((t=>{i(t),e.startTransition((()=>{n(!0)}))}));return l.exports.jsxs(l.exports.Fragment,{children:[l.exports.jsx(Eo,{onClick:a}),l.exports.jsx(Ph,{range:r,open:t,onClose:n})]})}const Vh=e.forwardRef((function({as:t,size:n="sm",color:r="primary",disabled:i=!1,icon:a,className:o,...s},u){return e.createElement(t||"button",{...s,ref:u,disabled:i,className:lt("inline-flex items-center rounded-full border border-transparent focus:outline-none transition-colors duration-200 ease-in-out",{"text-white bg-primary-500 hover:bg-primary-700":"primary"===r&&!i,"text-white bg-primary-300 cursor-not-allowed":"primary"===r&&i,"text-primary-700 bg-primary-100 hover:bg-primary-200":"secondary"===r&&!i,"text-primary-400 bg-blueGray-100 cursor-not-allowed":"secondary"===r&&i,"text-red-50 bg-red-500 hover:bg-red-700":"red"===r&&!i,"text-red-50 bg-red-300 cursor-not-allowed":"red"===r&&i,"text-green-50 bg-green-500 hover:bg-green-700":"green"===r&&!i,"text-green-50 bg-green-100 cursor-not-allowed":"green"===r&&i,"text-zinc-500 bg-transparent hover:bg-zinc-100 hover:text-zinc-700":"transparent"===r&&!i,"text-zinc-500 bg-transparent cursor-not-allowed":"transparent"===r&&i},{"p-1":"xs"===n||"2xs"===n,"p-1.5":"sm"===n,"p-2":"md"===n||"lg"===n,"p-3":"xl"===n},o)},l.exports.jsx(a,{className:"xs"===n||"sm"===n||"md"===n?"h-5 w-5":"2xs"===n?"h-4 w-4":"h-6 w-6","aria-hidden":"true"}))}));function Bh({children:e,className:t,...n}){return l.exports.jsx("span",{...n,className:lt(t,"absolute right-0 bottom-0 rounded-full text-white bg-red-400 font-medium text-xs inline-flex items-center justify-center w-4 h-4"),children:e})}var zh={exports:{}};!function(e,t){(function(){var n,r="Expected a function",i="__lodash_hash_undefined__",a="__lodash_placeholder__",o=16,s=32,l=64,c=128,f=256,d=1/0,p=9007199254740991,m=NaN,v=4294967295,y=[["ary",c],["bind",1],["bindKey",2],["curry",8],["curryRight",o],["flip",512],["partial",s],["partialRight",l],["rearg",f]],g="[object Arguments]",x="[object Array]",b="[object Boolean]",w="[object Date]",k="[object Error]",N="[object Function]",T="[object GeneratorFunction]",_="[object Map]",E="[object Number]",S="[object Object]",L="[object Promise]",A="[object RegExp]",O="[object Set]",I="[object String]",C="[object Symbol]",R="[object WeakMap]",j="[object ArrayBuffer]",D="[object DataView]",M="[object Float32Array]",F="[object Float64Array]",P="[object Int8Array]",U="[object Int16Array]",V="[object Int32Array]",B="[object Uint8Array]",z="[object Uint8ClampedArray]",q="[object Uint16Array]",J="[object Uint32Array]",G=/\b__p \+= '';/g,$=/\b(__p \+=) '' \+/g,W=/(__e\(.*?\)|\b__t\)) \+\n'';/g,H=/&(?:amp|lt|gt|quot|#39);/g,K=/[&<>"']/g,Q=RegExp(H.source),Y=RegExp(K.source),X=/<%-([\s\S]+?)%>/g,Z=/<%([\s\S]+?)%>/g,ee=/<%=([\s\S]+?)%>/g,te=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,ne=/^\w*$/,re=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,ie=/[\\^$.*+?()[\]{}|]/g,ae=RegExp(ie.source),oe=/^\s+/,se=/\s/,ue=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,le=/\{\n\/\* \[wrapped with (.+)\] \*/,ce=/,? & /,fe=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,de=/[()=,{}\[\]\/\s]/,pe=/\\(\\)?/g,he=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,me=/\w*$/,ve=/^[-+]0x[0-9a-f]+$/i,ye=/^0b[01]+$/i,ge=/^\[object .+?Constructor\]$/,xe=/^0o[0-7]+$/i,be=/^(?:0|[1-9]\d*)$/,we=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,ke=/($^)/,Ne=/['\n\r\u2028\u2029\\]/g,Te="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",_e="\\u2700-\\u27bf",Ee="a-z\\xdf-\\xf6\\xf8-\\xff",Se="A-Z\\xc0-\\xd6\\xd8-\\xde",Le="\\ufe0e\\ufe0f",Ae="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",Oe="['’]",Ie="[\\ud800-\\udfff]",Ce="["+Ae+"]",Re="["+Te+"]",je="\\d+",De="[\\u2700-\\u27bf]",Me="["+Ee+"]",Fe="[^\\ud800-\\udfff"+Ae+je+_e+Ee+Se+"]",Pe="\\ud83c[\\udffb-\\udfff]",Ue="[^\\ud800-\\udfff]",Ve="(?:\\ud83c[\\udde6-\\uddff]){2}",Be="[\\ud800-\\udbff][\\udc00-\\udfff]",ze="["+Se+"]",qe="(?:"+Me+"|"+Fe+")",Je="(?:"+ze+"|"+Fe+")",Ge="(?:['’](?:d|ll|m|re|s|t|ve))?",$e="(?:['’](?:D|LL|M|RE|S|T|VE))?",We="(?:"+Re+"|"+Pe+")"+"?",He="[\\ufe0e\\ufe0f]?",Ke=He+We+("(?:\\u200d(?:"+[Ue,Ve,Be].join("|")+")"+He+We+")*"),Qe="(?:"+[De,Ve,Be].join("|")+")"+Ke,Ye="(?:"+[Ue+Re+"?",Re,Ve,Be,Ie].join("|")+")",Xe=RegExp(Oe,"g"),Ze=RegExp(Re,"g"),et=RegExp(Pe+"(?="+Pe+")|"+Ye+Ke,"g"),tt=RegExp([ze+"?"+Me+"+"+Ge+"(?="+[Ce,ze,"$"].join("|")+")",Je+"+"+$e+"(?="+[Ce,ze+qe,"$"].join("|")+")",ze+"?"+qe+"+"+Ge,ze+"+"+$e,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",je,Qe].join("|"),"g"),nt=RegExp("[\\u200d\\ud800-\\udfff"+Te+Le+"]"),rt=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,it=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],at=-1,ot={};ot[M]=ot[F]=ot[P]=ot[U]=ot[V]=ot[B]=ot[z]=ot[q]=ot[J]=!0,ot[g]=ot[x]=ot[j]=ot[b]=ot[D]=ot[w]=ot[k]=ot[N]=ot[_]=ot[E]=ot[S]=ot[A]=ot[O]=ot[I]=ot[R]=!1;var st={};st[g]=st[x]=st[j]=st[D]=st[b]=st[w]=st[M]=st[F]=st[P]=st[U]=st[V]=st[_]=st[E]=st[S]=st[A]=st[O]=st[I]=st[C]=st[B]=st[z]=st[q]=st[J]=!0,st[k]=st[N]=st[R]=!1;var ut={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},lt=parseFloat,ct=parseInt,ft="object"==h(u)&&u&&u.Object===Object&&u,dt="object"==("undefined"==typeof self?"undefined":h(self))&&self&&self.Object===Object&&self,pt=ft||dt||Function("return this")(),ht=t&&!t.nodeType&&t,mt=ht&&e&&!e.nodeType&&e,vt=mt&&mt.exports===ht,yt=vt&&ft.process,gt=function(){try{var e=mt&&mt.require&&mt.require("util").types;return e||yt&&yt.binding&&yt.binding("util")}catch(e){}}(),xt=gt&&gt.isArrayBuffer,bt=gt&&gt.isDate,wt=gt&&gt.isMap,kt=gt&&gt.isRegExp,Nt=gt&&gt.isSet,Tt=gt&&gt.isTypedArray;function _t(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}function Et(e,t,n,r){for(var i=-1,a=null==e?0:e.length;++i<a;){var o=e[i];t(r,o,n(o),e)}return r}function St(e,t){for(var n=-1,r=null==e?0:e.length;++n<r&&!1!==t(e[n],n,e););return e}function Lt(e,t){for(var n=null==e?0:e.length;n--&&!1!==t(e[n],n,e););return e}function At(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(!t(e[n],n,e))return!1;return!0}function Ot(e,t){for(var n=-1,r=null==e?0:e.length,i=0,a=[];++n<r;){var o=e[n];t(o,n,e)&&(a[i++]=o)}return a}function It(e,t){return!!(null==e?0:e.length)&&Bt(e,t,0)>-1}function Ct(e,t,n){for(var r=-1,i=null==e?0:e.length;++r<i;)if(n(t,e[r]))return!0;return!1}function Rt(e,t){for(var n=-1,r=null==e?0:e.length,i=Array(r);++n<r;)i[n]=t(e[n],n,e);return i}function jt(e,t){for(var n=-1,r=t.length,i=e.length;++n<r;)e[i+n]=t[n];return e}function Dt(e,t,n,r){var i=-1,a=null==e?0:e.length;for(r&&a&&(n=e[++i]);++i<a;)n=t(n,e[i],i,e);return n}function Mt(e,t,n,r){var i=null==e?0:e.length;for(r&&i&&(n=e[--i]);i--;)n=t(n,e[i],i,e);return n}function Ft(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}var Pt=Gt("length");function Ut(e,t,n){var r;return n(e,(function(e,n,i){if(t(e,n,i))return r=n,!1})),r}function Vt(e,t,n,r){for(var i=e.length,a=n+(r?1:-1);r?a--:++a<i;)if(t(e[a],a,e))return a;return-1}function Bt(e,t,n){return t==t?function(e,t,n){var r=n-1,i=e.length;for(;++r<i;)if(e[r]===t)return r;return-1}(e,t,n):Vt(e,qt,n)}function zt(e,t,n,r){for(var i=n-1,a=e.length;++i<a;)if(r(e[i],t))return i;return-1}function qt(e){return e!=e}function Jt(e,t){var n=null==e?0:e.length;return n?Ht(e,t)/n:m}function Gt(e){return function(t){return null==t?n:t[e]}}function $t(e){return function(t){return null==e?n:e[t]}}function Wt(e,t,n,r,i){return i(e,(function(e,i,a){n=r?(r=!1,e):t(n,e,i,a)})),n}function Ht(e,t){for(var r,i=-1,a=e.length;++i<a;){var o=t(e[i]);o!==n&&(r=r===n?o:r+o)}return r}function Kt(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}function Qt(e){return e?e.slice(0,mn(e)+1).replace(oe,""):e}function Yt(e){return function(t){return e(t)}}function Xt(e,t){return Rt(t,(function(t){return e[t]}))}function Zt(e,t){return e.has(t)}function en(e,t){for(var n=-1,r=e.length;++n<r&&Bt(t,e[n],0)>-1;);return n}function tn(e,t){for(var n=e.length;n--&&Bt(t,e[n],0)>-1;);return n}function nn(e,t){for(var n=e.length,r=0;n--;)e[n]===t&&++r;return r}var rn=$t({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),an=$t({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function on(e){return"\\"+ut[e]}function sn(e){return nt.test(e)}function un(e){var t=-1,n=Array(e.size);return e.forEach((function(e,r){n[++t]=[r,e]})),n}function ln(e,t){return function(n){return e(t(n))}}function cn(e,t){for(var n=-1,r=e.length,i=0,o=[];++n<r;){var s=e[n];s!==t&&s!==a||(e[n]=a,o[i++]=n)}return o}function fn(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}function dn(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=[e,e]})),n}function pn(e){return sn(e)?function(e){var t=et.lastIndex=0;for(;et.test(e);)++t;return t}(e):Pt(e)}function hn(e){return sn(e)?function(e){return e.match(et)||[]}(e):function(e){return e.split("")}(e)}function mn(e){for(var t=e.length;t--&&se.test(e.charAt(t)););return t}var vn=$t({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var yn=function e(t){var u,se=(t=null==t?pt:yn.defaults(pt.Object(),t,yn.pick(pt,it))).Array,Te=t.Date,_e=t.Error,Ee=t.Function,Se=t.Math,Le=t.Object,Ae=t.RegExp,Oe=t.String,Ie=t.TypeError,Ce=se.prototype,Re=Ee.prototype,je=Le.prototype,De=t["__core-js_shared__"],Me=Re.toString,Fe=je.hasOwnProperty,Pe=0,Ue=(u=/[^.]+$/.exec(De&&De.keys&&De.keys.IE_PROTO||""))?"Symbol(src)_1."+u:"",Ve=je.toString,Be=Me.call(Le),ze=pt._,qe=Ae("^"+Me.call(Fe).replace(ie,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Je=vt?t.Buffer:n,Ge=t.Symbol,$e=t.Uint8Array,We=Je?Je.allocUnsafe:n,He=ln(Le.getPrototypeOf,Le),Ke=Le.create,Qe=je.propertyIsEnumerable,Ye=Ce.splice,et=Ge?Ge.isConcatSpreadable:n,nt=Ge?Ge.iterator:n,ut=Ge?Ge.toStringTag:n,ft=function(){try{var e=ha(Le,"defineProperty");return e({},"",{}),e}catch(e){}}(),dt=t.clearTimeout!==pt.clearTimeout&&t.clearTimeout,ht=Te&&Te.now!==pt.Date.now&&Te.now,mt=t.setTimeout!==pt.setTimeout&&t.setTimeout,yt=Se.ceil,gt=Se.floor,Pt=Le.getOwnPropertySymbols,$t=Je?Je.isBuffer:n,gn=t.isFinite,xn=Ce.join,bn=ln(Le.keys,Le),wn=Se.max,kn=Se.min,Nn=Te.now,Tn=t.parseInt,_n=Se.random,En=Ce.reverse,Sn=ha(t,"DataView"),Ln=ha(t,"Map"),An=ha(t,"Promise"),On=ha(t,"Set"),In=ha(t,"WeakMap"),Cn=ha(Le,"create"),Rn=In&&new In,jn={},Dn=Ba(Sn),Mn=Ba(Ln),Fn=Ba(An),Pn=Ba(On),Un=Ba(In),Vn=Ge?Ge.prototype:n,Bn=Vn?Vn.valueOf:n,zn=Vn?Vn.toString:n;function qn(e){if(as(e)&&!Ho(e)&&!(e instanceof Wn)){if(e instanceof $n)return e;if(Fe.call(e,"__wrapped__"))return za(e)}return new $n(e)}var Jn=function(){function e(){}return function(t){if(!is(t))return{};if(Ke)return Ke(t);e.prototype=t;var r=new e;return e.prototype=n,r}}();function Gn(){}function $n(e,t){this.__wrapped__=e,this.__actions__=[],this.__chain__=!!t,this.__index__=0,this.__values__=n}function Wn(e){this.__wrapped__=e,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=v,this.__views__=[]}function Hn(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Kn(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Qn(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Yn(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new Qn;++t<n;)this.add(e[t])}function Xn(e){var t=this.__data__=new Kn(e);this.size=t.size}function Zn(e,t){var n=Ho(e),r=!n&&Wo(e),i=!n&&!r&&Xo(e),a=!n&&!r&&!i&&ps(e),o=n||r||i||a,s=o?Kt(e.length,Oe):[],u=s.length;for(var l in e)!t&&!Fe.call(e,l)||o&&("length"==l||i&&("offset"==l||"parent"==l)||a&&("buffer"==l||"byteLength"==l||"byteOffset"==l)||wa(l,u))||s.push(l);return s}function er(e){var t=e.length;return t?e[Yr(0,t-1)]:n}function tr(e,t){return Pa(Ci(e),cr(t,0,e.length))}function nr(e){return Pa(Ci(e))}function rr(e,t,r){(r!==n&&!Jo(e[t],r)||r===n&&!(t in e))&&ur(e,t,r)}function ir(e,t,r){var i=e[t];Fe.call(e,t)&&Jo(i,r)&&(r!==n||t in e)||ur(e,t,r)}function ar(e,t){for(var n=e.length;n--;)if(Jo(e[n][0],t))return n;return-1}function or(e,t,n,r){return mr(e,(function(e,i,a){t(r,e,n(e),a)})),r}function sr(e,t){return e&&Ri(t,Ds(t),e)}function ur(e,t,n){"__proto__"==t&&ft?ft(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}function lr(e,t){for(var r=-1,i=t.length,a=se(i),o=null==e;++r<i;)a[r]=o?n:Os(e,t[r]);return a}function cr(e,t,r){return e==e&&(r!==n&&(e=e<=r?e:r),t!==n&&(e=e>=t?e:t)),e}function fr(e,t,r,i,a,o){var s,u=1&t,l=2&t,c=4&t;if(r&&(s=a?r(e,i,a,o):r(e)),s!==n)return s;if(!is(e))return e;var f=Ho(e);if(f){if(s=function(e){var t=e.length,n=new e.constructor(t);t&&"string"==typeof e[0]&&Fe.call(e,"index")&&(n.index=e.index,n.input=e.input);return n}(e),!u)return Ci(e,s)}else{var d=ya(e),p=d==N||d==T;if(Xo(e))return Ei(e,u);if(d==S||d==g||p&&!a){if(s=l||p?{}:xa(e),!u)return l?function(e,t){return Ri(e,va(e),t)}(e,function(e,t){return e&&Ri(t,Ms(t),e)}(s,e)):function(e,t){return Ri(e,ma(e),t)}(e,sr(s,e))}else{if(!st[d])return a?e:{};s=function(e,t,n){var r=e.constructor;switch(t){case j:return Si(e);case b:case w:return new r(+e);case D:return function(e,t){var n=t?Si(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}(e,n);case M:case F:case P:case U:case V:case B:case z:case q:case J:return Li(e,n);case _:return new r;case E:case I:return new r(e);case A:return function(e){var t=new e.constructor(e.source,me.exec(e));return t.lastIndex=e.lastIndex,t}(e);case O:return new r;case C:return i=e,Bn?Le(Bn.call(i)):{}}var i}(e,d,u)}}o||(o=new Xn);var h=o.get(e);if(h)return h;o.set(e,s),cs(e)?e.forEach((function(n){s.add(fr(n,t,r,n,e,o))})):os(e)&&e.forEach((function(n,i){s.set(i,fr(n,t,r,i,e,o))}));var m=f?n:(c?l?sa:oa:l?Ms:Ds)(e);return St(m||e,(function(n,i){m&&(n=e[i=n]),ir(s,i,fr(n,t,r,i,e,o))})),s}function dr(e,t,r){var i=r.length;if(null==e)return!i;for(e=Le(e);i--;){var a=r[i],o=t[a],s=e[a];if(s===n&&!(a in e)||!o(s))return!1}return!0}function pr(e,t,i){if("function"!=typeof e)throw new Ie(r);return ja((function(){e.apply(n,i)}),t)}function hr(e,t,n,r){var i=-1,a=It,o=!0,s=e.length,u=[],l=t.length;if(!s)return u;n&&(t=Rt(t,Yt(n))),r?(a=Ct,o=!1):t.length>=200&&(a=Zt,o=!1,t=new Yn(t));e:for(;++i<s;){var c=e[i],f=null==n?c:n(c);if(c=r||0!==c?c:0,o&&f==f){for(var d=l;d--;)if(t[d]===f)continue e;u.push(c)}else a(t,f,r)||u.push(c)}return u}qn.templateSettings={escape:X,evaluate:Z,interpolate:ee,variable:"",imports:{_:qn}},qn.prototype=Gn.prototype,qn.prototype.constructor=qn,$n.prototype=Jn(Gn.prototype),$n.prototype.constructor=$n,Wn.prototype=Jn(Gn.prototype),Wn.prototype.constructor=Wn,Hn.prototype.clear=function(){this.__data__=Cn?Cn(null):{},this.size=0},Hn.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},Hn.prototype.get=function(e){var t=this.__data__;if(Cn){var r=t[e];return r===i?n:r}return Fe.call(t,e)?t[e]:n},Hn.prototype.has=function(e){var t=this.__data__;return Cn?t[e]!==n:Fe.call(t,e)},Hn.prototype.set=function(e,t){var r=this.__data__;return this.size+=this.has(e)?0:1,r[e]=Cn&&t===n?i:t,this},Kn.prototype.clear=function(){this.__data__=[],this.size=0},Kn.prototype.delete=function(e){var t=this.__data__,n=ar(t,e);return!(n<0)&&(n==t.length-1?t.pop():Ye.call(t,n,1),--this.size,!0)},Kn.prototype.get=function(e){var t=this.__data__,r=ar(t,e);return r<0?n:t[r][1]},Kn.prototype.has=function(e){return ar(this.__data__,e)>-1},Kn.prototype.set=function(e,t){var n=this.__data__,r=ar(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this},Qn.prototype.clear=function(){this.size=0,this.__data__={hash:new Hn,map:new(Ln||Kn),string:new Hn}},Qn.prototype.delete=function(e){var t=da(this,e).delete(e);return this.size-=t?1:0,t},Qn.prototype.get=function(e){return da(this,e).get(e)},Qn.prototype.has=function(e){return da(this,e).has(e)},Qn.prototype.set=function(e,t){var n=da(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this},Yn.prototype.add=Yn.prototype.push=function(e){return this.__data__.set(e,i),this},Yn.prototype.has=function(e){return this.__data__.has(e)},Xn.prototype.clear=function(){this.__data__=new Kn,this.size=0},Xn.prototype.delete=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n},Xn.prototype.get=function(e){return this.__data__.get(e)},Xn.prototype.has=function(e){return this.__data__.has(e)},Xn.prototype.set=function(e,t){var n=this.__data__;if(n instanceof Kn){var r=n.__data__;if(!Ln||r.length<199)return r.push([e,t]),this.size=++n.size,this;n=this.__data__=new Qn(r)}return n.set(e,t),this.size=n.size,this};var mr=Mi(Nr),vr=Mi(Tr,!0);function yr(e,t){var n=!0;return mr(e,(function(e,r,i){return n=!!t(e,r,i)})),n}function gr(e,t,r){for(var i=-1,a=e.length;++i<a;){var o=e[i],s=t(o);if(null!=s&&(u===n?s==s&&!ds(s):r(s,u)))var u=s,l=o}return l}function xr(e,t){var n=[];return mr(e,(function(e,r,i){t(e,r,i)&&n.push(e)})),n}function br(e,t,n,r,i){var a=-1,o=e.length;for(n||(n=ba),i||(i=[]);++a<o;){var s=e[a];t>0&&n(s)?t>1?br(s,t-1,n,r,i):jt(i,s):r||(i[i.length]=s)}return i}var wr=Fi(),kr=Fi(!0);function Nr(e,t){return e&&wr(e,t,Ds)}function Tr(e,t){return e&&kr(e,t,Ds)}function _r(e,t){return Ot(t,(function(t){return ts(e[t])}))}function Er(e,t){for(var r=0,i=(t=ki(t,e)).length;null!=e&&r<i;)e=e[Va(t[r++])];return r&&r==i?e:n}function Sr(e,t,n){var r=t(e);return Ho(e)?r:jt(r,n(e))}function Lr(e){return null==e?e===n?"[object Undefined]":"[object Null]":ut&&ut in Le(e)?function(e){var t=Fe.call(e,ut),r=e[ut];try{e[ut]=n;var i=!0}catch(e){}var a=Ve.call(e);i&&(t?e[ut]=r:delete e[ut]);return a}(e):function(e){return Ve.call(e)}(e)}function Ar(e,t){return e>t}function Or(e,t){return null!=e&&Fe.call(e,t)}function Ir(e,t){return null!=e&&t in Le(e)}function Cr(e,t,r){for(var i=r?Ct:It,a=e[0].length,o=e.length,s=o,u=se(o),l=1/0,c=[];s--;){var f=e[s];s&&t&&(f=Rt(f,Yt(t))),l=kn(f.length,l),u[s]=!r&&(t||a>=120&&f.length>=120)?new Yn(s&&f):n}f=e[0];var d=-1,p=u[0];e:for(;++d<a&&c.length<l;){var h=f[d],m=t?t(h):h;if(h=r||0!==h?h:0,!(p?Zt(p,m):i(c,m,r))){for(s=o;--s;){var v=u[s];if(!(v?Zt(v,m):i(e[s],m,r)))continue e}p&&p.push(m),c.push(h)}}return c}function Rr(e,t,r){var i=null==(e=Oa(e,t=ki(t,e)))?e:e[Va(Za(t))];return null==i?n:_t(i,e,r)}function jr(e){return as(e)&&Lr(e)==g}function Dr(e,t,r,i,a){return e===t||(null==e||null==t||!as(e)&&!as(t)?e!=e&&t!=t:function(e,t,r,i,a,o){var s=Ho(e),u=Ho(t),l=s?x:ya(e),c=u?x:ya(t),f=(l=l==g?S:l)==S,d=(c=c==g?S:c)==S,p=l==c;if(p&&Xo(e)){if(!Xo(t))return!1;s=!0,f=!1}if(p&&!f)return o||(o=new Xn),s||ps(e)?ia(e,t,r,i,a,o):function(e,t,n,r,i,a,o){switch(n){case D:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case j:return!(e.byteLength!=t.byteLength||!a(new $e(e),new $e(t)));case b:case w:case E:return Jo(+e,+t);case k:return e.name==t.name&&e.message==t.message;case A:case I:return e==t+"";case _:var s=un;case O:var u=1&r;if(s||(s=fn),e.size!=t.size&&!u)return!1;var l=o.get(e);if(l)return l==t;r|=2,o.set(e,t);var c=ia(s(e),s(t),r,i,a,o);return o.delete(e),c;case C:if(Bn)return Bn.call(e)==Bn.call(t)}return!1}(e,t,l,r,i,a,o);if(!(1&r)){var h=f&&Fe.call(e,"__wrapped__"),m=d&&Fe.call(t,"__wrapped__");if(h||m){var v=h?e.value():e,y=m?t.value():t;return o||(o=new Xn),a(v,y,r,i,o)}}if(!p)return!1;return o||(o=new Xn),function(e,t,r,i,a,o){var s=1&r,u=oa(e),l=u.length,c=oa(t).length;if(l!=c&&!s)return!1;var f=l;for(;f--;){var d=u[f];if(!(s?d in t:Fe.call(t,d)))return!1}var p=o.get(e),h=o.get(t);if(p&&h)return p==t&&h==e;var m=!0;o.set(e,t),o.set(t,e);var v=s;for(;++f<l;){var y=e[d=u[f]],g=t[d];if(i)var x=s?i(g,y,d,t,e,o):i(y,g,d,e,t,o);if(!(x===n?y===g||a(y,g,r,i,o):x)){m=!1;break}v||(v="constructor"==d)}if(m&&!v){var b=e.constructor,w=t.constructor;b==w||!("constructor"in e)||!("constructor"in t)||"function"==typeof b&&b instanceof b&&"function"==typeof w&&w instanceof w||(m=!1)}return o.delete(e),o.delete(t),m}(e,t,r,i,a,o)}(e,t,r,i,Dr,a))}function Mr(e,t,r,i){var a=r.length,o=a,s=!i;if(null==e)return!o;for(e=Le(e);a--;){var u=r[a];if(s&&u[2]?u[1]!==e[u[0]]:!(u[0]in e))return!1}for(;++a<o;){var l=(u=r[a])[0],c=e[l],f=u[1];if(s&&u[2]){if(c===n&&!(l in e))return!1}else{var d=new Xn;if(i)var p=i(c,f,l,e,t,d);if(!(p===n?Dr(f,c,3,i,d):p))return!1}}return!0}function Fr(e){return!(!is(e)||(t=e,Ue&&Ue in t))&&(ts(e)?qe:ge).test(Ba(e));var t}function Pr(e){return"function"==typeof e?e:null==e?su:"object"==h(e)?Ho(e)?Jr(e[0],e[1]):qr(e):vu(e)}function Ur(e){if(!Ea(e))return bn(e);var t=[];for(var n in Le(e))Fe.call(e,n)&&"constructor"!=n&&t.push(n);return t}function Vr(e){if(!is(e))return function(e){var t=[];if(null!=e)for(var n in Le(e))t.push(n);return t}(e);var t=Ea(e),n=[];for(var r in e)("constructor"!=r||!t&&Fe.call(e,r))&&n.push(r);return n}function Br(e,t){return e<t}function zr(e,t){var n=-1,r=Qo(e)?se(e.length):[];return mr(e,(function(e,i,a){r[++n]=t(e,i,a)})),r}function qr(e){var t=pa(e);return 1==t.length&&t[0][2]?La(t[0][0],t[0][1]):function(n){return n===e||Mr(n,e,t)}}function Jr(e,t){return Na(e)&&Sa(t)?La(Va(e),t):function(r){var i=Os(r,e);return i===n&&i===t?Is(r,e):Dr(t,i,3)}}function Gr(e,t,r,i,a){e!==t&&wr(t,(function(o,s){if(a||(a=new Xn),is(o))!function(e,t,r,i,a,o,s){var u=Ca(e,r),l=Ca(t,r),c=s.get(l);if(c)return void rr(e,r,c);var f=o?o(u,l,r+"",e,t,s):n,d=f===n;if(d){var p=Ho(l),h=!p&&Xo(l),m=!p&&!h&&ps(l);f=l,p||h||m?Ho(u)?f=u:Yo(u)?f=Ci(u):h?(d=!1,f=Ei(l,!0)):m?(d=!1,f=Li(l,!0)):f=[]:us(l)||Wo(l)?(f=u,Wo(u)?f=ws(u):is(u)&&!ts(u)||(f=xa(l))):d=!1}d&&(s.set(l,f),a(f,l,i,o,s),s.delete(l));rr(e,r,f)}(e,t,s,r,Gr,i,a);else{var u=i?i(Ca(e,s),o,s+"",e,t,a):n;u===n&&(u=o),rr(e,s,u)}}),Ms)}function $r(e,t){var r=e.length;if(r)return wa(t+=t<0?r:0,r)?e[t]:n}function Wr(e,t,n){t=t.length?Rt(t,(function(e){return Ho(e)?function(t){return Er(t,1===e.length?e[0]:e)}:e})):[su];var r=-1;t=Rt(t,Yt(fa()));var i=zr(e,(function(e,n,i){var a=Rt(t,(function(t){return t(e)}));return{criteria:a,index:++r,value:e}}));return function(e,t){var n=e.length;for(e.sort(t);n--;)e[n]=e[n].value;return e}(i,(function(e,t){return function(e,t,n){var r=-1,i=e.criteria,a=t.criteria,o=i.length,s=n.length;for(;++r<o;){var u=Ai(i[r],a[r]);if(u)return r>=s?u:u*("desc"==n[r]?-1:1)}return e.index-t.index}(e,t,n)}))}function Hr(e,t,n){for(var r=-1,i=t.length,a={};++r<i;){var o=t[r],s=Er(e,o);n(s,o)&&ni(a,ki(o,e),s)}return a}function Kr(e,t,n,r){var i=r?zt:Bt,a=-1,o=t.length,s=e;for(e===t&&(t=Ci(t)),n&&(s=Rt(e,Yt(n)));++a<o;)for(var u=0,l=t[a],c=n?n(l):l;(u=i(s,c,u,r))>-1;)s!==e&&Ye.call(s,u,1),Ye.call(e,u,1);return e}function Qr(e,t){for(var n=e?t.length:0,r=n-1;n--;){var i=t[n];if(n==r||i!==a){var a=i;wa(i)?Ye.call(e,i,1):hi(e,i)}}return e}function Yr(e,t){return e+gt(_n()*(t-e+1))}function Xr(e,t){var n="";if(!e||t<1||t>p)return n;do{t%2&&(n+=e),(t=gt(t/2))&&(e+=e)}while(t);return n}function Zr(e,t){return Da(Aa(e,t,su),e+"")}function ei(e){return er(Js(e))}function ti(e,t){var n=Js(e);return Pa(n,cr(t,0,n.length))}function ni(e,t,r,i){if(!is(e))return e;for(var a=-1,o=(t=ki(t,e)).length,s=o-1,u=e;null!=u&&++a<o;){var l=Va(t[a]),c=r;if("__proto__"===l||"constructor"===l||"prototype"===l)return e;if(a!=s){var f=u[l];(c=i?i(f,l,u):n)===n&&(c=is(f)?f:wa(t[a+1])?[]:{})}ir(u,l,c),u=u[l]}return e}var ri=Rn?function(e,t){return Rn.set(e,t),e}:su,ii=ft?function(e,t){return ft(e,"toString",{configurable:!0,enumerable:!1,value:iu(t),writable:!0})}:su;function ai(e){return Pa(Js(e))}function oi(e,t,n){var r=-1,i=e.length;t<0&&(t=-t>i?0:i+t),(n=n>i?i:n)<0&&(n+=i),i=t>n?0:n-t>>>0,t>>>=0;for(var a=se(i);++r<i;)a[r]=e[r+t];return a}function si(e,t){var n;return mr(e,(function(e,r,i){return!(n=t(e,r,i))})),!!n}function ui(e,t,n){var r=0,i=null==e?r:e.length;if("number"==typeof t&&t==t&&i<=2147483647){for(;r<i;){var a=r+i>>>1,o=e[a];null!==o&&!ds(o)&&(n?o<=t:o<t)?r=a+1:i=a}return i}return li(e,t,su,n)}function li(e,t,r,i){var a=0,o=null==e?0:e.length;if(0===o)return 0;for(var s=(t=r(t))!=t,u=null===t,l=ds(t),c=t===n;a<o;){var f=gt((a+o)/2),d=r(e[f]),p=d!==n,h=null===d,m=d==d,v=ds(d);if(s)var y=i||m;else y=c?m&&(i||p):u?m&&p&&(i||!h):l?m&&p&&!h&&(i||!v):!h&&!v&&(i?d<=t:d<t);y?a=f+1:o=f}return kn(o,4294967294)}function ci(e,t){for(var n=-1,r=e.length,i=0,a=[];++n<r;){var o=e[n],s=t?t(o):o;if(!n||!Jo(s,u)){var u=s;a[i++]=0===o?0:o}}return a}function fi(e){return"number"==typeof e?e:ds(e)?m:+e}function di(e){if("string"==typeof e)return e;if(Ho(e))return Rt(e,di)+"";if(ds(e))return zn?zn.call(e):"";var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}function pi(e,t,n){var r=-1,i=It,a=e.length,o=!0,s=[],u=s;if(n)o=!1,i=Ct;else if(a>=200){var l=t?null:Xi(e);if(l)return fn(l);o=!1,i=Zt,u=new Yn}else u=t?[]:s;e:for(;++r<a;){var c=e[r],f=t?t(c):c;if(c=n||0!==c?c:0,o&&f==f){for(var d=u.length;d--;)if(u[d]===f)continue e;t&&u.push(f),s.push(c)}else i(u,f,n)||(u!==s&&u.push(f),s.push(c))}return s}function hi(e,t){return null==(e=Oa(e,t=ki(t,e)))||delete e[Va(Za(t))]}function mi(e,t,n,r){return ni(e,t,n(Er(e,t)),r)}function vi(e,t,n,r){for(var i=e.length,a=r?i:-1;(r?a--:++a<i)&&t(e[a],a,e););return n?oi(e,r?0:a,r?a+1:i):oi(e,r?a+1:0,r?i:a)}function yi(e,t){var n=e;return n instanceof Wn&&(n=n.value()),Dt(t,(function(e,t){return t.func.apply(t.thisArg,jt([e],t.args))}),n)}function gi(e,t,n){var r=e.length;if(r<2)return r?pi(e[0]):[];for(var i=-1,a=se(r);++i<r;)for(var o=e[i],s=-1;++s<r;)s!=i&&(a[i]=hr(a[i]||o,e[s],t,n));return pi(br(a,1),t,n)}function xi(e,t,r){for(var i=-1,a=e.length,o=t.length,s={};++i<a;){var u=i<o?t[i]:n;r(s,e[i],u)}return s}function bi(e){return Yo(e)?e:[]}function wi(e){return"function"==typeof e?e:su}function ki(e,t){return Ho(e)?e:Na(e,t)?[e]:Ua(ks(e))}var Ni=Zr;function Ti(e,t,r){var i=e.length;return r=r===n?i:r,!t&&r>=i?e:oi(e,t,r)}var _i=dt||function(e){return pt.clearTimeout(e)};function Ei(e,t){if(t)return e.slice();var n=e.length,r=We?We(n):new e.constructor(n);return e.copy(r),r}function Si(e){var t=new e.constructor(e.byteLength);return new $e(t).set(new $e(e)),t}function Li(e,t){var n=t?Si(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}function Ai(e,t){if(e!==t){var r=e!==n,i=null===e,a=e==e,o=ds(e),s=t!==n,u=null===t,l=t==t,c=ds(t);if(!u&&!c&&!o&&e>t||o&&s&&l&&!u&&!c||i&&s&&l||!r&&l||!a)return 1;if(!i&&!o&&!c&&e<t||c&&r&&a&&!i&&!o||u&&r&&a||!s&&a||!l)return-1}return 0}function Oi(e,t,n,r){for(var i=-1,a=e.length,o=n.length,s=-1,u=t.length,l=wn(a-o,0),c=se(u+l),f=!r;++s<u;)c[s]=t[s];for(;++i<o;)(f||i<a)&&(c[n[i]]=e[i]);for(;l--;)c[s++]=e[i++];return c}function Ii(e,t,n,r){for(var i=-1,a=e.length,o=-1,s=n.length,u=-1,l=t.length,c=wn(a-s,0),f=se(c+l),d=!r;++i<c;)f[i]=e[i];for(var p=i;++u<l;)f[p+u]=t[u];for(;++o<s;)(d||i<a)&&(f[p+n[o]]=e[i++]);return f}function Ci(e,t){var n=-1,r=e.length;for(t||(t=se(r));++n<r;)t[n]=e[n];return t}function Ri(e,t,r,i){var a=!r;r||(r={});for(var o=-1,s=t.length;++o<s;){var u=t[o],l=i?i(r[u],e[u],u,r,e):n;l===n&&(l=e[u]),a?ur(r,u,l):ir(r,u,l)}return r}function ji(e,t){return function(n,r){var i=Ho(n)?Et:or,a=t?t():{};return i(n,e,fa(r,2),a)}}function Di(e){return Zr((function(t,r){var i=-1,a=r.length,o=a>1?r[a-1]:n,s=a>2?r[2]:n;for(o=e.length>3&&"function"==typeof o?(a--,o):n,s&&ka(r[0],r[1],s)&&(o=a<3?n:o,a=1),t=Le(t);++i<a;){var u=r[i];u&&e(t,u,i,o)}return t}))}function Mi(e,t){return function(n,r){if(null==n)return n;if(!Qo(n))return e(n,r);for(var i=n.length,a=t?i:-1,o=Le(n);(t?a--:++a<i)&&!1!==r(o[a],a,o););return n}}function Fi(e){return function(t,n,r){for(var i=-1,a=Le(t),o=r(t),s=o.length;s--;){var u=o[e?s:++i];if(!1===n(a[u],u,a))break}return t}}function Pi(e){return function(t){var r=sn(t=ks(t))?hn(t):n,i=r?r[0]:t.charAt(0),a=r?Ti(r,1).join(""):t.slice(1);return i[e]()+a}}function Ui(e){return function(t){return Dt(tu(Ws(t).replace(Xe,"")),e,"")}}function Vi(e){return function(){var t=arguments;switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3]);case 5:return new e(t[0],t[1],t[2],t[3],t[4]);case 6:return new e(t[0],t[1],t[2],t[3],t[4],t[5]);case 7:return new e(t[0],t[1],t[2],t[3],t[4],t[5],t[6])}var n=Jn(e.prototype),r=e.apply(n,t);return is(r)?r:n}}function Bi(e){return function(t,r,i){var a=Le(t);if(!Qo(t)){var o=fa(r,3);t=Ds(t),r=function(e){return o(a[e],e,a)}}var s=e(t,r,i);return s>-1?a[o?t[s]:s]:n}}function zi(e){return aa((function(t){var i=t.length,a=i,o=$n.prototype.thru;for(e&&t.reverse();a--;){var s=t[a];if("function"!=typeof s)throw new Ie(r);if(o&&!u&&"wrapper"==la(s))var u=new $n([],!0)}for(a=u?a:i;++a<i;){var l=la(s=t[a]),c="wrapper"==l?ua(s):n;u=c&&Ta(c[0])&&424==c[1]&&!c[4].length&&1==c[9]?u[la(c[0])].apply(u,c[3]):1==s.length&&Ta(s)?u[l]():u.thru(s)}return function(){var e=arguments,n=e[0];if(u&&1==e.length&&Ho(n))return u.plant(n).value();for(var r=0,a=i?t[r].apply(this,e):n;++r<i;)a=t[r].call(this,a);return a}}))}function qi(e,t,r,i,a,o,s,u,l,f){var d=t&c,p=1&t,h=2&t,m=24&t,v=512&t,y=h?n:Vi(e);return function n(){for(var c=arguments.length,g=se(c),x=c;x--;)g[x]=arguments[x];if(m)var b=ca(n),w=nn(g,b);if(i&&(g=Oi(g,i,a,m)),o&&(g=Ii(g,o,s,m)),c-=w,m&&c<f){var k=cn(g,b);return Qi(e,t,qi,n.placeholder,r,g,k,u,l,f-c)}var N=p?r:this,T=h?N[e]:e;return c=g.length,u?g=Ia(g,u):v&&c>1&&g.reverse(),d&&l<c&&(g.length=l),this&&this!==pt&&this instanceof n&&(T=y||Vi(T)),T.apply(N,g)}}function Ji(e,t){return function(n,r){return function(e,t,n,r){return Nr(e,(function(e,i,a){t(r,n(e),i,a)})),r}(n,e,t(r),{})}}function Gi(e,t){return function(r,i){var a;if(r===n&&i===n)return t;if(r!==n&&(a=r),i!==n){if(a===n)return i;"string"==typeof r||"string"==typeof i?(r=di(r),i=di(i)):(r=fi(r),i=fi(i)),a=e(r,i)}return a}}function $i(e){return aa((function(t){return t=Rt(t,Yt(fa())),Zr((function(n){var r=this;return e(t,(function(e){return _t(e,r,n)}))}))}))}function Wi(e,t){var r=(t=t===n?" ":di(t)).length;if(r<2)return r?Xr(t,e):t;var i=Xr(t,yt(e/pn(t)));return sn(t)?Ti(hn(i),0,e).join(""):i.slice(0,e)}function Hi(e){return function(t,r,i){return i&&"number"!=typeof i&&ka(t,r,i)&&(r=i=n),t=ys(t),r===n?(r=t,t=0):r=ys(r),function(e,t,n,r){for(var i=-1,a=wn(yt((t-e)/(n||1)),0),o=se(a);a--;)o[r?a:++i]=e,e+=n;return o}(t,r,i=i===n?t<r?1:-1:ys(i),e)}}function Ki(e){return function(t,n){return"string"==typeof t&&"string"==typeof n||(t=bs(t),n=bs(n)),e(t,n)}}function Qi(e,t,r,i,a,o,u,c,f,d){var p=8&t;t|=p?s:l,4&(t&=~(p?l:s))||(t&=-4);var h=[e,t,a,p?o:n,p?u:n,p?n:o,p?n:u,c,f,d],m=r.apply(n,h);return Ta(e)&&Ra(m,h),m.placeholder=i,Ma(m,e,t)}function Yi(e){var t=Se[e];return function(e,n){if(e=bs(e),(n=null==n?0:kn(gs(n),292))&&gn(e)){var r=(ks(e)+"e").split("e");return+((r=(ks(t(r[0]+"e"+(+r[1]+n)))+"e").split("e"))[0]+"e"+(+r[1]-n))}return t(e)}}var Xi=On&&1/fn(new On([,-0]))[1]==d?function(e){return new On(e)}:du;function Zi(e){return function(t){var n=ya(t);return n==_?un(t):n==O?dn(t):function(e,t){return Rt(t,(function(t){return[t,e[t]]}))}(t,e(t))}}function ea(e,t,i,u,d,p,h,m){var v=2&t;if(!v&&"function"!=typeof e)throw new Ie(r);var y=u?u.length:0;if(y||(t&=-97,u=d=n),h=h===n?h:wn(gs(h),0),m=m===n?m:gs(m),y-=d?d.length:0,t&l){var g=u,x=d;u=d=n}var b=v?n:ua(e),w=[e,t,i,u,d,g,x,p,h,m];if(b&&function(e,t){var n=e[1],r=t[1],i=n|r,o=i<131,s=r==c&&8==n||r==c&&n==f&&e[7].length<=t[8]||384==r&&t[7].length<=t[8]&&8==n;if(!o&&!s)return e;1&r&&(e[2]=t[2],i|=1&n?0:4);var u=t[3];if(u){var l=e[3];e[3]=l?Oi(l,u,t[4]):u,e[4]=l?cn(e[3],a):t[4]}(u=t[5])&&(l=e[5],e[5]=l?Ii(l,u,t[6]):u,e[6]=l?cn(e[5],a):t[6]);(u=t[7])&&(e[7]=u);r&c&&(e[8]=null==e[8]?t[8]:kn(e[8],t[8]));null==e[9]&&(e[9]=t[9]);e[0]=t[0],e[1]=i}(w,b),e=w[0],t=w[1],i=w[2],u=w[3],d=w[4],!(m=w[9]=w[9]===n?v?0:e.length:wn(w[9]-y,0))&&24&t&&(t&=-25),t&&1!=t)k=8==t||t==o?function(e,t,r){var i=Vi(e);return function a(){for(var o=arguments.length,s=se(o),u=o,l=ca(a);u--;)s[u]=arguments[u];var c=o<3&&s[0]!==l&&s[o-1]!==l?[]:cn(s,l);return(o-=c.length)<r?Qi(e,t,qi,a.placeholder,n,s,c,n,n,r-o):_t(this&&this!==pt&&this instanceof a?i:e,this,s)}}(e,t,m):t!=s&&33!=t||d.length?qi.apply(n,w):function(e,t,n,r){var i=1&t,a=Vi(e);return function t(){for(var o=-1,s=arguments.length,u=-1,l=r.length,c=se(l+s),f=this&&this!==pt&&this instanceof t?a:e;++u<l;)c[u]=r[u];for(;s--;)c[u++]=arguments[++o];return _t(f,i?n:this,c)}}(e,t,i,u);else var k=function(e,t,n){var r=1&t,i=Vi(e);return function t(){return(this&&this!==pt&&this instanceof t?i:e).apply(r?n:this,arguments)}}(e,t,i);return Ma((b?ri:Ra)(k,w),e,t)}function ta(e,t,r,i){return e===n||Jo(e,je[r])&&!Fe.call(i,r)?t:e}function na(e,t,r,i,a,o){return is(e)&&is(t)&&(o.set(t,e),Gr(e,t,n,na,o),o.delete(t)),e}function ra(e){return us(e)?n:e}function ia(e,t,r,i,a,o){var s=1&r,u=e.length,l=t.length;if(u!=l&&!(s&&l>u))return!1;var c=o.get(e),f=o.get(t);if(c&&f)return c==t&&f==e;var d=-1,p=!0,h=2&r?new Yn:n;for(o.set(e,t),o.set(t,e);++d<u;){var m=e[d],v=t[d];if(i)var y=s?i(v,m,d,t,e,o):i(m,v,d,e,t,o);if(y!==n){if(y)continue;p=!1;break}if(h){if(!Ft(t,(function(e,t){if(!Zt(h,t)&&(m===e||a(m,e,r,i,o)))return h.push(t)}))){p=!1;break}}else if(m!==v&&!a(m,v,r,i,o)){p=!1;break}}return o.delete(e),o.delete(t),p}function aa(e){return Da(Aa(e,n,Ha),e+"")}function oa(e){return Sr(e,Ds,ma)}function sa(e){return Sr(e,Ms,va)}var ua=Rn?function(e){return Rn.get(e)}:du;function la(e){for(var t=e.name+"",n=jn[t],r=Fe.call(jn,t)?n.length:0;r--;){var i=n[r],a=i.func;if(null==a||a==e)return i.name}return t}function ca(e){return(Fe.call(qn,"placeholder")?qn:e).placeholder}function fa(){var e=qn.iteratee||uu;return e=e===uu?Pr:e,arguments.length?e(arguments[0],arguments[1]):e}function da(e,t){var n,r,i=e.__data__;return("string"==(r=h(n=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?i["string"==typeof t?"string":"hash"]:i.map}function pa(e){for(var t=Ds(e),n=t.length;n--;){var r=t[n],i=e[r];t[n]=[r,i,Sa(i)]}return t}function ha(e,t){var r=function(e,t){return null==e?n:e[t]}(e,t);return Fr(r)?r:n}var ma=Pt?function(e){return null==e?[]:(e=Le(e),Ot(Pt(e),(function(t){return Qe.call(e,t)})))}:xu,va=Pt?function(e){for(var t=[];e;)jt(t,ma(e)),e=He(e);return t}:xu,ya=Lr;function ga(e,t,n){for(var r=-1,i=(t=ki(t,e)).length,a=!1;++r<i;){var o=Va(t[r]);if(!(a=null!=e&&n(e,o)))break;e=e[o]}return a||++r!=i?a:!!(i=null==e?0:e.length)&&rs(i)&&wa(o,i)&&(Ho(e)||Wo(e))}function xa(e){return"function"!=typeof e.constructor||Ea(e)?{}:Jn(He(e))}function ba(e){return Ho(e)||Wo(e)||!!(et&&e&&e[et])}function wa(e,t){var n=h(e);return!!(t=null==t?p:t)&&("number"==n||"symbol"!=n&&be.test(e))&&e>-1&&e%1==0&&e<t}function ka(e,t,n){if(!is(n))return!1;var r=h(t);return!!("number"==r?Qo(n)&&wa(t,n.length):"string"==r&&t in n)&&Jo(n[t],e)}function Na(e,t){if(Ho(e))return!1;var n=h(e);return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!ds(e))||(ne.test(e)||!te.test(e)||null!=t&&e in Le(t))}function Ta(e){var t=la(e),n=qn[t];if("function"!=typeof n||!(t in Wn.prototype))return!1;if(e===n)return!0;var r=ua(n);return!!r&&e===r[0]}(Sn&&ya(new Sn(new ArrayBuffer(1)))!=D||Ln&&ya(new Ln)!=_||An&&ya(An.resolve())!=L||On&&ya(new On)!=O||In&&ya(new In)!=R)&&(ya=function(e){var t=Lr(e),r=t==S?e.constructor:n,i=r?Ba(r):"";if(i)switch(i){case Dn:return D;case Mn:return _;case Fn:return L;case Pn:return O;case Un:return R}return t});var _a=De?ts:bu;function Ea(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||je)}function Sa(e){return e==e&&!is(e)}function La(e,t){return function(r){return null!=r&&(r[e]===t&&(t!==n||e in Le(r)))}}function Aa(e,t,r){return t=wn(t===n?e.length-1:t,0),function(){for(var n=arguments,i=-1,a=wn(n.length-t,0),o=se(a);++i<a;)o[i]=n[t+i];i=-1;for(var s=se(t+1);++i<t;)s[i]=n[i];return s[t]=r(o),_t(e,this,s)}}function Oa(e,t){return t.length<2?e:Er(e,oi(t,0,-1))}function Ia(e,t){for(var r=e.length,i=kn(t.length,r),a=Ci(e);i--;){var o=t[i];e[i]=wa(o,r)?a[o]:n}return e}function Ca(e,t){if(("constructor"!==t||"function"!=typeof e[t])&&"__proto__"!=t)return e[t]}var Ra=Fa(ri),ja=mt||function(e,t){return pt.setTimeout(e,t)},Da=Fa(ii);function Ma(e,t,n){var r=t+"";return Da(e,function(e,t){var n=t.length;if(!n)return e;var r=n-1;return t[r]=(n>1?"& ":"")+t[r],t=t.join(n>2?", ":" "),e.replace(ue,"{\n/* [wrapped with "+t+"] */\n")}(r,function(e,t){return St(y,(function(n){var r="_."+n[0];t&n[1]&&!It(e,r)&&e.push(r)})),e.sort()}(function(e){var t=e.match(le);return t?t[1].split(ce):[]}(r),n)))}function Fa(e){var t=0,r=0;return function(){var i=Nn(),a=16-(i-r);if(r=i,a>0){if(++t>=800)return arguments[0]}else t=0;return e.apply(n,arguments)}}function Pa(e,t){var r=-1,i=e.length,a=i-1;for(t=t===n?i:t;++r<t;){var o=Yr(r,a),s=e[o];e[o]=e[r],e[r]=s}return e.length=t,e}var Ua=function(e){var t=Po(e,(function(e){return 500===n.size&&n.clear(),e})),n=t.cache;return t}((function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(re,(function(e,n,r,i){t.push(r?i.replace(pe,"$1"):n||e)})),t}));function Va(e){if("string"==typeof e||ds(e))return e;var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}function Ba(e){if(null!=e){try{return Me.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function za(e){if(e instanceof Wn)return e.clone();var t=new $n(e.__wrapped__,e.__chain__);return t.__actions__=Ci(e.__actions__),t.__index__=e.__index__,t.__values__=e.__values__,t}var qa=Zr((function(e,t){return Yo(e)?hr(e,br(t,1,Yo,!0)):[]})),Ja=Zr((function(e,t){var r=Za(t);return Yo(r)&&(r=n),Yo(e)?hr(e,br(t,1,Yo,!0),fa(r,2)):[]})),Ga=Zr((function(e,t){var r=Za(t);return Yo(r)&&(r=n),Yo(e)?hr(e,br(t,1,Yo,!0),n,r):[]}));function $a(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var i=null==n?0:gs(n);return i<0&&(i=wn(r+i,0)),Vt(e,fa(t,3),i)}function Wa(e,t,r){var i=null==e?0:e.length;if(!i)return-1;var a=i-1;return r!==n&&(a=gs(r),a=r<0?wn(i+a,0):kn(a,i-1)),Vt(e,fa(t,3),a,!0)}function Ha(e){return(null==e?0:e.length)?br(e,1):[]}function Ka(e){return e&&e.length?e[0]:n}var Qa=Zr((function(e){var t=Rt(e,bi);return t.length&&t[0]===e[0]?Cr(t):[]})),Ya=Zr((function(e){var t=Za(e),r=Rt(e,bi);return t===Za(r)?t=n:r.pop(),r.length&&r[0]===e[0]?Cr(r,fa(t,2)):[]})),Xa=Zr((function(e){var t=Za(e),r=Rt(e,bi);return(t="function"==typeof t?t:n)&&r.pop(),r.length&&r[0]===e[0]?Cr(r,n,t):[]}));function Za(e){var t=null==e?0:e.length;return t?e[t-1]:n}var eo=Zr(to);function to(e,t){return e&&e.length&&t&&t.length?Kr(e,t):e}var no=aa((function(e,t){var n=null==e?0:e.length,r=lr(e,t);return Qr(e,Rt(t,(function(e){return wa(e,n)?+e:e})).sort(Ai)),r}));function ro(e){return null==e?e:En.call(e)}var io=Zr((function(e){return pi(br(e,1,Yo,!0))})),ao=Zr((function(e){var t=Za(e);return Yo(t)&&(t=n),pi(br(e,1,Yo,!0),fa(t,2))})),oo=Zr((function(e){var t=Za(e);return t="function"==typeof t?t:n,pi(br(e,1,Yo,!0),n,t)}));function so(e){if(!e||!e.length)return[];var t=0;return e=Ot(e,(function(e){if(Yo(e))return t=wn(e.length,t),!0})),Kt(t,(function(t){return Rt(e,Gt(t))}))}function uo(e,t){if(!e||!e.length)return[];var r=so(e);return null==t?r:Rt(r,(function(e){return _t(t,n,e)}))}var lo=Zr((function(e,t){return Yo(e)?hr(e,t):[]})),co=Zr((function(e){return gi(Ot(e,Yo))})),fo=Zr((function(e){var t=Za(e);return Yo(t)&&(t=n),gi(Ot(e,Yo),fa(t,2))})),po=Zr((function(e){var t=Za(e);return t="function"==typeof t?t:n,gi(Ot(e,Yo),n,t)})),ho=Zr(so);var mo=Zr((function(e){var t=e.length,r=t>1?e[t-1]:n;return r="function"==typeof r?(e.pop(),r):n,uo(e,r)}));function vo(e){var t=qn(e);return t.__chain__=!0,t}function yo(e,t){return t(e)}var go=aa((function(e){var t=e.length,r=t?e[0]:0,i=this.__wrapped__,a=function(t){return lr(t,e)};return!(t>1||this.__actions__.length)&&i instanceof Wn&&wa(r)?((i=i.slice(r,+r+(t?1:0))).__actions__.push({func:yo,args:[a],thisArg:n}),new $n(i,this.__chain__).thru((function(e){return t&&!e.length&&e.push(n),e}))):this.thru(a)}));var xo=ji((function(e,t,n){Fe.call(e,n)?++e[n]:ur(e,n,1)}));var bo=Bi($a),wo=Bi(Wa);function ko(e,t){return(Ho(e)?St:mr)(e,fa(t,3))}function No(e,t){return(Ho(e)?Lt:vr)(e,fa(t,3))}var To=ji((function(e,t,n){Fe.call(e,n)?e[n].push(t):ur(e,n,[t])}));var _o=Zr((function(e,t,n){var r=-1,i="function"==typeof t,a=Qo(e)?se(e.length):[];return mr(e,(function(e){a[++r]=i?_t(t,e,n):Rr(e,t,n)})),a})),Eo=ji((function(e,t,n){ur(e,n,t)}));function So(e,t){return(Ho(e)?Rt:zr)(e,fa(t,3))}var Lo=ji((function(e,t,n){e[n?0:1].push(t)}),(function(){return[[],[]]}));var Ao=Zr((function(e,t){if(null==e)return[];var n=t.length;return n>1&&ka(e,t[0],t[1])?t=[]:n>2&&ka(t[0],t[1],t[2])&&(t=[t[0]]),Wr(e,br(t,1),[])})),Oo=ht||function(){return pt.Date.now()};function Io(e,t,r){return t=r?n:t,t=e&&null==t?e.length:t,ea(e,c,n,n,n,n,t)}function Co(e,t){var i;if("function"!=typeof t)throw new Ie(r);return e=gs(e),function(){return--e>0&&(i=t.apply(this,arguments)),e<=1&&(t=n),i}}var Ro=Zr((function(e,t,n){var r=1;if(n.length){var i=cn(n,ca(Ro));r|=s}return ea(e,r,t,n,i)})),jo=Zr((function(e,t,n){var r=3;if(n.length){var i=cn(n,ca(jo));r|=s}return ea(t,r,e,n,i)}));function Do(e,t,i){var a,o,s,u,l,c,f=0,d=!1,p=!1,h=!0;if("function"!=typeof e)throw new Ie(r);function m(t){var r=a,i=o;return a=o=n,f=t,u=e.apply(i,r)}function v(e){return f=e,l=ja(g,t),d?m(e):u}function y(e){var r=e-c;return c===n||r>=t||r<0||p&&e-f>=s}function g(){var e=Oo();if(y(e))return x(e);l=ja(g,function(e){var n=t-(e-c);return p?kn(n,s-(e-f)):n}(e))}function x(e){return l=n,h&&a?m(e):(a=o=n,u)}function b(){var e=Oo(),r=y(e);if(a=arguments,o=this,c=e,r){if(l===n)return v(c);if(p)return _i(l),l=ja(g,t),m(c)}return l===n&&(l=ja(g,t)),u}return t=bs(t)||0,is(i)&&(d=!!i.leading,s=(p="maxWait"in i)?wn(bs(i.maxWait)||0,t):s,h="trailing"in i?!!i.trailing:h),b.cancel=function(){l!==n&&_i(l),f=0,a=c=o=l=n},b.flush=function(){return l===n?u:x(Oo())},b}var Mo=Zr((function(e,t){return pr(e,1,t)})),Fo=Zr((function(e,t,n){return pr(e,bs(t)||0,n)}));function Po(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new Ie(r);var n=function n(){var r=arguments,i=t?t.apply(this,r):r[0],a=n.cache;if(a.has(i))return a.get(i);var o=e.apply(this,r);return n.cache=a.set(i,o)||a,o};return n.cache=new(Po.Cache||Qn),n}function Uo(e){if("function"!=typeof e)throw new Ie(r);return function(){var t=arguments;switch(t.length){case 0:return!e.call(this);case 1:return!e.call(this,t[0]);case 2:return!e.call(this,t[0],t[1]);case 3:return!e.call(this,t[0],t[1],t[2])}return!e.apply(this,t)}}Po.Cache=Qn;var Vo=Ni((function(e,t){var n=(t=1==t.length&&Ho(t[0])?Rt(t[0],Yt(fa())):Rt(br(t,1),Yt(fa()))).length;return Zr((function(r){for(var i=-1,a=kn(r.length,n);++i<a;)r[i]=t[i].call(this,r[i]);return _t(e,this,r)}))})),Bo=Zr((function(e,t){var r=cn(t,ca(Bo));return ea(e,s,n,t,r)})),zo=Zr((function(e,t){var r=cn(t,ca(zo));return ea(e,l,n,t,r)})),qo=aa((function(e,t){return ea(e,f,n,n,n,t)}));function Jo(e,t){return e===t||e!=e&&t!=t}var Go=Ki(Ar),$o=Ki((function(e,t){return e>=t})),Wo=jr(function(){return arguments}())?jr:function(e){return as(e)&&Fe.call(e,"callee")&&!Qe.call(e,"callee")},Ho=se.isArray,Ko=xt?Yt(xt):function(e){return as(e)&&Lr(e)==j};function Qo(e){return null!=e&&rs(e.length)&&!ts(e)}function Yo(e){return as(e)&&Qo(e)}var Xo=$t||bu,Zo=bt?Yt(bt):function(e){return as(e)&&Lr(e)==w};function es(e){if(!as(e))return!1;var t=Lr(e);return t==k||"[object DOMException]"==t||"string"==typeof e.message&&"string"==typeof e.name&&!us(e)}function ts(e){if(!is(e))return!1;var t=Lr(e);return t==N||t==T||"[object AsyncFunction]"==t||"[object Proxy]"==t}function ns(e){return"number"==typeof e&&e==gs(e)}function rs(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=p}function is(e){var t=h(e);return null!=e&&("object"==t||"function"==t)}function as(e){return null!=e&&"object"==h(e)}var os=wt?Yt(wt):function(e){return as(e)&&ya(e)==_};function ss(e){return"number"==typeof e||as(e)&&Lr(e)==E}function us(e){if(!as(e)||Lr(e)!=S)return!1;var t=He(e);if(null===t)return!0;var n=Fe.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&Me.call(n)==Be}var ls=kt?Yt(kt):function(e){return as(e)&&Lr(e)==A};var cs=Nt?Yt(Nt):function(e){return as(e)&&ya(e)==O};function fs(e){return"string"==typeof e||!Ho(e)&&as(e)&&Lr(e)==I}function ds(e){return"symbol"==h(e)||as(e)&&Lr(e)==C}var ps=Tt?Yt(Tt):function(e){return as(e)&&rs(e.length)&&!!ot[Lr(e)]};var hs=Ki(Br),ms=Ki((function(e,t){return e<=t}));function vs(e){if(!e)return[];if(Qo(e))return fs(e)?hn(e):Ci(e);if(nt&&e[nt])return function(e){for(var t,n=[];!(t=e.next()).done;)n.push(t.value);return n}(e[nt]());var t=ya(e);return(t==_?un:t==O?fn:Js)(e)}function ys(e){return e?(e=bs(e))===d||e===-1/0?17976931348623157e292*(e<0?-1:1):e==e?e:0:0===e?e:0}function gs(e){var t=ys(e),n=t%1;return t==t?n?t-n:t:0}function xs(e){return e?cr(gs(e),0,v):0}function bs(e){if("number"==typeof e)return e;if(ds(e))return m;if(is(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=is(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=Qt(e);var n=ye.test(e);return n||xe.test(e)?ct(e.slice(2),n?2:8):ve.test(e)?m:+e}function ws(e){return Ri(e,Ms(e))}function ks(e){return null==e?"":di(e)}var Ns=Di((function(e,t){if(Ea(t)||Qo(t))Ri(t,Ds(t),e);else for(var n in t)Fe.call(t,n)&&ir(e,n,t[n])})),Ts=Di((function(e,t){Ri(t,Ms(t),e)})),_s=Di((function(e,t,n,r){Ri(t,Ms(t),e,r)})),Es=Di((function(e,t,n,r){Ri(t,Ds(t),e,r)})),Ss=aa(lr);var Ls=Zr((function(e,t){e=Le(e);var r=-1,i=t.length,a=i>2?t[2]:n;for(a&&ka(t[0],t[1],a)&&(i=1);++r<i;)for(var o=t[r],s=Ms(o),u=-1,l=s.length;++u<l;){var c=s[u],f=e[c];(f===n||Jo(f,je[c])&&!Fe.call(e,c))&&(e[c]=o[c])}return e})),As=Zr((function(e){return e.push(n,na),_t(Ps,n,e)}));function Os(e,t,r){var i=null==e?n:Er(e,t);return i===n?r:i}function Is(e,t){return null!=e&&ga(e,t,Ir)}var Cs=Ji((function(e,t,n){null!=t&&"function"!=typeof t.toString&&(t=Ve.call(t)),e[t]=n}),iu(su)),Rs=Ji((function(e,t,n){null!=t&&"function"!=typeof t.toString&&(t=Ve.call(t)),Fe.call(e,t)?e[t].push(n):e[t]=[n]}),fa),js=Zr(Rr);function Ds(e){return Qo(e)?Zn(e):Ur(e)}function Ms(e){return Qo(e)?Zn(e,!0):Vr(e)}var Fs=Di((function(e,t,n){Gr(e,t,n)})),Ps=Di((function(e,t,n,r){Gr(e,t,n,r)})),Us=aa((function(e,t){var n={};if(null==e)return n;var r=!1;t=Rt(t,(function(t){return t=ki(t,e),r||(r=t.length>1),t})),Ri(e,sa(e),n),r&&(n=fr(n,7,ra));for(var i=t.length;i--;)hi(n,t[i]);return n}));var Vs=aa((function(e,t){return null==e?{}:function(e,t){return Hr(e,t,(function(t,n){return Is(e,n)}))}(e,t)}));function Bs(e,t){if(null==e)return{};var n=Rt(sa(e),(function(e){return[e]}));return t=fa(t),Hr(e,n,(function(e,n){return t(e,n[0])}))}var zs=Zi(Ds),qs=Zi(Ms);function Js(e){return null==e?[]:Xt(e,Ds(e))}var Gs=Ui((function(e,t,n){return t=t.toLowerCase(),e+(n?$s(t):t)}));function $s(e){return eu(ks(e).toLowerCase())}function Ws(e){return(e=ks(e))&&e.replace(we,rn).replace(Ze,"")}var Hs=Ui((function(e,t,n){return e+(n?"-":"")+t.toLowerCase()})),Ks=Ui((function(e,t,n){return e+(n?" ":"")+t.toLowerCase()})),Qs=Pi("toLowerCase");var Ys=Ui((function(e,t,n){return e+(n?"_":"")+t.toLowerCase()}));var Xs=Ui((function(e,t,n){return e+(n?" ":"")+eu(t)}));var Zs=Ui((function(e,t,n){return e+(n?" ":"")+t.toUpperCase()})),eu=Pi("toUpperCase");function tu(e,t,r){return e=ks(e),(t=r?n:t)===n?function(e){return rt.test(e)}(e)?function(e){return e.match(tt)||[]}(e):function(e){return e.match(fe)||[]}(e):e.match(t)||[]}var nu=Zr((function(e,t){try{return _t(e,n,t)}catch(e){return es(e)?e:new _e(e)}})),ru=aa((function(e,t){return St(t,(function(t){t=Va(t),ur(e,t,Ro(e[t],e))})),e}));function iu(e){return function(){return e}}var au=zi(),ou=zi(!0);function su(e){return e}function uu(e){return Pr("function"==typeof e?e:fr(e,1))}var lu=Zr((function(e,t){return function(n){return Rr(n,e,t)}})),cu=Zr((function(e,t){return function(n){return Rr(e,n,t)}}));function fu(e,t,n){var r=Ds(t),i=_r(t,r);null!=n||is(t)&&(i.length||!r.length)||(n=t,t=e,e=this,i=_r(t,Ds(t)));var a=!(is(n)&&"chain"in n&&!n.chain),o=ts(e);return St(i,(function(n){var r=t[n];e[n]=r,o&&(e.prototype[n]=function(){var t=this.__chain__;if(a||t){var n=e(this.__wrapped__),i=n.__actions__=Ci(this.__actions__);return i.push({func:r,args:arguments,thisArg:e}),n.__chain__=t,n}return r.apply(e,jt([this.value()],arguments))})})),e}function du(){}var pu=$i(Rt),hu=$i(At),mu=$i(Ft);function vu(e){return Na(e)?Gt(Va(e)):function(e){return function(t){return Er(t,e)}}(e)}var yu=Hi(),gu=Hi(!0);function xu(){return[]}function bu(){return!1}var wu=Gi((function(e,t){return e+t}),0),ku=Yi("ceil"),Nu=Gi((function(e,t){return e/t}),1),Tu=Yi("floor");var _u,Eu=Gi((function(e,t){return e*t}),1),Su=Yi("round"),Lu=Gi((function(e,t){return e-t}),0);return qn.after=function(e,t){if("function"!=typeof t)throw new Ie(r);return e=gs(e),function(){if(--e<1)return t.apply(this,arguments)}},qn.ary=Io,qn.assign=Ns,qn.assignIn=Ts,qn.assignInWith=_s,qn.assignWith=Es,qn.at=Ss,qn.before=Co,qn.bind=Ro,qn.bindAll=ru,qn.bindKey=jo,qn.castArray=function(){if(!arguments.length)return[];var e=arguments[0];return Ho(e)?e:[e]},qn.chain=vo,qn.chunk=function(e,t,r){t=(r?ka(e,t,r):t===n)?1:wn(gs(t),0);var i=null==e?0:e.length;if(!i||t<1)return[];for(var a=0,o=0,s=se(yt(i/t));a<i;)s[o++]=oi(e,a,a+=t);return s},qn.compact=function(e){for(var t=-1,n=null==e?0:e.length,r=0,i=[];++t<n;){var a=e[t];a&&(i[r++]=a)}return i},qn.concat=function(){var e=arguments.length;if(!e)return[];for(var t=se(e-1),n=arguments[0],r=e;r--;)t[r-1]=arguments[r];return jt(Ho(n)?Ci(n):[n],br(t,1))},qn.cond=function(e){var t=null==e?0:e.length,n=fa();return e=t?Rt(e,(function(e){if("function"!=typeof e[1])throw new Ie(r);return[n(e[0]),e[1]]})):[],Zr((function(n){for(var r=-1;++r<t;){var i=e[r];if(_t(i[0],this,n))return _t(i[1],this,n)}}))},qn.conforms=function(e){return function(e){var t=Ds(e);return function(n){return dr(n,e,t)}}(fr(e,1))},qn.constant=iu,qn.countBy=xo,qn.create=function(e,t){var n=Jn(e);return null==t?n:sr(n,t)},qn.curry=function e(t,r,i){var a=ea(t,8,n,n,n,n,n,r=i?n:r);return a.placeholder=e.placeholder,a},qn.curryRight=function e(t,r,i){var a=ea(t,o,n,n,n,n,n,r=i?n:r);return a.placeholder=e.placeholder,a},qn.debounce=Do,qn.defaults=Ls,qn.defaultsDeep=As,qn.defer=Mo,qn.delay=Fo,qn.difference=qa,qn.differenceBy=Ja,qn.differenceWith=Ga,qn.drop=function(e,t,r){var i=null==e?0:e.length;return i?oi(e,(t=r||t===n?1:gs(t))<0?0:t,i):[]},qn.dropRight=function(e,t,r){var i=null==e?0:e.length;return i?oi(e,0,(t=i-(t=r||t===n?1:gs(t)))<0?0:t):[]},qn.dropRightWhile=function(e,t){return e&&e.length?vi(e,fa(t,3),!0,!0):[]},qn.dropWhile=function(e,t){return e&&e.length?vi(e,fa(t,3),!0):[]},qn.fill=function(e,t,r,i){var a=null==e?0:e.length;return a?(r&&"number"!=typeof r&&ka(e,t,r)&&(r=0,i=a),function(e,t,r,i){var a=e.length;for((r=gs(r))<0&&(r=-r>a?0:a+r),(i=i===n||i>a?a:gs(i))<0&&(i+=a),i=r>i?0:xs(i);r<i;)e[r++]=t;return e}(e,t,r,i)):[]},qn.filter=function(e,t){return(Ho(e)?Ot:xr)(e,fa(t,3))},qn.flatMap=function(e,t){return br(So(e,t),1)},qn.flatMapDeep=function(e,t){return br(So(e,t),d)},qn.flatMapDepth=function(e,t,r){return r=r===n?1:gs(r),br(So(e,t),r)},qn.flatten=Ha,qn.flattenDeep=function(e){return(null==e?0:e.length)?br(e,d):[]},qn.flattenDepth=function(e,t){return(null==e?0:e.length)?br(e,t=t===n?1:gs(t)):[]},qn.flip=function(e){return ea(e,512)},qn.flow=au,qn.flowRight=ou,qn.fromPairs=function(e){for(var t=-1,n=null==e?0:e.length,r={};++t<n;){var i=e[t];r[i[0]]=i[1]}return r},qn.functions=function(e){return null==e?[]:_r(e,Ds(e))},qn.functionsIn=function(e){return null==e?[]:_r(e,Ms(e))},qn.groupBy=To,qn.initial=function(e){return(null==e?0:e.length)?oi(e,0,-1):[]},qn.intersection=Qa,qn.intersectionBy=Ya,qn.intersectionWith=Xa,qn.invert=Cs,qn.invertBy=Rs,qn.invokeMap=_o,qn.iteratee=uu,qn.keyBy=Eo,qn.keys=Ds,qn.keysIn=Ms,qn.map=So,qn.mapKeys=function(e,t){var n={};return t=fa(t,3),Nr(e,(function(e,r,i){ur(n,t(e,r,i),e)})),n},qn.mapValues=function(e,t){var n={};return t=fa(t,3),Nr(e,(function(e,r,i){ur(n,r,t(e,r,i))})),n},qn.matches=function(e){return qr(fr(e,1))},qn.matchesProperty=function(e,t){return Jr(e,fr(t,1))},qn.memoize=Po,qn.merge=Fs,qn.mergeWith=Ps,qn.method=lu,qn.methodOf=cu,qn.mixin=fu,qn.negate=Uo,qn.nthArg=function(e){return e=gs(e),Zr((function(t){return $r(t,e)}))},qn.omit=Us,qn.omitBy=function(e,t){return Bs(e,Uo(fa(t)))},qn.once=function(e){return Co(2,e)},qn.orderBy=function(e,t,r,i){return null==e?[]:(Ho(t)||(t=null==t?[]:[t]),Ho(r=i?n:r)||(r=null==r?[]:[r]),Wr(e,t,r))},qn.over=pu,qn.overArgs=Vo,qn.overEvery=hu,qn.overSome=mu,qn.partial=Bo,qn.partialRight=zo,qn.partition=Lo,qn.pick=Vs,qn.pickBy=Bs,qn.property=vu,qn.propertyOf=function(e){return function(t){return null==e?n:Er(e,t)}},qn.pull=eo,qn.pullAll=to,qn.pullAllBy=function(e,t,n){return e&&e.length&&t&&t.length?Kr(e,t,fa(n,2)):e},qn.pullAllWith=function(e,t,r){return e&&e.length&&t&&t.length?Kr(e,t,n,r):e},qn.pullAt=no,qn.range=yu,qn.rangeRight=gu,qn.rearg=qo,qn.reject=function(e,t){return(Ho(e)?Ot:xr)(e,Uo(fa(t,3)))},qn.remove=function(e,t){var n=[];if(!e||!e.length)return n;var r=-1,i=[],a=e.length;for(t=fa(t,3);++r<a;){var o=e[r];t(o,r,e)&&(n.push(o),i.push(r))}return Qr(e,i),n},qn.rest=function(e,t){if("function"!=typeof e)throw new Ie(r);return Zr(e,t=t===n?t:gs(t))},qn.reverse=ro,qn.sampleSize=function(e,t,r){return t=(r?ka(e,t,r):t===n)?1:gs(t),(Ho(e)?tr:ti)(e,t)},qn.set=function(e,t,n){return null==e?e:ni(e,t,n)},qn.setWith=function(e,t,r,i){return i="function"==typeof i?i:n,null==e?e:ni(e,t,r,i)},qn.shuffle=function(e){return(Ho(e)?nr:ai)(e)},qn.slice=function(e,t,r){var i=null==e?0:e.length;return i?(r&&"number"!=typeof r&&ka(e,t,r)?(t=0,r=i):(t=null==t?0:gs(t),r=r===n?i:gs(r)),oi(e,t,r)):[]},qn.sortBy=Ao,qn.sortedUniq=function(e){return e&&e.length?ci(e):[]},qn.sortedUniqBy=function(e,t){return e&&e.length?ci(e,fa(t,2)):[]},qn.split=function(e,t,r){return r&&"number"!=typeof r&&ka(e,t,r)&&(t=r=n),(r=r===n?v:r>>>0)?(e=ks(e))&&("string"==typeof t||null!=t&&!ls(t))&&!(t=di(t))&&sn(e)?Ti(hn(e),0,r):e.split(t,r):[]},qn.spread=function(e,t){if("function"!=typeof e)throw new Ie(r);return t=null==t?0:wn(gs(t),0),Zr((function(n){var r=n[t],i=Ti(n,0,t);return r&&jt(i,r),_t(e,this,i)}))},qn.tail=function(e){var t=null==e?0:e.length;return t?oi(e,1,t):[]},qn.take=function(e,t,r){return e&&e.length?oi(e,0,(t=r||t===n?1:gs(t))<0?0:t):[]},qn.takeRight=function(e,t,r){var i=null==e?0:e.length;return i?oi(e,(t=i-(t=r||t===n?1:gs(t)))<0?0:t,i):[]},qn.takeRightWhile=function(e,t){return e&&e.length?vi(e,fa(t,3),!1,!0):[]},qn.takeWhile=function(e,t){return e&&e.length?vi(e,fa(t,3)):[]},qn.tap=function(e,t){return t(e),e},qn.throttle=function(e,t,n){var i=!0,a=!0;if("function"!=typeof e)throw new Ie(r);return is(n)&&(i="leading"in n?!!n.leading:i,a="trailing"in n?!!n.trailing:a),Do(e,t,{leading:i,maxWait:t,trailing:a})},qn.thru=yo,qn.toArray=vs,qn.toPairs=zs,qn.toPairsIn=qs,qn.toPath=function(e){return Ho(e)?Rt(e,Va):ds(e)?[e]:Ci(Ua(ks(e)))},qn.toPlainObject=ws,qn.transform=function(e,t,n){var r=Ho(e),i=r||Xo(e)||ps(e);if(t=fa(t,4),null==n){var a=e&&e.constructor;n=i?r?new a:[]:is(e)&&ts(a)?Jn(He(e)):{}}return(i?St:Nr)(e,(function(e,r,i){return t(n,e,r,i)})),n},qn.unary=function(e){return Io(e,1)},qn.union=io,qn.unionBy=ao,qn.unionWith=oo,qn.uniq=function(e){return e&&e.length?pi(e):[]},qn.uniqBy=function(e,t){return e&&e.length?pi(e,fa(t,2)):[]},qn.uniqWith=function(e,t){return t="function"==typeof t?t:n,e&&e.length?pi(e,n,t):[]},qn.unset=function(e,t){return null==e||hi(e,t)},qn.unzip=so,qn.unzipWith=uo,qn.update=function(e,t,n){return null==e?e:mi(e,t,wi(n))},qn.updateWith=function(e,t,r,i){return i="function"==typeof i?i:n,null==e?e:mi(e,t,wi(r),i)},qn.values=Js,qn.valuesIn=function(e){return null==e?[]:Xt(e,Ms(e))},qn.without=lo,qn.words=tu,qn.wrap=function(e,t){return Bo(wi(t),e)},qn.xor=co,qn.xorBy=fo,qn.xorWith=po,qn.zip=ho,qn.zipObject=function(e,t){return xi(e||[],t||[],ir)},qn.zipObjectDeep=function(e,t){return xi(e||[],t||[],ni)},qn.zipWith=mo,qn.entries=zs,qn.entriesIn=qs,qn.extend=Ts,qn.extendWith=_s,fu(qn,qn),qn.add=wu,qn.attempt=nu,qn.camelCase=Gs,qn.capitalize=$s,qn.ceil=ku,qn.clamp=function(e,t,r){return r===n&&(r=t,t=n),r!==n&&(r=(r=bs(r))==r?r:0),t!==n&&(t=(t=bs(t))==t?t:0),cr(bs(e),t,r)},qn.clone=function(e){return fr(e,4)},qn.cloneDeep=function(e){return fr(e,5)},qn.cloneDeepWith=function(e,t){return fr(e,5,t="function"==typeof t?t:n)},qn.cloneWith=function(e,t){return fr(e,4,t="function"==typeof t?t:n)},qn.conformsTo=function(e,t){return null==t||dr(e,t,Ds(t))},qn.deburr=Ws,qn.defaultTo=function(e,t){return null==e||e!=e?t:e},qn.divide=Nu,qn.endsWith=function(e,t,r){e=ks(e),t=di(t);var i=e.length,a=r=r===n?i:cr(gs(r),0,i);return(r-=t.length)>=0&&e.slice(r,a)==t},qn.eq=Jo,qn.escape=function(e){return(e=ks(e))&&Y.test(e)?e.replace(K,an):e},qn.escapeRegExp=function(e){return(e=ks(e))&&ae.test(e)?e.replace(ie,"\\$&"):e},qn.every=function(e,t,r){var i=Ho(e)?At:yr;return r&&ka(e,t,r)&&(t=n),i(e,fa(t,3))},qn.find=bo,qn.findIndex=$a,qn.findKey=function(e,t){return Ut(e,fa(t,3),Nr)},qn.findLast=wo,qn.findLastIndex=Wa,qn.findLastKey=function(e,t){return Ut(e,fa(t,3),Tr)},qn.floor=Tu,qn.forEach=ko,qn.forEachRight=No,qn.forIn=function(e,t){return null==e?e:wr(e,fa(t,3),Ms)},qn.forInRight=function(e,t){return null==e?e:kr(e,fa(t,3),Ms)},qn.forOwn=function(e,t){return e&&Nr(e,fa(t,3))},qn.forOwnRight=function(e,t){return e&&Tr(e,fa(t,3))},qn.get=Os,qn.gt=Go,qn.gte=$o,qn.has=function(e,t){return null!=e&&ga(e,t,Or)},qn.hasIn=Is,qn.head=Ka,qn.identity=su,qn.includes=function(e,t,n,r){e=Qo(e)?e:Js(e),n=n&&!r?gs(n):0;var i=e.length;return n<0&&(n=wn(i+n,0)),fs(e)?n<=i&&e.indexOf(t,n)>-1:!!i&&Bt(e,t,n)>-1},qn.indexOf=function(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var i=null==n?0:gs(n);return i<0&&(i=wn(r+i,0)),Bt(e,t,i)},qn.inRange=function(e,t,r){return t=ys(t),r===n?(r=t,t=0):r=ys(r),function(e,t,n){return e>=kn(t,n)&&e<wn(t,n)}(e=bs(e),t,r)},qn.invoke=js,qn.isArguments=Wo,qn.isArray=Ho,qn.isArrayBuffer=Ko,qn.isArrayLike=Qo,qn.isArrayLikeObject=Yo,qn.isBoolean=function(e){return!0===e||!1===e||as(e)&&Lr(e)==b},qn.isBuffer=Xo,qn.isDate=Zo,qn.isElement=function(e){return as(e)&&1===e.nodeType&&!us(e)},qn.isEmpty=function(e){if(null==e)return!0;if(Qo(e)&&(Ho(e)||"string"==typeof e||"function"==typeof e.splice||Xo(e)||ps(e)||Wo(e)))return!e.length;var t=ya(e);if(t==_||t==O)return!e.size;if(Ea(e))return!Ur(e).length;for(var n in e)if(Fe.call(e,n))return!1;return!0},qn.isEqual=function(e,t){return Dr(e,t)},qn.isEqualWith=function(e,t,r){var i=(r="function"==typeof r?r:n)?r(e,t):n;return i===n?Dr(e,t,n,r):!!i},qn.isError=es,qn.isFinite=function(e){return"number"==typeof e&&gn(e)},qn.isFunction=ts,qn.isInteger=ns,qn.isLength=rs,qn.isMap=os,qn.isMatch=function(e,t){return e===t||Mr(e,t,pa(t))},qn.isMatchWith=function(e,t,r){return r="function"==typeof r?r:n,Mr(e,t,pa(t),r)},qn.isNaN=function(e){return ss(e)&&e!=+e},qn.isNative=function(e){if(_a(e))throw new _e("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return Fr(e)},qn.isNil=function(e){return null==e},qn.isNull=function(e){return null===e},qn.isNumber=ss,qn.isObject=is,qn.isObjectLike=as,qn.isPlainObject=us,qn.isRegExp=ls,qn.isSafeInteger=function(e){return ns(e)&&e>=-9007199254740991&&e<=p},qn.isSet=cs,qn.isString=fs,qn.isSymbol=ds,qn.isTypedArray=ps,qn.isUndefined=function(e){return e===n},qn.isWeakMap=function(e){return as(e)&&ya(e)==R},qn.isWeakSet=function(e){return as(e)&&"[object WeakSet]"==Lr(e)},qn.join=function(e,t){return null==e?"":xn.call(e,t)},qn.kebabCase=Hs,qn.last=Za,qn.lastIndexOf=function(e,t,r){var i=null==e?0:e.length;if(!i)return-1;var a=i;return r!==n&&(a=(a=gs(r))<0?wn(i+a,0):kn(a,i-1)),t==t?function(e,t,n){for(var r=n+1;r--;)if(e[r]===t)return r;return r}(e,t,a):Vt(e,qt,a,!0)},qn.lowerCase=Ks,qn.lowerFirst=Qs,qn.lt=hs,qn.lte=ms,qn.max=function(e){return e&&e.length?gr(e,su,Ar):n},qn.maxBy=function(e,t){return e&&e.length?gr(e,fa(t,2),Ar):n},qn.mean=function(e){return Jt(e,su)},qn.meanBy=function(e,t){return Jt(e,fa(t,2))},qn.min=function(e){return e&&e.length?gr(e,su,Br):n},qn.minBy=function(e,t){return e&&e.length?gr(e,fa(t,2),Br):n},qn.stubArray=xu,qn.stubFalse=bu,qn.stubObject=function(){return{}},qn.stubString=function(){return""},qn.stubTrue=function(){return!0},qn.multiply=Eu,qn.nth=function(e,t){return e&&e.length?$r(e,gs(t)):n},qn.noConflict=function(){return pt._===this&&(pt._=ze),this},qn.noop=du,qn.now=Oo,qn.pad=function(e,t,n){e=ks(e);var r=(t=gs(t))?pn(e):0;if(!t||r>=t)return e;var i=(t-r)/2;return Wi(gt(i),n)+e+Wi(yt(i),n)},qn.padEnd=function(e,t,n){e=ks(e);var r=(t=gs(t))?pn(e):0;return t&&r<t?e+Wi(t-r,n):e},qn.padStart=function(e,t,n){e=ks(e);var r=(t=gs(t))?pn(e):0;return t&&r<t?Wi(t-r,n)+e:e},qn.parseInt=function(e,t,n){return n||null==t?t=0:t&&(t=+t),Tn(ks(e).replace(oe,""),t||0)},qn.random=function(e,t,r){if(r&&"boolean"!=typeof r&&ka(e,t,r)&&(t=r=n),r===n&&("boolean"==typeof t?(r=t,t=n):"boolean"==typeof e&&(r=e,e=n)),e===n&&t===n?(e=0,t=1):(e=ys(e),t===n?(t=e,e=0):t=ys(t)),e>t){var i=e;e=t,t=i}if(r||e%1||t%1){var a=_n();return kn(e+a*(t-e+lt("1e-"+((a+"").length-1))),t)}return Yr(e,t)},qn.reduce=function(e,t,n){var r=Ho(e)?Dt:Wt,i=arguments.length<3;return r(e,fa(t,4),n,i,mr)},qn.reduceRight=function(e,t,n){var r=Ho(e)?Mt:Wt,i=arguments.length<3;return r(e,fa(t,4),n,i,vr)},qn.repeat=function(e,t,r){return t=(r?ka(e,t,r):t===n)?1:gs(t),Xr(ks(e),t)},qn.replace=function(){var e=arguments,t=ks(e[0]);return e.length<3?t:t.replace(e[1],e[2])},qn.result=function(e,t,r){var i=-1,a=(t=ki(t,e)).length;for(a||(a=1,e=n);++i<a;){var o=null==e?n:e[Va(t[i])];o===n&&(i=a,o=r),e=ts(o)?o.call(e):o}return e},qn.round=Su,qn.runInContext=e,qn.sample=function(e){return(Ho(e)?er:ei)(e)},qn.size=function(e){if(null==e)return 0;if(Qo(e))return fs(e)?pn(e):e.length;var t=ya(e);return t==_||t==O?e.size:Ur(e).length},qn.snakeCase=Ys,qn.some=function(e,t,r){var i=Ho(e)?Ft:si;return r&&ka(e,t,r)&&(t=n),i(e,fa(t,3))},qn.sortedIndex=function(e,t){return ui(e,t)},qn.sortedIndexBy=function(e,t,n){return li(e,t,fa(n,2))},qn.sortedIndexOf=function(e,t){var n=null==e?0:e.length;if(n){var r=ui(e,t);if(r<n&&Jo(e[r],t))return r}return-1},qn.sortedLastIndex=function(e,t){return ui(e,t,!0)},qn.sortedLastIndexBy=function(e,t,n){return li(e,t,fa(n,2),!0)},qn.sortedLastIndexOf=function(e,t){if(null==e?0:e.length){var n=ui(e,t,!0)-1;if(Jo(e[n],t))return n}return-1},qn.startCase=Xs,qn.startsWith=function(e,t,n){return e=ks(e),n=null==n?0:cr(gs(n),0,e.length),t=di(t),e.slice(n,n+t.length)==t},qn.subtract=Lu,qn.sum=function(e){return e&&e.length?Ht(e,su):0},qn.sumBy=function(e,t){return e&&e.length?Ht(e,fa(t,2)):0},qn.template=function(e,t,r){var i=qn.templateSettings;r&&ka(e,t,r)&&(t=n),e=ks(e),t=_s({},t,i,ta);var a,o,s=_s({},t.imports,i.imports,ta),u=Ds(s),l=Xt(s,u),c=0,f=t.interpolate||ke,d="__p += '",p=Ae((t.escape||ke).source+"|"+f.source+"|"+(f===ee?he:ke).source+"|"+(t.evaluate||ke).source+"|$","g"),h="//# sourceURL="+(Fe.call(t,"sourceURL")?(t.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++at+"]")+"\n";e.replace(p,(function(t,n,r,i,s,u){return r||(r=i),d+=e.slice(c,u).replace(Ne,on),n&&(a=!0,d+="' +\n__e("+n+") +\n'"),s&&(o=!0,d+="';\n"+s+";\n__p += '"),r&&(d+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),c=u+t.length,t})),d+="';\n";var m=Fe.call(t,"variable")&&t.variable;if(m){if(de.test(m))throw new _e("Invalid `variable` option passed into `_.template`")}else d="with (obj) {\n"+d+"\n}\n";d=(o?d.replace(G,""):d).replace($,"$1").replace(W,"$1;"),d="function("+(m||"obj")+") {\n"+(m?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(a?", __e = _.escape":"")+(o?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+d+"return __p\n}";var v=nu((function(){return Ee(u,h+"return "+d).apply(n,l)}));if(v.source=d,es(v))throw v;return v},qn.times=function(e,t){if((e=gs(e))<1||e>p)return[];var n=v,r=kn(e,v);t=fa(t),e-=v;for(var i=Kt(r,t);++n<e;)t(n);return i},qn.toFinite=ys,qn.toInteger=gs,qn.toLength=xs,qn.toLower=function(e){return ks(e).toLowerCase()},qn.toNumber=bs,qn.toSafeInteger=function(e){return e?cr(gs(e),-9007199254740991,p):0===e?e:0},qn.toString=ks,qn.toUpper=function(e){return ks(e).toUpperCase()},qn.trim=function(e,t,r){if((e=ks(e))&&(r||t===n))return Qt(e);if(!e||!(t=di(t)))return e;var i=hn(e),a=hn(t);return Ti(i,en(i,a),tn(i,a)+1).join("")},qn.trimEnd=function(e,t,r){if((e=ks(e))&&(r||t===n))return e.slice(0,mn(e)+1);if(!e||!(t=di(t)))return e;var i=hn(e);return Ti(i,0,tn(i,hn(t))+1).join("")},qn.trimStart=function(e,t,r){if((e=ks(e))&&(r||t===n))return e.replace(oe,"");if(!e||!(t=di(t)))return e;var i=hn(e);return Ti(i,en(i,hn(t))).join("")},qn.truncate=function(e,t){var r=30,i="...";if(is(t)){var a="separator"in t?t.separator:a;r="length"in t?gs(t.length):r,i="omission"in t?di(t.omission):i}var o=(e=ks(e)).length;if(sn(e)){var s=hn(e);o=s.length}if(r>=o)return e;var u=r-pn(i);if(u<1)return i;var l=s?Ti(s,0,u).join(""):e.slice(0,u);if(a===n)return l+i;if(s&&(u+=l.length-u),ls(a)){if(e.slice(u).search(a)){var c,f=l;for(a.global||(a=Ae(a.source,ks(me.exec(a))+"g")),a.lastIndex=0;c=a.exec(f);)var d=c.index;l=l.slice(0,d===n?u:d)}}else if(e.indexOf(di(a),u)!=u){var p=l.lastIndexOf(a);p>-1&&(l=l.slice(0,p))}return l+i},qn.unescape=function(e){return(e=ks(e))&&Q.test(e)?e.replace(H,vn):e},qn.uniqueId=function(e){var t=++Pe;return ks(e)+t},qn.upperCase=Zs,qn.upperFirst=eu,qn.each=ko,qn.eachRight=No,qn.first=Ka,fu(qn,(_u={},Nr(qn,(function(e,t){Fe.call(qn.prototype,t)||(_u[t]=e)})),_u),{chain:!1}),qn.VERSION="4.17.21",St(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(e){qn[e].placeholder=qn})),St(["drop","take"],(function(e,t){Wn.prototype[e]=function(r){r=r===n?1:wn(gs(r),0);var i=this.__filtered__&&!t?new Wn(this):this.clone();return i.__filtered__?i.__takeCount__=kn(r,i.__takeCount__):i.__views__.push({size:kn(r,v),type:e+(i.__dir__<0?"Right":"")}),i},Wn.prototype[e+"Right"]=function(t){return this.reverse()[e](t).reverse()}})),St(["filter","map","takeWhile"],(function(e,t){var n=t+1,r=1==n||3==n;Wn.prototype[e]=function(e){var t=this.clone();return t.__iteratees__.push({iteratee:fa(e,3),type:n}),t.__filtered__=t.__filtered__||r,t}})),St(["head","last"],(function(e,t){var n="take"+(t?"Right":"");Wn.prototype[e]=function(){return this[n](1).value()[0]}})),St(["initial","tail"],(function(e,t){var n="drop"+(t?"":"Right");Wn.prototype[e]=function(){return this.__filtered__?new Wn(this):this[n](1)}})),Wn.prototype.compact=function(){return this.filter(su)},Wn.prototype.find=function(e){return this.filter(e).head()},Wn.prototype.findLast=function(e){return this.reverse().find(e)},Wn.prototype.invokeMap=Zr((function(e,t){return"function"==typeof e?new Wn(this):this.map((function(n){return Rr(n,e,t)}))})),Wn.prototype.reject=function(e){return this.filter(Uo(fa(e)))},Wn.prototype.slice=function(e,t){e=gs(e);var r=this;return r.__filtered__&&(e>0||t<0)?new Wn(r):(e<0?r=r.takeRight(-e):e&&(r=r.drop(e)),t!==n&&(r=(t=gs(t))<0?r.dropRight(-t):r.take(t-e)),r)},Wn.prototype.takeRightWhile=function(e){return this.reverse().takeWhile(e).reverse()},Wn.prototype.toArray=function(){return this.take(v)},Nr(Wn.prototype,(function(e,t){var r=/^(?:filter|find|map|reject)|While$/.test(t),i=/^(?:head|last)$/.test(t),a=qn[i?"take"+("last"==t?"Right":""):t],o=i||/^find/.test(t);a&&(qn.prototype[t]=function(){var t=this.__wrapped__,s=i?[1]:arguments,u=t instanceof Wn,l=s[0],c=u||Ho(t),f=function(e){var t=a.apply(qn,jt([e],s));return i&&d?t[0]:t};c&&r&&"function"==typeof l&&1!=l.length&&(u=c=!1);var d=this.__chain__,p=!!this.__actions__.length,h=o&&!d,m=u&&!p;if(!o&&c){t=m?t:new Wn(this);var v=e.apply(t,s);return v.__actions__.push({func:yo,args:[f],thisArg:n}),new $n(v,d)}return h&&m?e.apply(this,s):(v=this.thru(f),h?i?v.value()[0]:v.value():v)})})),St(["pop","push","shift","sort","splice","unshift"],(function(e){var t=Ce[e],n=/^(?:push|sort|unshift)$/.test(e)?"tap":"thru",r=/^(?:pop|shift)$/.test(e);qn.prototype[e]=function(){var e=arguments;if(r&&!this.__chain__){var i=this.value();return t.apply(Ho(i)?i:[],e)}return this[n]((function(n){return t.apply(Ho(n)?n:[],e)}))}})),Nr(Wn.prototype,(function(e,t){var n=qn[t];if(n){var r=n.name+"";Fe.call(jn,r)||(jn[r]=[]),jn[r].push({name:t,func:n})}})),jn[qi(n,2).name]=[{name:"wrapper",func:n}],Wn.prototype.clone=function(){var e=new Wn(this.__wrapped__);return e.__actions__=Ci(this.__actions__),e.__dir__=this.__dir__,e.__filtered__=this.__filtered__,e.__iteratees__=Ci(this.__iteratees__),e.__takeCount__=this.__takeCount__,e.__views__=Ci(this.__views__),e},Wn.prototype.reverse=function(){if(this.__filtered__){var e=new Wn(this);e.__dir__=-1,e.__filtered__=!0}else(e=this.clone()).__dir__*=-1;return e},Wn.prototype.value=function(){var e=this.__wrapped__.value(),t=this.__dir__,n=Ho(e),r=t<0,i=n?e.length:0,a=function(e,t,n){var r=-1,i=n.length;for(;++r<i;){var a=n[r],o=a.size;switch(a.type){case"drop":e+=o;break;case"dropRight":t-=o;break;case"take":t=kn(t,e+o);break;case"takeRight":e=wn(e,t-o)}}return{start:e,end:t}}(0,i,this.__views__),o=a.start,s=a.end,u=s-o,l=r?s:o-1,c=this.__iteratees__,f=c.length,d=0,p=kn(u,this.__takeCount__);if(!n||!r&&i==u&&p==u)return yi(e,this.__actions__);var h=[];e:for(;u--&&d<p;){for(var m=-1,v=e[l+=t];++m<f;){var y=c[m],g=y.iteratee,x=y.type,b=g(v);if(2==x)v=b;else if(!b){if(1==x)continue e;break e}}h[d++]=v}return h},qn.prototype.at=go,qn.prototype.chain=function(){return vo(this)},qn.prototype.commit=function(){return new $n(this.value(),this.__chain__)},qn.prototype.next=function(){this.__values__===n&&(this.__values__=vs(this.value()));var e=this.__index__>=this.__values__.length;return{done:e,value:e?n:this.__values__[this.__index__++]}},qn.prototype.plant=function(e){for(var t,r=this;r instanceof Gn;){var i=za(r);i.__index__=0,i.__values__=n,t?a.__wrapped__=i:t=i;var a=i;r=r.__wrapped__}return a.__wrapped__=e,t},qn.prototype.reverse=function(){var e=this.__wrapped__;if(e instanceof Wn){var t=e;return this.__actions__.length&&(t=new Wn(this)),(t=t.reverse()).__actions__.push({func:yo,args:[ro],thisArg:n}),new $n(t,this.__chain__)}return this.thru(ro)},qn.prototype.toJSON=qn.prototype.valueOf=qn.prototype.value=function(){return yi(this.__wrapped__,this.__actions__)},qn.prototype.first=qn.prototype.head,nt&&(qn.prototype[nt]=function(){return this}),qn}();mt?((mt.exports=yn)._=yn,ht._=yn):pt._=yn}).call(u)}(zh,zh.exports);const qh=()=>{const[t,n]=e.useState({horizontalIndex:0,verticalIndex:0}),[r,i]=e.useState((()=>Reveal.getCurrentSlide()));return e.useEffect((()=>{const{h:e,v:t,f:r}=Reveal.getIndices();n({horizontalIndex:e,verticalIndex:t,fragmentIndex:r})}),[]),e.useEffect((()=>{const e=()=>{const{h:e,v:t,f:r}=Reveal.getIndices();n({horizontalIndex:e,verticalIndex:t,fragmentIndex:r}),i(Reveal.getCurrentSlide())};return Reveal.addEventListener("slidechanged",e),Reveal.addEventListener("fragmentshown",e),Reveal.addEventListener("fragmenthidden",e),()=>{Reveal.removeEventListener("slidechanged",e),Reveal.removeEventListener("fragmentshown",e),Reveal.removeEventListener("fragmenthidden",e)}}),[]),{slide:t,slideElement:r}},Jh=(e,t)=>e.horizontalIndex===t.horizontalIndex&&(e.verticalIndex===t.verticalIndex||[0,void 0].includes(e.verticalIndex)&&[0,void 0].includes(t.verticalIndex)),Gh=e.createContext(null);const $h=()=>{const t=e.useContext(Gh);if(!t)throw new Error("usePresence must be used within PresenceProvider");return t},Wh=({groupId:e,onMessageReceived:t,pause:n=!1}={})=>{const[{fetching:r,data:i,error:a}]=(o={variables:{first:20,groupId:e},pause:n},Sd({query:jp,...o}));var o;const s=i?.messages.nodes??[],{client:u}=eh();!function(e={},t){Ld({query:Gp,...e},t)}({variables:{groupId:e},pause:n},((e,n)=>(n?.messageWasSent&&t?.(n.messageWasSent),n)));const[{fetching:l},c]=_d(_p);return{messages:s,fetching:r,error:a,fetchMoreMessages:async()=>{const{endCursor:t,hasNextPage:n}=i?.messages.pageInfo||{};n&&await u.query(jp,{first:20,after:t,groupId:e}).toPromise()},sendMessage:To((async(t,n)=>{await c({text:t,parentMessage:n?.id,groupId:e})})),sending:l}},Hh=e.createContext(null),Kh=()=>{const t=e.useContext(Hh);if(!t)throw new Error("useChat must be used within a ChatProvider");return t},Qh=e.createContext(null),Yh=()=>{const t=e.useContext(Qh);if(!t)throw new Error("useGroup must be used within a GroupProvider");return t},Xh=e.createContext(null),Zh=()=>{const t=e.useContext(Xh);if(!t)throw new Error("useChat must be used within a ChatProvider");return t},em=t=>{const[n]=(r={variables:{annotationId:t.id}},Sd({query:Ap,...r}));var r;Pp({variables:{annotationId:t.id}});const i=e.useMemo((()=>n.data?.comments??[]),[n.data?.comments]),[,a]=_d(lp);return{comments:i,addComment:e.useCallback((async e=>{await a({annotationId:t.id,text:e})}),[t.id,a])}};function tm(){const[t,n]=e.useState(!1),[{view:r,zenMode:i,showAnnotationHighlights:a},{switchView:o,toggle:s}]=lh(),[{presence:u}]=$h(),[c,f]=e.useState(0),[{events:d}]=Kh(),p=To((()=>{"chat"!==r?.id&&f((e=>e+1))}));e.useEffect((()=>(d.on("message-received",p),()=>{d.off("message-received",p)})),[d,p]);const[h,m]=e.useState(0),[{events:v}]=Zh(),y=To((()=>{"group"!==r?.id&&m((e=>e+1))}));e.useEffect((()=>(v.on("message-received",y),()=>{v.off("message-received",y)})),[v,y]),(t=>{const[,{switchView:n}]=lh(),[r]=Fh(),i=$a(r.annotations);e.useEffect((()=>{if(!t)return;const e=e=>{if(!(e.target instanceof HTMLElement))return;const t=e.target.closest("annotation-highlight");if(!t)return;const a=i.current.find((e=>e.id===t.dataset.annotationId));a&&(n("annotation",!1),setTimeout((()=>{r.events.emit("highlight:click",a)}),100))};return document.addEventListener("click",e),()=>document.removeEventListener("click",e)}),[t,i,n])})(!i&&a);const[g,x]=e.useState(0),[{events:b}]=Fh(),w=To((()=>{"annotation"!==r?.id&&x((e=>e+1))}));return e.useEffect((()=>(b.on("annotation:created",w),b.on("comment:created",w),()=>{b.off("annotation:created",w),b.off("comment:created",w)})),[b,w]),l.exports.jsx("div",{className:"flex space-x-4 items-center mb-4 flex-shrink-0",children:i?l.exports.jsx(Vh,{color:"transparent",size:"md",icon:t?K:W,title:"Disable Zen mode",onClick:()=>s("zenMode"),onMouseEnter:()=>n(!0),onMouseLeave:()=>n(!1),children:l.exports.jsx("span",{className:"sr-only",children:"Disable Zen mode"})}):sh.filter((({enabled:e})=>e())).map((e=>l.exports.jsxs("div",{className:"relative",children:[l.exports.jsx(Vh,{color:"transparent",size:"md",icon:e.id===r?.id?e.activeIcon:e.icon,title:e.name,onClick:()=>{o(e),"chat"===e.id&&f(0),"group"===e.id&&m(0),"annotation"===e.id&&x(0)},children:l.exports.jsx("span",{className:"sr-only",children:e.name})}),"participants"===e.id&&l.exports.jsx(Bh,{children:u+1}),"chat"===e.id&&c>0&&l.exports.jsx(Bh,{children:c}),"group"===e.id&&h>0&&l.exports.jsx(Bh,{children:h}),"annotation"===e.id&&g>0&&l.exports.jsx(Bh,{children:g})]},e.id)))})}function nm({label:e,description:t,name:n,value:r,onChange:i,disabled:a=!1,className:o,reverseAligned:s,size:u="md"}){return l.exports.jsxs(na.Group,{as:"div",className:lt("flex items-center justify-between",s&&"flex-row-reverse",o),children:[e&&l.exports.jsxs("span",{className:lt("flex-grow flex flex-col",s?"ml-3":"mr-3"),children:[l.exports.jsx(na.Label,{as:uu,className:"!text-gray-900",passive:!0,children:e}),t&&l.exports.jsx(na.Description,{as:"span",className:"text-sm text-gray-500",children:t})]}),l.exports.jsxs(na,{as:"button",type:"button",name:n,checked:r,onChange:i,disabled:a,className:lt(r?"bg-primary-600":"bg-gray-200","relative inline-flex flex-shrink-0 border-2 border-transparent rounded-full cursor-pointer transition-colors ease-in-out duration-200 focus:outline-none",{"h-5 w-9":"sm"===u,"h-6 w-11":"md"===u},{"cursor-not-allowed":a}),children:[l.exports.jsx("span",{className:"sr-only",children:"Use setting"}),l.exports.jsx("span",{"aria-hidden":"true",className:lt(r?"sm"===u?"translate-x-4":"translate-x-5":"translate-x-0","pointer-events-none inline-block  rounded-full bg-white shadow transform ring-0 transition ease-in-out duration-200",{"h-4 w-4":"sm"===u,"h-5 w-5":"md"===u})})]})]})}function rm(){const[{zenMode:e,showCursors:t,showOnlyGroupCursors:n,showAnnotationHighlights:r},{toggle:i}]=lh(),[{group:a}]=Yh(),o=ah();return l.exports.jsxs("div",{className:"w-full divide-solid divide-y divide-gray-200 [&>*]:py-6",children:[l.exports.jsx(nm,{value:e,onChange:()=>i("zenMode"),label:"Zen Mode",description:"Activate Zen-mode to remove all distractions, including annotation, notifications, and controls."}),o.cursors&&l.exports.jsxs(l.exports.Fragment,{children:[l.exports.jsx(nm,{disabled:e||n,value:!e&&(!!n||t),onChange:()=>i("showCursors"),label:"Show Cursors",description:"Show the cursors of other participants on the slide you're currently on."}),l.exports.jsx(nm,{disabled:e||!a,value:!e&&n,onChange:()=>i("showOnlyGroupCursors"),label:"Show Group Cursors Only",description:"Show the cursors of other participants in your group only."})]}),o.annotations&&l.exports.jsx(nm,{disabled:e,value:!e&&r,onChange:()=>i("showAnnotationHighlights"),label:"Show annotation highlights",description:"Show the highlights of other participants' annotations on the slide you're currently on."})]})}function im(){return l.exports.jsx("div",{className:"w-full h-full flex flex-col",children:l.exports.jsx(rm,{})})}function am({type:t="info",title:n,children:r,submitText:i,onSubmit:a,...o}){const s=lt(["mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10",{"bg-green-100":"success"===t,"bg-blue-100":"info"===t,"bg-red-100":"error"===t}]),u=lt(["h-6 w-6",{"text-green-600":"success"===t,"text-blue-600":"info"===t,"text-red-600":"error"===t}]),c=void 0!==a,f=e.useRef(null);return l.exports.jsxs(iu,{stretch:!0,initialFocus:f,...o,children:[l.exports.jsxs("div",{className:"sm:flex sm:items-start",children:[l.exports.jsxs("div",{className:s,children:["success"===t&&l.exports.jsx(Be,{className:u,"aria-hidden":"true"}),"info"===t&&l.exports.jsx(Ge,{className:u,"aria-hidden":"true"}),"error"===t&&l.exports.jsx(qe,{className:u,"aria-hidden":"true"})]}),l.exports.jsxs("div",{className:"mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left",children:[l.exports.jsx(iu.Title,{as:"h3",className:"text-lg leading-6 font-medium text-gray-900",children:n}),l.exports.jsx("div",{className:"mt-2",children:l.exports.jsx("p",{className:"text-sm text-gray-500",children:r})})]})]}),l.exports.jsxs("div",{className:"mt-5 sm:mt-4 sm:flex sm:flex-row-reverse",children:[l.exports.jsx(nu,{ref:c?f:void 0,color:"error"===t?"red":"primary",className:"w-full sm:ml-3 sm:w-auto",onClick:()=>{a?.(),o.onClose?.(!1)},children:i||"OK"}),c&&l.exports.jsx(nu,{ref:f,type:"button",color:"white",className:"mt-3 w-full sm:mt-0 sm:w-auto",onClick:()=>o.onClose?.(!1),children:"Cancel"})]})]})}const om=e.forwardRef((function({id:t,label:n,hint:r,error:i,className:a,disabled:o=!1,icon:s,iconClassName:u,iconPosition:c="leading",addon:f,addonPosition:d="leading",...p},h){const m=e.useMemo((()=>Boolean(s)),[s]),v=e.useMemo((()=>Boolean(f)),[f]),y=e.useMemo((()=>lt("flex",{"mt-1":n||r,"relative rounded-sm":m})),[n,r,m]),g=e.useMemo((()=>lt("form-input block w-full rounded-md py-2 placeholder-[#d1d2da] border text-sm focus:outline-0 focus:ring-0",{"px-3":!m,"pl-10":m&&"leading"===c,"pr-10":m&&"trailing"===c,"border-gray-200 hover:border-gray-300 focus:border-primary-500":!i,"text-red-900 placeholder-red-300 border-red-300 hover:border-red-400 focus:border-red-500":i,"bg-gray-100":o,"rounded-r-md rounded-l-none":v&&"leading"===d,"rounded-l-md rounded-r-none":v&&"trailing"===d})),[d,o,i,v,m,c]),x=e.useMemo((()=>lt("text-sm inline-flex items-center px-3 border border-gray-200 bg-gray-50 text-gray-500 whitespace-nowrap",{"rounded-l-md border-r-0":"leading"===d,"rounded-r-md border-l-0":"trailing"===d})),[d]);return l.exports.jsxs("div",{children:[Boolean(n||r)&&l.exports.jsxs("div",{className:lt("flex",n?"justify-between":"justify-end"),children:[n&&l.exports.jsx(uu,{htmlFor:t,children:n}),Boolean(r)&&l.exports.jsx("span",{className:"text-sm text-gray-500",children:r})]}),l.exports.jsxs("div",{className:y,children:[s&&"leading"===c?l.exports.jsx("div",{className:"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none",children:l.exports.jsx(s,{className:lt("h-5 w-5",u,i?"text-red-500":"text-gray-400"),"aria-hidden":"true"})}):null,f&&"leading"===d?"string"==typeof f?l.exports.jsx("span",{className:x,children:f}):f({className:x}):null,l.exports.jsx("input",{id:t,disabled:o,className:lt(g,a),...p,ref:h}),s&&"trailing"===c?l.exports.jsx("div",{className:"absolute inset-y-0 right-0 pr-3 flex items-center text-gray-300'",children:l.exports.jsx(s,{className:lt("h-5 w-5",u,i?"text-red-500":"text-gray-400"),"aria-hidden":"true"})}):null,f&&"trailing"===d?"string"==typeof f?l.exports.jsx("span",{className:x,children:f}):f({className:x}):null]}),Boolean(i)&&l.exports.jsx("p",{className:"text-xs text-red-600",children:i})]})})),sm=/^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i;function um({onSubmit:e,...t}){const[,{joinLecture:n}]=ih(),{success:r,error:i}=Cd(),{register:a,handleSubmit:o,formState:{errors:s,isSubmitting:u}}=eu({defaultValues:{lectureId:""},mode:"onBlur",reValidateMode:"onChange",criteriaMode:"firstError"});return l.exports.jsxs(iu,{...t,size:"md",stretch:!0,children:[l.exports.jsx(iu.Title,{as:"h3",className:"font-bold text-gray-900 text-lg",children:"Join Lecture"}),l.exports.jsx(iu.Content,{children:l.exports.jsxs("form",{onSubmit:Pd(o((async({lectureId:a})=>{const o=await n(a);if(e?.(),t?.onClose?.(!1),!o)throw i("Lecture not found!"),new Error("Lecture not found");r(`Lecture "${o.name}" joined!`)}))),className:"space-y-4",children:[l.exports.jsx(om,{label:"Lecture identifier",type:"text",...a("lectureId",{required:!0,pattern:{value:sm,message:"Invalid identifier. It must be a UUID"}}),error:s.lectureId?.message}),l.exports.jsx(nu,{type:"submit",loading:u,className:"w-full",children:"Join lecture"})]})})]})}function lm(){const[{lecture:t},{updateLecture:n}]=ih(),r=e.useMemo((()=>({name:t?.name??""})),[t?.name]),{register:i,handleSubmit:a,reset:o,formState:{errors:s,isSubmitting:u,isDirty:c}}=eu({defaultValues:r,mode:"onBlur",reValidateMode:"onChange",criteriaMode:"firstError"});return e.useEffect((()=>{o(r)}),[r,o]),l.exports.jsxs("form",{onSubmit:Pd(a((async({name:e})=>{await n(e),o({...r,name:e})}))),className:"space-y-4 py-6 px-2",children:[l.exports.jsx(om,{label:"Name",type:"text",...i("name",{required:!0,minLength:3,maxLength:52}),error:s.name?.message}),l.exports.jsx(nu,{type:"submit",loading:u,disabled:!c,className:"w-full mt-8",children:"Update lecture"})]})}function cm(){const[{lecture:e}]=ih();return l.exports.jsxs("div",{className:"w-full",children:[l.exports.jsx("h1",{className:"text-gray-700 text-xl font-bold mb-1 whitespace-pre-wrap",children:e.name}),l.exports.jsxs("p",{className:"text-gray-500 text-base font-semibold truncate",title:e.owner.name,children:["Instructor: ",e.owner.name]})]})}function fm({onSubmit:e,...t}){const[,{createLecture:n}]=ih(),{success:r}=Cd(),{register:i,handleSubmit:a,formState:{errors:o,isSubmitting:s}}=eu({defaultValues:{name:""},mode:"onBlur",reValidateMode:"onChange",criteriaMode:"firstError"});return l.exports.jsxs(iu,{...t,size:"md",stretch:!0,children:[l.exports.jsx(iu.Title,{as:"h3",className:"font-bold text-gray-900 text-lg",children:"Create Lecture"}),l.exports.jsx(iu.Content,{children:l.exports.jsxs("form",{onSubmit:Pd(a((async({name:i})=>{await n(i),e?.(),t?.onClose?.(!1),r(`Lecture "${i}" created!`)}))),className:"space-y-4",children:[l.exports.jsx(om,{label:"Name",type:"text",...i("name",{required:!0,minLength:3,maxLength:52}),error:o.name?.message}),l.exports.jsx(nu,{type:"submit",loading:s,className:"w-full",children:"Create lecture"})]})})]})}function dm(){const[{lecture:t},{leaveLecture:n,deleteLecture:r}]=ih(),[{user:i}]=nh(),a=t.owner.id===i.id,[o,s]=e.useState(!1),[u,c]=e.useState(!1),[f,d]=e.useState(!1);return l.exports.jsxs("div",{className:"w-full h-full flex flex-col justify-between",children:[l.exports.jsxs("div",{className:"w-full",children:[l.exports.jsx(cm,{}),i.isInstructor&&l.exports.jsx(lm,{})]}),l.exports.jsxs("div",{className:"space-y-6",children:[i.isInstructor&&l.exports.jsxs(l.exports.Fragment,{children:[l.exports.jsx(nu,{type:"button",color:"white",className:"w-full",onClick:()=>s(!0),icon:ye,children:"Create lecture"}),l.exports.jsx(fm,{open:o,onClose:s})]}),l.exports.jsx(nu,{type:"button",color:"white",className:"w-full",onClick:()=>c(!0),icon:De,children:"Switch lecture"}),l.exports.jsx(um,{open:u,onClose:c}),l.exports.jsx(nu,{type:"button",color:"red",className:"w-full",onClick:()=>d(!0),icon:Re,children:a?"Delete lecture":"Leave lecture"}),l.exports.jsx(am,{type:"error",open:f,onClose:d,title:a?"Delete lecture":"Leave lecture",submitText:a?"Delete":"Leave",onSubmit:()=>{a?r():n()},children:a?"Are you sure you want to delete this lecture? All data regarding the lecture will be lost.":"Are you sure you want to leave this lecture? You can join later again if you wish to."})]})]})}function pm({onChange:t,placeholder:n="Search ...",className:r}){const i=e.useRef(null),[a,o]=e.useState("");e.useEffect((()=>{const e=setTimeout((()=>{t(a)}),500);return()=>clearTimeout(e)}),[a,t]);return l.exports.jsx(om,{ref:i,value:a,onChange:({target:e})=>o(e.value),placeholder:n,inputMode:"search",autoComplete:"off",icon:fe,iconPosition:"leading",className:r,onKeyUp:({key:e})=>"Escape"===e&&(o(""),void i.current?.focus())})}function hm({text:t,children:n,icon:r,...i}){const[a,o]=e.useState(!1),s=To((()=>{navigator.clipboard.writeText(t),o(!0),setTimeout((()=>o(!1)),2e3)}));return l.exports.jsx(nu,{...i,onClick:s,icon:a?Z:r,children:a?"Copied!":n})}const mm=({disabled:e=!1,className:t,children:n,onClick:r,...i})=>{const a=e=>lt(t,"w-full py-2 px-4 flex items-center space-x-2 focus:outline-none text-xs rounded text-gray-500 hover:text-gray-700 transition-colors duration-200 ease-linear",e&&"bg-primary-100");return l.exports.jsx(Wi.Item,{disabled:e,children:({active:e})=>l.exports.jsx("button",{type:"button",...i,className:a(e),onClick:e=>{e.stopPropagation(),r(e)},children:n})})};mm.displayName="Drodown.Item";const vm=({button:t,children:n,position:r="bottom-start",className:i})=>{const[a,o]=e.useState(),s=e.useRef(null),[u,c]=e.useState(),{styles:f,attributes:d}=Dn(a,u,{strategy:"absolute",placement:r,modifiers:[{name:"offset",options:{offset:[0,8]}}]});return l.exports.jsx(Wi,{as:"div",className:"relative",children:({open:r})=>l.exports.jsxs(l.exports.Fragment,{children:[l.exports.jsx("div",{ref:o,className:"flex",children:l.exports.jsx(Wi.Button,{as:e.Fragment,children:t})}),l.exports.jsx(si,{children:l.exports.jsx("div",{ref:s,style:{...f.popper,zIndex:1000007},...d.popper,onClick:e=>e.stopPropagation(),children:l.exports.jsx(za,{show:r,as:e.Fragment,enter:"transition ease-out duration-200",enterFrom:"transform opacity-0 scale-95",enterTo:"transform opacity-100 scale-100",leave:"transition ease-in duration-75",leaveFrom:"transform opacity-100 scale-100",leaveTo:"transform opacity-0 scale-95",beforeEnter:()=>c(s.current),afterLeave:()=>c(null),children:l.exports.jsx(Wi.Items,{as:"div",static:!0,className:lt(i,"bg-white border border-slate-100 space-y-1 rounded-md z-40 min-w-[11rem] overflow-hidden p-1 shadow-md"),children:n})})})})]})})};vm.Item=mm;var ym=e.forwardRef((function({size:e="md",src:t,name:n,color:r,status:i=!1,className:a,style:o,...s},u){const c=lt({"w-6 h-6":"xs"===e,"w-8 h-8":"sm"===e,"w-10 h-10":"md"===e,"w-12 h-12":"lg"===e,"w-14 h-14":"xl"===e,"w-16 h-16":"2xl"===e});return l.exports.jsxs("span",{ref:u,className:lt(a,"relative inline-block border-2 border-solid rounded-full"),style:{borderColor:r,...o},...s,children:[t?l.exports.jsx("img",{className:lt("rounded-full",c),src:t,alt:n}):l.exports.jsx("span",{className:lt("inline-flex items-center justify-center rounded-full bg-gray-500",c),children:l.exports.jsx("span",{className:"font-medium leading-none text-white",children:n[0].toUpperCase()})}),!1!==i&&l.exports.jsx("span",{className:lt("absolute bottom-0 right-0 block rounded-full ring-2 ring-white","online"===i?"bg-green-400":"bg-gray-300",{"w-1.5 h-1.5":"xs"===e,"w-2 h-2":"sm"===e,"w-2.5 h-2.5":"md"===e,"w-3 h-3":"lg"===e,"w-3.5 h-3.5":"xl"===e,"w-4 h-4":"2xl"===e})})]})})),gm=e.forwardRef((function({participant:t,className:n,...r},i){const[{user:a}]=nh(),[{isOnline:o}]=$h(),s=t.id===a.id?`${t.name} (You)`:t.name,u=t.isInstructor?"Instructor":"Student",{online:c}=oo(),f=e.useMemo((()=>t.id===a.id?c:o(t.id)),[c,o,t.id,a.id]);return l.exports.jsxs("div",{ref:i,className:lt(n,"w-60 rounded-lg drop-shadow-lg bg-white p-4"),...r,children:[l.exports.jsxs("div",{className:"flex items-center mb-4",children:[l.exports.jsx("div",{className:"flex-shrink-0",children:l.exports.jsx(ym,{size:"lg",name:t.name,src:t.avatarUrl,color:t.profileColor,status:f?"online":"offline"})}),l.exports.jsxs("div",{className:"flex-1 ml-4",children:[l.exports.jsx("p",{className:"text-base font-medium text-gray-700",children:s}),l.exports.jsx("p",{className:"text-sm font-medium text-gray-500",children:u})]})]}),t.bio&&l.exports.jsx("div",{className:"relative",children:l.exports.jsxs("blockquote",{className:"text-base italic text-gray-700",children:[l.exports.jsx(Ja,{className:"absolute -top-1 -left-1 w-8 h-8 text-gray-200 -z-[1]","aria-hidden":"true"}),l.exports.jsxs("p",{children:['"',t.bio,'"']})]})})]})}));function xm({participant:t,onClick:n,noControls:r=!1}){const[{user:i}]=nh(),[,{kickParticipant:a}]=ih(),[{isOnline:o}]=$h(),s=t.id===i.id?`${t.name} (You)`:t.name,u=t.isInstructor?"Instructor":"Student",{online:c}=oo(),f=e.useMemo((()=>t.id===i.id?c:o(t.id)),[c,o,t.id,i.id]),[d,p]=e.useState(!1),[h,m]=e.useState(!1);e.useEffect((()=>{if(!d)return void m(!1);const e=setTimeout((()=>{m(!0)}),500);return()=>{clearTimeout(e)}}),[d]);const[v,y]=e.useState(null),[g,x]=e.useState(null),{attributes:b,styles:w}=Dn(v,g,{strategy:"absolute",placement:"top-start",modifiers:[{name:"offset",options:{offset:[0,8]}}]});return l.exports.jsxs("div",{className:"flex items-center justify-between",children:[l.exports.jsxs("div",{className:"flex items-center group cursor-pointer",onClick:n,children:[l.exports.jsxs("div",{children:[l.exports.jsx(ym,{ref:y,size:"sm",name:s,color:t.profileColor,src:t.avatarUrl,status:f?"online":"offline",className:"cursor-pointer",onMouseOver:()=>p(!0),onMouseOut:()=>p(!1)}),h&&l.exports.jsx(si,{children:l.exports.jsx(gm,{ref:x,...b.popper,participant:t,className:"z-40",style:w.popper})})]}),l.exports.jsxs("div",{className:"ml-3",children:[l.exports.jsx("p",{className:"text-sm font-medium text-gray-700 group-hover:text-gray-900",children:s}),l.exports.jsx("p",{className:"text-xs font-medium text-gray-500 group-hover:text-gray-700",children:u})]})]}),!r&&i.isInstructor&&i.id!==t.id&&l.exports.jsx(vm,{position:"bottom-end",button:l.exports.jsxs("button",{className:"hover:bg-gray-100 transition-colors duration-200 inline-flex items-center justify-center p-1 rounded focus:outline-none",children:[l.exports.jsx(re,{className:"w-5 h-5 text-gray-500"}),l.exports.jsx("span",{className:"sr-only",children:"More options"})]}),children:l.exports.jsxs(vm.Item,{onClick:()=>a(t.id),children:[l.exports.jsx(G,{className:"w-4 h-4"}),l.exports.jsx("span",{children:"Kick participant"})]})})]})}function bm(){const[{lecture:t,participants:n}]=ih(),[,{follow:r}]=$h(),[i,a]=e.useState(""),o=e.useMemo((()=>zh.exports.orderBy(n.filter((e=>{const t=e.name.toLowerCase(),n=i.toLowerCase();return t.includes(n)})),["isInstructor","name"],["desc","asc"])),[n,i]),s=e.useMemo((()=>`${`${window.location.origin}${window.location.pathname.replace(/\/$/,"")}`}?lectureId=${t.id}`),[t?.id]);return l.exports.jsxs("div",{className:"w-full h-full flex flex-col",children:[l.exports.jsx("div",{className:"w-full mb-2 flex-shrink-0",children:l.exports.jsx(hm,{size:"xxs",color:"transparent",icon:le,text:s,children:"Copy lecture link"})}),l.exports.jsx("div",{className:"w-full mb-6 flex-shrink-0",children:l.exports.jsx(pm,{onChange:a})}),l.exports.jsx("div",{className:"w-full overflow-y-auto flex-1 space-y-4",children:o.map((e=>l.exports.jsx(xm,{participant:e,onClick:()=>r(e.id)},e.id)))})]})}function wm({message:t,highlighted:n=!1,onReplyTo:r,onParentMessageClick:i}){const[{user:a}]=nh(),o=a.id===t.author?.id,s=t.author??{__typename:"User",name:"Deleted user",bio:"",email:"",id:"",isInstructor:!1,isStudent:!1,profileColor:"#71717a"},u=zh.exports.truncate(t.parent?.text,{length:100}),[c,f]=e.useState(!1),[d,p]=e.useState(!1);e.useEffect((()=>{if(!c)return void p(!1);const e=setTimeout((()=>{p(!0)}),500);return()=>{clearTimeout(e)}}),[c]);const[h,m]=e.useState(null),[v,y]=e.useState(null),{attributes:g,styles:x}=Dn(h,v,{strategy:"absolute",placement:"top-start",modifiers:[{name:"offset",options:{offset:[0,8]}}]});return l.exports.jsxs("div",{id:`message-${t.id}`,className:lt("flex mt-2 group",o?"flex-row-reverse":"flex-row"),children:[l.exports.jsxs("div",{className:lt("flex max-w-[80%] min-w-[40%]",o?"justify-end":"justify-start"),children:[!o&&l.exports.jsxs("div",{className:"flex-shrink-0",children:[l.exports.jsx(ym,{ref:m,size:"sm",name:s.name,color:s.profileColor,src:s?.avatarUrl,className:"cursor-pointer flex-shrink-0 mt-2 mr-2",onMouseOver:()=>f(!0),onMouseOut:()=>f(!1)}),d&&l.exports.jsx(si,{children:l.exports.jsx(gm,{ref:y,...g.popper,participant:s,className:"z-40",style:x.popper})})]}),l.exports.jsxs("div",{className:lt("p-1 rounded flex-grow drop-shadow transition-colors duration-200 ease-in-out",o&&!n?"bg-primary-300":"bg-white",n&&"bg-gray-300"),children:[!o&&l.exports.jsx("div",{className:"text-xs mb-0.5",style:{color:s.profileColor},children:s.name}),u&&l.exports.jsx("div",{className:"mb-1 rounded bg-primary-300 bg-opacity-50 border-l-4 border-solid border-primary-500 p-1 cursor-pointer",onClick:()=>i?.(),children:l.exports.jsx("p",{className:"text-xs break-words text-gray-600",children:u})}),l.exports.jsx("div",{className:"p-1 pb-0",children:l.exports.jsx("p",{className:"text-sm break-words text-gray-900",dangerouslySetInnerHTML:{__html:t.text.replace(/\n/g,"<br />")}})}),l.exports.jsx("div",{id:`${t.id}-date`,className:"ml-auto w-fit text-2xs mt-0.5 text-black text-opacity-50 pb-1 pr-1",children:t.createdAt.toLocaleTimeString(void 0,{timeStyle:"short"})}),l.exports.jsx(qa,{target:`${t.id}-date`,position:"bottom",size:"sm",theme:"light",children:t.createdAt.toLocaleString()})]})]}),l.exports.jsx("div",{className:lt("flex-grow self-center flex items-center h-full",o?"justify-end mr-2":"justify-start ml-2"),onDoubleClick:e=>{e.stopPropagation(),e.preventDefault(),r?.(t)},children:l.exports.jsx(Vh,{size:"2xs",color:"transparent",icon:G,className:"opacity-0 transition-all duration-200 ease-in-out group-hover:opacity-100",onClick:()=>r?.(t),children:l.exports.jsx("span",{className:"sr-only",children:"Reply"})})})]})}function km({date:e,className:t,...n}){const r=e.toLocaleDateString(void 0,{weekday:"long",year:"numeric",month:"numeric",day:"numeric"}),i=Fd(e,new Date),a=0===i?"Today":1===i?"Yesterday":r;return l.exports.jsx("div",{...n,className:lt(t,"mt-2 bg-gray-100 max-w-[75%] mx-auto px-2.5 py-1 rounded-lg border border-gray-100 text-xs text-gray-700 text-center"),children:a})}var Nm=e.forwardRef((function({replyTo:t,value:n,onChange:r,onSend:i,onRemoveReply:a,className:o,id:s="message",placeholder:u="Type your message",disabled:c=!1,name:f="message",...d},p){const h=e.useRef(null);((t,n)=>{e.useEffect((()=>{if(!t)return;const e="current"in t?t.current:t;if(!e)return;e.style.height="0px";const n=e.scrollHeight,r=parseInt(e.style.maxHeight||"0",10),i=parseInt(e.style.minHeight||"16",10);e.style.height=`${Math.max(Math.min(n,r),i)}px`}),[t,n])})(h,n||"");const m={id:s,name:f,placeholder:u,disabled:c,...d},v=To((e=>{"Enter"===e.key&&e.metaKey&&(e.preventDefault(),i?.())})),y=t?zh.exports.truncate(t.text,{length:100}):void 0;return l.exports.jsxs("div",{className:lt(o,"relative min-w-0 bg-white border border-solid rounded-lg shadow-sm overflow-hidden focus-within:border-primary-500 border-gray-300"),children:[y&&l.exports.jsxs("div",{className:"flex justify-between mb-2 m-1 rounded bg-primary-300 bg-opacity-50 border-l-4 border-solid border-primary-500 p-1",children:[l.exports.jsx("p",{className:"text-xs break-words text-gray-600",children:y}),l.exports.jsxs("button",{type:"button",className:"mr-0.5 text-gray-500 hover:text-gray-700 duration-200 translation-colors ease-in-out",onClick:()=>a?.(null),children:[l.exports.jsx("span",{className:"sr-only",children:"Remove reply"}),l.exports.jsx(Ie,{className:"w-4 h-4","aria-hidden":"true"})]})]}),l.exports.jsx("label",{htmlFor:"message",className:"sr-only",children:"Add your message"}),l.exports.jsx("textarea",{...m,ref:e=>{h.current=e,"function"==typeof p?p(e):p&&(p.current=e)},value:n||"",className:"form-textarea overflow-y-auto block w-full py-2 border-0 resize-none focus:ring-0 text-sm",style:{minHeight:"16px",maxHeight:"96px"},onKeyDown:v,onChange:r})]})}));function Tm({className:e,...t}){return l.exports.jsxs("div",{...t,className:lt(e,"spinner"),children:[l.exports.jsx("div",{className:"bounce1"}),l.exports.jsx("div",{className:"bounce2"}),l.exports.jsx("div",{className:"bounce3"})]})}function _m(){const[{messages:t,events:n,error:r,fetching:i,sending:a},{fetchMoreMessages:o,sendMessage:s}]=Kh(),u=e.useRef(null);e.useEffect((()=>{const e=()=>{u.current&&u.current.scrollTop>=-20&&u.current?.scrollTo({top:1,behavior:"smooth"})};return n.on("message-received",e),()=>{n.off("message-received",e)}}),[n]);const c=To((async()=>{u.current&&(u.current.scrollTop>100+u.current.clientHeight-u.current.scrollHeight+1||await o())})),[f,d]=e.useState(null),p=To((e=>{if(!u.current||!e)return;const t=u.current.querySelector(`#message-${e}`);t&&(t.scrollIntoView({behavior:"smooth"}),d(e),setTimeout((()=>d(null)),1e3))})),[{height:h}={height:20},m]=bo(),v=_o(h);e.useEffect((()=>{if(!u.current)return;const e=v.current??0;0!==e&&0!==h&&(e>h?u.current.scrollTop+=e-h:e<h&&(u.current.scrollTop-=h-e))}),[h,v]);const[y,g]=e.useState(""),[x,b]=e.useState(null),w=To((async()=>{y&&(await s(y,x),g(""),b(null),u.current&&(u.current.scrollTop=1),m.current?.focus())}));return l.exports.jsxs("div",{className:"px-6 pb-4 h-full w-full relative",children:[l.exports.jsxs("div",{ref:u,className:"w-full max-h-full flex flex-col-reverse flex-grow overflow-y-auto px-4 bg-white pb-4 relative",style:{height:`calc(100% - (${h}px + 24px))`},onScroll:c,children:[i||r&&l.exports.jsx("div",{className:"text-center absolute inset-x-0 top-1/2 -translate-y-1/2",children:i?l.exports.jsx(Tm,{className:"mx-auto"}):l.exports.jsx("div",{className:"w-full text-center text-red-700",children:"Something went wrong."})}),t.map(((n,r)=>l.exports.jsxs(e.Fragment,{children:[l.exports.jsx(wm,{message:n,onReplyTo:()=>{b(n),m.current?.focus()},highlighted:f===n.id,onParentMessageClick:()=>p(n.parent?.id)}),r===t.length-1||Fd(t[r+1].createdAt,n.createdAt)>0?l.exports.jsx(km,{date:n.createdAt}):null]},n.id)))]}),l.exports.jsxs("div",{className:"absolute flex inset-x-0 bottom-0 bg-gray-100 border-t border-gray-100 p-2",children:[l.exports.jsx(Nm,{ref:m,replyTo:x,onRemoveReply:()=>{b(null),m.current?.focus()},className:"flex-grow",value:y,onChange:({target:e})=>g(e.value),disabled:a,onSend:w}),l.exports.jsx("div",{className:"self-end ml-2 flex-shrink-0 py-0.5",children:l.exports.jsx(Vh,{size:"sm",icon:pe,disabled:a,onClick:w,children:l.exports.jsx("span",{className:"sr-only",children:"Send"})})})]})]})}const Em=Object.values(Dd);function Sm({label:t,colors:n=Em,className:r="",value:i,onChange:a,size:o="md"}){const[s,u]=e.useState(),[c,f]=e.useState(),d=e.useMemo((()=>({name:"offset",options:{offset:({popper:e})=>[-e.width/2,8]}})),[]),{styles:p,attributes:h}=Dn(s,c,{strategy:"absolute",placement:"bottom-start",modifiers:[d]}),m=e=>{const t=Md(e);return lt({"ring-zinc-300":"zinc"===t,"ring-red-300":"red"===t,"ring-orange-300":"orange"===t,"ring-amber-300":"amber"===t,"ring-lime-300":"lime"===t,"ring-emerald-300":"emerald"===t,"ring-teal-300":"teal"===t,"ring-cyan-300":"cyan"===t,"ring-blue-300":"blue"===t,"ring-indigo-300":"indigo"===t,"ring-violet-300":"violet"===t,"ring-purple-300":"purple"===t,"ring-fuchsia-300":"fuchsia"===t,"ring-pink-300":"pink"===t,"ring-rose-300":"rose"===t})};return l.exports.jsxs(Wi,{as:"div",className:lt("flex rounded-md",r,t&&"justify-between"),children:[t&&l.exports.jsx(uu,{children:t}),l.exports.jsx(Wi.Button,{as:"button",ref:u,className:lt("rounded-full",{"w-6 h-6":"sm"===o,"w-8 h-8":"md"===o,"w-10 h-10":"lg"===o}),style:{backgroundColor:i||"black"}}),l.exports.jsx(si,{children:l.exports.jsx(Wi.Items,{as:"div",ref:f,role:"listbox",className:"bg-white border border-gray-200 z-40 p-4 flex items-center space-x-2 rounded-md shadow-lg focus:outline-none",style:p.popper,...h.popper,children:n.map((e=>l.exports.jsx(Wi.Item,{children:({active:t})=>l.exports.jsx("div",{tabIndex:0,className:lt("inline-flex items-center justify-center w-5 h-5 rounded-full hover:ring-2 ring-offset-2 ring-opacity-50",m(e),{"ring-1":t}),style:{backgroundColor:e},title:zh.exports.upperFirst(Md(e)),onClick:()=>a(e),children:i===e&&l.exports.jsx(Z,{className:"w-4 h-4 text-white"})})},e)))})})]})}const Lm=e.forwardRef((function({id:t,label:n,maxSize:r,disabled:i=!1,previewUrl:a,placeholder:o,imageSize:s="md",rounded:u,error:c,onChange:f,...d},p){const h=e.useRef(null),[m,v]=e.useState(a||"");e.useEffect((()=>{v(a||"")}),[a]);const[y,g]=e.useState();e.useEffect((()=>(y&&v(URL.createObjectURL(y)),()=>{m&&URL.revokeObjectURL(m)})),[y]);return l.exports.jsxs("div",{children:[Boolean(n)&&l.exports.jsx("div",{className:lt("flex",n?"justify-between":"justify-end"),children:n&&l.exports.jsx(uu,{htmlFor:"about",className:"!mb-2",children:n})}),l.exports.jsxs("div",{id:t,className:lt("overflow-hidden ring-offset-0",{"w-12 h-12 rounded-md":"xs"===s,"w-16 h-16 rounded-lg":"sm"===s,"w-24 h-24 rounded-xl":"md"===s,"w-36 h-36 rounded-xl":"lg"===s},u?"!rounded-full":"",c?"ring-2 ring-red-500":"ring-1 ring-gray-200"),children:[l.exports.jsx("input",{accept:"image/jpeg, image/png",type:"file",className:"hidden",disabled:i,onChange:e=>{const t=e.target.files?.[0];g(t),f?.(e)},...d,ref:e=>{h.current=e,"function"==typeof p?p(e):p&&(p.current=e)}}),l.exports.jsxs("div",{onClick:()=>{h.current?.click()},className:"relative overflow-hidden flex justify-center items-center w-full h-full",children:[l.exports.jsx("div",{className:lt("absolute opacity-0 duration-300 h-full w-full flex justify-center items-center text-sm bg-gray-200 text-black font-semibold cursor-default",!i&&"hover:opacity-60 hover:cursor-pointer"),children:"edit"}),m||a?l.exports.jsx("img",{className:"min-w-full min-h-full object-cover",src:m||a,alt:"..."}):"string"==typeof o?l.exports.jsx("img",{className:"min-w-full min-h-full object-cover",src:o,alt:"..."}):o]})]}),Boolean(r)&&l.exports.jsxs("p",{className:"mt-1 text-sm text-gray-500 whitespace-pre-line",children:["Max. size is ",r]}),Boolean(c)&&l.exports.jsx("p",{className:"mt-1 mb-1 text-sm text-red-600",children:c})]})}));function Am(){const[{user:t},{setUser:n}]=nh(),r=e.useMemo((()=>({name:t?.name??"",bio:t?.bio??"",color:t?.profileColor??Em[0],avatar:void 0})),[t?.name,t?.profileColor,t?.bio]),{register:i,handleSubmit:a,reset:o,watch:s,setValue:u,formState:{errors:c,isSubmitting:f,isDirty:d}}=eu({defaultValues:r,mode:"onBlur",reValidateMode:"onChange",criteriaMode:"firstError"}),[,p]=_d(Sp),h=e.useCallback((async({avatar:e,...t})=>{const{data:i}=await p({...t,avatar:e?.[0]}),{updateProfile:a}=i??{};a&&(n(a),o(r))}),[p,n,o,r]);return l.exports.jsxs("form",{onSubmit:Pd(a(h)),className:"space-y-4 pb-6 px-2",children:[l.exports.jsxs("div",{className:"flex items-center space-x-3",children:[l.exports.jsx(Lm,{imageSize:"sm",rounded:!0,placeholder:t.avatarUrl??l.exports.jsx("div",{className:"w-full h-full rounded-full bg-gray-200 flex items-center justify-center",children:l.exports.jsx(_e,{className:"text-gray-500 h-5/6 w-5/6"})}),disabled:f,error:c.avatar?"Please upload a file up to 5 MB":"",...i("avatar",{validate:e=>!e?.[0]||e[0].size/1024<5e3})}),l.exports.jsxs("div",{children:[l.exports.jsx("p",{className:"text-sm font-medium text-gray-700 truncate",title:s("name"),children:s("name")}),l.exports.jsx("p",{className:"text-xs font-medium text-gray-500 truncate",title:t.email,children:t.email})]})]}),l.exports.jsx(om,{label:"Name",type:"text",...i("name",{required:!0}),error:c.name?.message}),l.exports.jsx(lu,{label:"Bio",rows:4,className:"resize-none",...i("bio")}),l.exports.jsx(Sm,{size:"sm",label:"Profile color",value:s("color"),onChange:e=>u("color",e,{shouldDirty:!0}),className:"justify-center"}),l.exports.jsx(nu,{type:"submit",loading:f,disabled:!d,className:"w-full mt-8",children:"Update Profile"})]})}function Om(){const[,{logout:t}]=nh(),[,{switchView:n}]=lh(),[,r]=_d(Ep),[i,a]=e.useState(!1);return l.exports.jsxs("div",{className:"w-full h-full flex flex-col justify-between",children:[l.exports.jsx(Am,{}),l.exports.jsxs("div",{className:"space-y-4",children:[l.exports.jsx(nu,{type:"button",color:"white",className:"w-full",onClick:()=>{t(),n(null)},icon:U,children:"Logout"}),l.exports.jsx(nu,{type:"button",color:"red",className:"w-full",onClick:()=>a(!0),icon:xe,children:"Delete profile"}),l.exports.jsx(am,{type:"error",title:"Delete profile",open:i,onClose:()=>a(!1),submitText:"Delete profile",onSubmit:async()=>{await r({}),await t(),n(null)},children:"Are you sure you want to delete your profile? All your messages will remain, but the association to you will be removed. This action cannot be undone."})]})]})}var Im=e.forwardRef((function({active:e=!1,className:t,children:n,...r},i){return l.exports.jsx("button",{ref:i,...r,type:"button",className:lt(t,e?"border-primary-500 text-primary-600":"border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300","py-4 px-1 text-center border-b-2 font-medium text-sm focus:outline-none"),children:n})})),Cm=e.forwardRef((function(t,n){const[{messages:r,events:i,error:a,fetching:o,sending:s},{fetchMoreMessages:u,sendMessage:c}]=Zh(),f=e.useRef(null);e.useEffect((()=>{const e=()=>{f.current&&f.current.scrollTop>=-20&&f.current?.scrollTo({top:1,behavior:"smooth"})};return i.on("message-received",e),()=>{i.off("message-received",e)}}),[i]);const d=To((async()=>{f.current&&(f.current.scrollTop>100+f.current.clientHeight-f.current.scrollHeight+1||await u())})),[p,h]=e.useState(null),m=To((e=>{if(!f.current||!e)return;const t=f.current.querySelector(`#message-${e}`);t&&(t.scrollIntoView({behavior:"smooth"}),h(e),setTimeout((()=>h(null)),1e3))})),[{height:v}={height:0},y]=bo(),g=_o(v);e.useEffect((()=>{if(!f.current)return;const e=g.current??0;0!==e&&0!==v&&(e>v?f.current.scrollTop+=e-v:e<v&&(f.current.scrollTop-=v-e))}),[v,g]);const[x,b]=e.useState(""),[w,k]=e.useState(null),N=To((async()=>{x&&(await c(x,w),b(""),k(null),f.current&&(f.current.scrollTop=1),y.current?.focus())}));return l.exports.jsxs("div",{ref:n,className:"px-6 pb-4 h-full w-full relative",children:[l.exports.jsxs("div",{ref:f,className:"w-full max-h-full flex flex-col-reverse flex-grow overflow-y-auto px-4 bg-white pb-4 relative",style:{height:`calc(100% - (${v}px + 24px))`},onScroll:d,children:[o||a&&l.exports.jsx("div",{className:"text-center absolute inset-x-0 top-1/2 -translate-y-1/2",children:o?l.exports.jsx(Tm,{className:"mx-auto"}):l.exports.jsx("div",{className:"w-full text-center text-red-700",children:"Something went wrong."})}),r.map(((t,n)=>l.exports.jsxs(e.Fragment,{children:[l.exports.jsx(wm,{message:t,onReplyTo:()=>{k(t),y.current?.focus()},highlighted:p===t.id,onParentMessageClick:()=>m(t.parent?.id)}),n===r.length-1||Fd(r[n+1].createdAt,t.createdAt)>0?l.exports.jsx(km,{date:t.createdAt}):null]},t.id)))]}),l.exports.jsxs("div",{className:"absolute flex inset-x-0 bottom-0 bg-gray-100 border-t border-gray-100 p-2",children:[l.exports.jsx(Nm,{ref:y,replyTo:w,onRemoveReply:()=>{k(null),y.current?.focus()},className:"flex-grow",value:x,onChange:({target:e})=>b(e.value),disabled:s,onSend:N}),l.exports.jsx("div",{className:"self-end ml-2 flex-shrink-0 py-0.5",children:l.exports.jsx(Vh,{size:"sm",icon:pe,disabled:s,onClick:N,children:l.exports.jsx("span",{className:"sr-only",children:"Send"})})})]})]})}));function Rm(){const[{group:t},{updateGroup:n}]=Yh(),r=e.useMemo((()=>({name:t?.name??""})),[t?.name]),{register:i,handleSubmit:a,reset:o,formState:{errors:s,isSubmitting:u,isDirty:c}}=eu({defaultValues:r,mode:"onBlur",reValidateMode:"onChange",criteriaMode:"firstError"});return l.exports.jsxs("form",{onSubmit:Pd(a((async({name:e})=>{await n(e),o({...r,name:e})}))),className:"space-y-4 py-6 px-2",children:[l.exports.jsx(om,{label:"Name",type:"text",...i("name",{required:!0,minLength:3,maxLength:52}),error:s.name?.message}),l.exports.jsx(nu,{type:"submit",loading:u,disabled:!c,className:"w-full mt-8",children:"Update group"})]})}function jm(){const[{group:e,members:t}]=Yh();return l.exports.jsxs("div",{className:"w-full",children:[l.exports.jsx("h1",{className:"text-gray-700 text-base font-bold mb-1 whitespace-pre-wrap",children:e.name}),l.exports.jsxs("p",{className:"text-gray-500 text-sm",children:[l.exports.jsx("span",{className:"font-semibold",children:t.length})," Member",1===t.length?"":"s"]})]})}var Dm=e.forwardRef((function(t,n){const[,{leaveGroup:r}]=Yh(),[i,a]=e.useState(!1);return l.exports.jsxs("div",{ref:n,className:"w-full h-full flex flex-col justify-between",children:[l.exports.jsxs("div",{className:"w-full",children:[l.exports.jsx(jm,{}),l.exports.jsx(Rm,{})]}),l.exports.jsxs("div",{className:"w-full",children:[l.exports.jsx(nu,{type:"button",color:"red",className:"w-full",onClick:()=>a(!0),icon:U,children:"Leave group"}),l.exports.jsx(am,{type:"error",open:i,onClose:a,title:"Leave group",submitText:"Leave",onSubmit:r,children:"Are you sure you want to leave this group? If you are its last member, the group and all its content will be deleted."})]})]})})),Mm=e.forwardRef((function(t,n){const[{group:r,members:i}]=Yh(),[,{follow:a}]=$h(),[o,s]=e.useState(""),u=e.useMemo((()=>zh.exports.orderBy(i.filter((e=>{const t=e.name.toLowerCase(),n=o.toLowerCase();return t.includes(n)})),["isInstructor","name"],["desc","asc"])),[i,o]);return l.exports.jsxs("div",{ref:n,className:"w-full h-full flex flex-col",children:[l.exports.jsx("div",{className:"w-full mb-2 flex-shrink-0",children:l.exports.jsx(hm,{size:"xxs",color:"transparent",icon:se,text:r.token,children:"Copy group token"})}),l.exports.jsx("div",{className:"w-full mb-6 flex-shrink-0",children:l.exports.jsx(pm,{onChange:s})}),l.exports.jsx("div",{className:"w-full overflow-y-auto flex-1 space-y-4",children:u.map((e=>l.exports.jsx(xm,{participant:e,onClick:()=>a(e.id),noControls:!0},e.id)))})]})}));function Fm({onSubmit:e,...t}){const[,{createGroup:n}]=Yh(),{success:r}=Cd(),{register:i,handleSubmit:a,formState:{errors:o,isSubmitting:s}}=eu({defaultValues:{name:""},mode:"onBlur",reValidateMode:"onChange",criteriaMode:"firstError"});return l.exports.jsxs(iu,{...t,size:"md",stretch:!0,children:[l.exports.jsx(iu.Title,{as:"h3",className:"font-bold text-gray-900 text-lg",children:"Create Group"}),l.exports.jsx(iu.Content,{children:l.exports.jsxs("form",{onSubmit:Pd(a((async({name:i})=>{await n(i),e?.(),t?.onClose?.(!1),r(`Group "${i}" created!`)}))),className:"space-y-4",children:[l.exports.jsx(om,{label:"Name",type:"text",...i("name",{required:!0,minLength:3,maxLength:52}),error:o.name?.message}),l.exports.jsx(nu,{type:"submit",loading:s,className:"w-full",children:"Create group"})]})})]})}const Pm=/^[0-9A-Z]{6}$/;function Um({onSubmit:e,...t}){const[,{joinGroup:n}]=Yh(),{success:r,error:i}=Cd(),{register:a,handleSubmit:o,formState:{errors:s,isSubmitting:u}}=eu({defaultValues:{groupId:""},mode:"onBlur",reValidateMode:"onChange",criteriaMode:"firstError"});return l.exports.jsxs(iu,{...t,size:"md",stretch:!0,children:[l.exports.jsx(iu.Title,{as:"h3",className:"font-bold text-gray-900 text-lg",children:"Join Group"}),l.exports.jsx(iu.Content,{children:l.exports.jsxs("form",{onSubmit:Pd(o((async({groupId:a})=>{const o=await n(a);if(e?.(),t?.onClose?.(!1),!o)throw i("Group not found!"),new Error("Group not found");r(`Group "${o.name}" joined!`)}))),className:"space-y-4",children:[l.exports.jsx(om,{label:"Group identifier",type:"text",...a("groupId",{required:!0,pattern:{value:Pm,message:"Please provide a token made of 6 uppercase letters and numbers"}}),error:s.groupId?.message}),l.exports.jsx(nu,{type:"submit",loading:u,className:"w-full",children:"Join group"})]})})]})}function Vm(){const[t,n]=e.useState(!1),[r,i]=e.useState(!1);return l.exports.jsxs("div",{className:"h-full w-full flex flex-col justify-center items-center space-y-4 px-6 pb-4",children:[l.exports.jsx(nu,{type:"button",color:"white",className:"w-full",onClick:()=>n(!0),icon:q,children:"Join group"}),l.exports.jsx(Um,{open:t,onClose:n}),l.exports.jsx(nu,{type:"button",color:"primary",className:"w-full",onClick:()=>i(!0),icon:ye,children:"Create group"}),l.exports.jsx(Fm,{open:r,onClose:i})]})}function Bm(){const[{group:t}]=Yh();return l.exports.jsx("div",{className:"h-full w-full flex flex-col overflow-hidden",children:t?l.exports.jsxs(ka.Group,{children:[l.exports.jsx(ka.List,{as:"div",className:"border-b-2 border-gray-200 shadow",children:l.exports.jsxs("nav",{"aria-label":"Tabs",className:"-mb-px flex flex-shrink-0",children:[l.exports.jsx(ka,{as:e.Fragment,children:({selected:e})=>l.exports.jsx(Im,{active:e,className:"w-1/3",children:"Chat"})}),l.exports.jsx(ka,{as:e.Fragment,children:({selected:e})=>l.exports.jsx(Im,{active:e,className:"w-1/3",children:"Members"})}),l.exports.jsx(ka,{as:e.Fragment,children:({selected:e})=>l.exports.jsx(Im,{active:e,className:"w-1/3",children:"Group Info"})})]})}),l.exports.jsx(ka.Panels,{as:e.Fragment,children:({selectedIndex:t})=>l.exports.jsxs("div",{className:lt("flex-grow w-full flex flex-col mt-1",0===t?"overflow-y-hidden":"overflow-y-auto px-6 py-4"),children:[l.exports.jsx(ka.Panel,{as:e.Fragment,children:l.exports.jsx(Cm,{})}),l.exports.jsx(ka.Panel,{as:e.Fragment,children:l.exports.jsx(Mm,{})}),l.exports.jsx(ka.Panel,{as:e.Fragment,children:l.exports.jsx(Dm,{})})]})})]}):l.exports.jsx(Vm,{})})}function zm({comment:t}){const[{user:n}]=nh(),[{isOnline:r}]=$h(),{online:i}=oo(),a=n.id===t.author?.id,o=t.author??{__typename:"User",name:"Deleted user",bio:"",email:"",id:"",isInstructor:!1,isStudent:!1,profileColor:"#71717a"},s=e.useMemo((()=>a?i:r(o.id)),[i,r,o.id,a]),[u,c]=e.useState(!1),[f,d]=e.useState(!1);e.useEffect((()=>{if(!u)return void d(!1);const e=setTimeout((()=>{d(!0)}),500);return()=>{clearTimeout(e)}}),[u]);const[p,h]=e.useState(null),[m,v]=e.useState(null),{attributes:y,styles:g}=Dn(p,m,{strategy:"absolute",placement:"top-start",modifiers:[{name:"offset",options:{offset:[0,8]}}]});return l.exports.jsxs("div",{className:"w-full py-2 flex space-x-2",children:[l.exports.jsxs("div",{className:"flex-shrink-0",children:[l.exports.jsx(ym,{ref:h,size:"xs",name:o.name,src:o.avatarUrl,color:o.profileColor,className:"cursor-pointer",status:s?"online":"offline",onMouseEnter:()=>c(!0),onMouseLeave:()=>c(!1)}),f&&l.exports.jsx(si,{children:l.exports.jsx(gm,{ref:v,...y.popper,participant:o,className:"z-40",style:g.popper})})]}),l.exports.jsxs("div",{className:"flex-grow p-1",children:[l.exports.jsxs("div",{className:"flex items-center mb-1",children:[l.exports.jsx("span",{className:"text-xs font-medium text-gray-900",children:o.name}),l.exports.jsx("span",{className:"text-xs text-gray-500 ml-1",children:t.createdAt.toLocaleString(void 0,{dateStyle:"short",timeStyle:"short"})})]}),l.exports.jsx("div",{className:"mb-1 w-full cursor-pointer text-gray-700 hover:text-gray-900",children:l.exports.jsx("p",{className:"text-sm break-words",children:t.text})})]})]})}function qm({annotation:t,onClick:n,replyCount:r=t.commentsCount,...i}){const[{user:a}]=nh(),[{isOnline:o}]=$h(),{online:s}=oo(),u=a.id===t.author?.id,c=t.author??{__typename:"User",name:"Deleted user",bio:"",email:"",id:"",isInstructor:!1,isStudent:!1,profileColor:"#71717a"},f=e.useMemo((()=>u?s:o(c.id)),[s,o,c.id,u]),[d,p]=e.useState(!1),[h,m]=e.useState(!1);e.useEffect((()=>{if(!d)return void m(!1);const e=setTimeout((()=>{m(!0)}),500);return()=>{clearTimeout(e)}}),[d]);const[v,y]=e.useState(null),[g,x]=e.useState(null),{attributes:b,styles:w}=Dn(v,g,{strategy:"absolute",placement:"top-start",modifiers:[{name:"offset",options:{offset:[0,8]}}]}),k=(t=>{const n=Reveal.getSlides().find((e=>{const n=Array.from(e.getElementsByTagName("annotation-highlight")).find((e=>e.dataset.annotationId=t.id));return!!n&&e.contains(n)}),[t.id]),r=e.useMemo((()=>n?Reveal.getIndices(n):null),[n]);return e.useCallback((()=>{r&&Reveal.slide(r.h,r.v)}),[r])})(t),[,{removeAnnotation:N}]=Fh(),T=To((async()=>{await N(t.id),i.onRemove?.()}));return l.exports.jsxs("div",{className:"w-full py-4 flex space-x-2",children:[l.exports.jsxs("div",{className:"flex-shrink-0",children:[l.exports.jsx(ym,{ref:y,size:"xs",name:c.name,src:c.avatarUrl,color:c.profileColor,className:"cursor-pointer",status:f?"online":"offline",onMouseEnter:()=>p(!0),onMouseLeave:()=>p(!1)}),h&&l.exports.jsx(si,{children:l.exports.jsx(gm,{ref:x,...b.popper,participant:c,className:"z-40",style:w.popper})})]}),l.exports.jsxs("div",{className:"flex-grow p-1",children:[l.exports.jsxs("div",{className:"flex items-center mb-1 justify-between",children:[l.exports.jsxs("span",{className:"inline-flex items-center",children:[l.exports.jsx("span",{className:"text-xs font-medium text-gray-900",children:c.name}),l.exports.jsx("span",{className:"text-xs text-gray-500 ml-1",children:t.createdAt.toLocaleString(void 0,{dateStyle:"short",timeStyle:"short"})})]}),u&&l.exports.jsx(vm,{position:"top-end",button:l.exports.jsxs("button",{className:"hover:bg-gray-100 transition-colors duration-200 inline-flex items-center justify-center p-0.5 rounded focus:outline-none",children:[l.exports.jsx(re,{className:"w-4 h-4 text-gray-500"}),l.exports.jsx("span",{className:"sr-only",children:"More options"})]}),children:l.exports.jsxs(vm.Item,{onClick:T,children:[l.exports.jsx(xe,{className:"w-4 h-4"}),l.exports.jsx("span",{children:"Delete"})]})})]}),l.exports.jsx("blockquote",{title:"Go to slide",className:"mb-2 p-0.5 pr-1 border-l-2 border-solid border-primary-500 bg-primary-300 bg-opacity-50 rounded hover:bg-opacity-80 transition-opacity duration-200 ease-in-out cursor-pointer",onClick:e=>{e.preventDefault(),e.stopPropagation(),k()},children:l.exports.jsxs("p",{className:"text-gray-500 italic text-sm",children:['"',t.quote,'"']})}),l.exports.jsx("div",{className:"mb-1 w-full cursor-pointer text-gray-700 hover:text-gray-900",onClick:()=>n?.(t),children:l.exports.jsx("p",{className:"text-sm break-words",children:t.text})}),l.exports.jsxs("div",{className:"text-xs text-gray-500",children:[r," comment",1===r?"":"s"]})]})]})}function Jm({annotation:t,onRemove:n}){const{comments:r,addComment:i}=em(t),[a,o]=e.useState(""),[s,u]=e.useState(!1),c=To((async()=>{a&&(u(!0),await i(a),u(!1),o(""))}));return l.exports.jsxs(l.exports.Fragment,{children:[l.exports.jsx(qm,{annotation:t,onRemove:()=>n?.(null),replyCount:r.length}),l.exports.jsxs("div",{className:"w-full border-t pt-2 border-solid border-gray-200",children:[r.map((e=>l.exports.jsx(zm,{comment:e},e.id))),l.exports.jsxs("div",{className:"flex pt-2",children:[l.exports.jsx(Nm,{className:"flex-grow",value:a,onChange:({target:e})=>o(e.value),disabled:s,onSend:c}),l.exports.jsx("div",{className:"self-end ml-2 flex-shrink-0 py-0.5",children:l.exports.jsx(Vh,{size:"sm",icon:pe,disabled:s,onClick:c,children:l.exports.jsx("span",{className:"sr-only",children:"Send"})})})]})]})]})}function Gm({onSelect:t}){const{slideAnnotations:n,otherAnnotations:r}=(()=>{const{slideElement:t}=qh(),[{annotations:n}]=Fh(),r=e.useMemo((()=>Array.from(t.getElementsByTagName("annotation-highlight"))),[t]);return{slideAnnotations:e.useMemo((()=>{const e=r.map((e=>e.dataset.annotationId));return n.filter((t=>e.includes(t.id)))}),[n,r]),otherAnnotations:e.useMemo((()=>{const e=r.map((e=>e.dataset.annotationId));return n.filter((t=>!e.includes(t.id)))}),[n,r])}})();return l.exports.jsxs("div",{className:"w-full",children:[0===n.length&&0===r.length&&l.exports.jsx("div",{className:"text-gray-500 text-sm text-center py-8",children:"No annotations yet"}),n.length>0&&l.exports.jsxs(l.exports.Fragment,{children:[l.exports.jsx("div",{className:"bg-white sticky top-0 z-10 font-semibold text-gray-700 mb-4 text-sm",children:"On this slide"}),l.exports.jsx("div",{className:"w-full divide-y divide-solid divide-gray-200",children:n.map((e=>l.exports.jsx(qm,{annotation:e,onClick:t},e.id)))})]}),r.length>0&&l.exports.jsxs(l.exports.Fragment,{children:[n.length>0&&l.exports.jsx("div",{className:"bg-white sticky top-0 z-10 font-semibold text-gray-700 my-4 text-sm",children:"More"}),l.exports.jsx("div",{className:"w-full divide-y divide-solid divide-gray-200",children:r.map((e=>l.exports.jsx(qm,{annotation:e,onClick:t},e.id)))})]})]})}function $m(){const[{events:t}]=Fh(),[n,r]=e.useState(null);return e.useEffect((()=>(t.on("highlight:click",r),()=>{t.off("highlight:click",r)})),[t]),n?l.exports.jsxs("div",{className:"w-full",children:[l.exports.jsx("div",{className:"w-full mb-1",children:l.exports.jsxs("button",{type:"button",className:"text-gray-500 text-sm hover:text-gray-700 inline-flex items-center",onClick:()=>r(null),children:[l.exports.jsx(B,{className:"w-4 h-4 mr-1","aria-hidden":"true"}),l.exports.jsx("span",{children:"Back"})]})}),l.exports.jsx(Jm,{annotation:n,onRemove:r})]}):l.exports.jsx(Gm,{onSelect:r})}function Wm(){const[{view:e},{switchView:t}]=lh();return e?l.exports.jsxs("div",{className:"h-full rounded-lg bg-white drop-shadow-lg flex-grow flex flex-col overflow-hidden",children:[l.exports.jsxs("div",{className:"flex items-center justify-between py-4 px-6 flex-shrink-0",children:[l.exports.jsx("h2",{className:"text-xl font-semibold",children:e.name}),l.exports.jsx(Vh,{color:"transparent",size:"md",icon:st,title:"Close",onClick:()=>t(null),children:l.exports.jsx("span",{className:"sr-only",children:"Close"})})]}),l.exports.jsxs("div",{className:lt("flex-grow w-full flex flex-col",["chat","group"].includes(e.id)?"overflow-y-hidden":"overflow-y-auto px-6 pb-4"),children:["chat"===e.id&&l.exports.jsx(_m,{}),"group"===e.id&&l.exports.jsx(Bm,{}),"annotation"===e.id&&l.exports.jsx($m,{}),"participants"===e.id&&l.exports.jsx(bm,{}),"profile"===e.id&&l.exports.jsx(Om,{}),"settings"===e.id&&l.exports.jsx(im,{}),"lecture-info"===e.id&&l.exports.jsx(dm,{})]})]}):null}function Hm({type:t="info",message:n,title:r}){const i=e.useMemo((()=>lt("rounded-md p-4",{"bg-green-50":"success"===t,"bg-red-50":"error"===t,"bg-yellow-50":"warning"===t,"bg-blue-50":"info"===t})),[t]),a=e.useMemo((()=>lt("text-sm font-medium mb-2",{"text-green-800":"success"===t,"text-red-800":"error"===t,"text-yellow-800":"warning"===t,"text-blue-800":"info"===t})),[t]),o=e.useMemo((()=>lt("text-sm",{"text-green-700":"success"===t,"text-red-700":"error"===t,"text-yellow-700":"warning"===t,"text-blue-700":"info"===t})),[t]),s=e.useMemo((()=>{switch(t){case"success":return l.exports.jsx(Ue,{className:"h-5 w-5 text-green-400","aria-hidden":"true"});case"error":return l.exports.jsx(at,{className:"h-5 w-5 text-red-400","aria-hidden":"true"});case"warning":return l.exports.jsx(qe,{className:"h-5 w-5 text-yellow-400","aria-hidden":"true"});case"info":return l.exports.jsx(Ge,{className:"h-5 w-5 text-blue-400","aria-hidden":"true"})}}),[t]);return l.exports.jsx("div",{className:i,children:l.exports.jsxs("div",{className:"flex",children:[l.exports.jsx("div",{className:"flex-shrink-0",children:s}),l.exports.jsxs("div",{className:"ml-3",children:[r&&l.exports.jsx("h3",{className:a,children:r}),l.exports.jsx("div",{className:o,children:n})]})]})})}function Km({onSubmit:e}){const[,{login:t}]=nh(),{success:n}=Cd(),{register:r,handleSubmit:i,formState:{errors:a,isSubmitted:o,isSubmitSuccessful:s,isSubmitting:u}}=eu({defaultValues:{email:"",password:""},mode:"onBlur",reValidateMode:"onChange",criteriaMode:"firstError"});return l.exports.jsxs("form",{onSubmit:Pd(i((async({email:r,password:i})=>{const a=await t({email:r,password:i});if(!a)throw new Error("Login failed");e(),n(`Welcome back, ${a.name}!`)}))),className:"space-y-4",children:[l.exports.jsx(om,{label:"Email",type:"email",...r("email",{required:!0}),error:a.email?.message}),l.exports.jsx(om,{label:"Password",type:"password",...r("password",{required:!0}),error:a.password?.message}),l.exports.jsx(nu,{type:"submit",loading:u,className:"w-full",children:"Login"}),o&&!s&&l.exports.jsx(Hm,{type:"error",title:"Login failed",message:"Please try again with correct credentials"})]})}function Qm({onSubmit:e}){const[,{login:t}]=nh(),{success:n}=Cd(),{register:r,handleSubmit:i,watch:a,setValue:o,formState:{errors:s,isSubmitted:u,isSubmitSuccessful:c,isSubmitting:f}}=eu({defaultValues:{name:"",bio:"",email:"",password:"",color:Em[0],avatar:void 0},mode:"onBlur",reValidateMode:"onChange",criteriaMode:"firstError"}),[,d]=_d(hp);return l.exports.jsxs("form",{onSubmit:Pd(i((async({avatar:r,...i})=>{const{data:a}=await d({...i,avatar:r?.[0]}),{register:o}=a??{};if(!o)throw new Error("Registration failed");e(),await t({email:i.email,password:i.password}),n(`Welcome, ${o.name}!`)}))),className:"space-y-6",children:[l.exports.jsxs("div",{className:"flex space-x-4",children:[l.exports.jsx("div",{className:"flex flex-col space-y-4 px-2",children:l.exports.jsx(Lm,{rounded:!0,placeholder:l.exports.jsx("div",{className:"w-full h-full rounded-full bg-gray-200 flex items-center justify-center",children:l.exports.jsx(_e,{className:"text-gray-500 h-5/6 w-5/6"})}),disabled:f,error:s.avatar?"Please upload a file up to 5 MB":"",...r("avatar",{validate:e=>!e?.[0]||e[0].size/1024<5e3})})}),l.exports.jsxs("div",{className:"space-y-4 px-2 flex-1",children:[l.exports.jsx(om,{label:"Email",type:"email",...r("email",{required:!0}),error:s.email?.message}),l.exports.jsx(om,{label:"Password",type:"password",...r("password",{required:!0,minLength:8,maxLength:32}),error:s.password?.message}),l.exports.jsx(om,{label:"Name",type:"text",...r("name",{required:!0}),error:s.name?.message}),l.exports.jsx(lu,{label:"Bio",rows:4,className:"resize-none",...r("bio")}),l.exports.jsx(Sm,{size:"md",label:"Profile color",value:a("color"),onChange:e=>o("color",e,{shouldDirty:!0})})]})]}),l.exports.jsx(nu,{type:"submit",loading:f,className:"w-full",children:"Register"}),u&&!c&&l.exports.jsx(Hm,{type:"error",title:"Error",message:"This email address is already in use"})]})}function Ym(t){const[n,r]=e.useState("login"),i=To((()=>{r((e=>"login"===e?"register":"login"))}));return l.exports.jsxs(iu,{...t,size:"md",stretch:!0,children:[l.exports.jsx(iu.Title,{as:"h3",className:"font-bold text-gray-900 text-lg",children:"login"===n?"Login":"Register"}),l.exports.jsxs(iu.Content,{children:["login"===n&&l.exports.jsx(Km,{onSubmit:()=>t.onClose?.(!1)}),"register"===n&&l.exports.jsx(Qm,{onSubmit:()=>t.onClose?.(!1)}),l.exports.jsx("div",{className:"w-full text-center text-sm text-gray-500 mt-6",children:l.exports.jsx("span",{className:"hover:cursor-pointer hover:underline-offset-1 hover:underline hover:text-gray-700",onClick:i,children:"login"===n?"No account? Sign up.":"Already an account? Sign in."})})]})]})}function Xm({children:t}){const[,{switchView:n}]=lh(),[{user:r}]=nh(),[i,a]=e.useState(!1),[o,s]=e.useState(!1);return l.exports.jsxs("div",{className:"flex space-x-4 items-center mb-4 flex-shrink-0",children:[r.isInstructor&&l.exports.jsxs(l.exports.Fragment,{children:[l.exports.jsx(Vh,{color:"transparent",size:"md",icon:Ke,title:"Create lecture",onClick:()=>a(!0),children:l.exports.jsx("span",{className:"sr-only",children:"Create lecture"})}),l.exports.jsx(fm,{open:i,onClose:a,onSubmit:()=>n("lecture-info")})]}),l.exports.jsx(Vh,{color:"transparent",size:"md",icon:De,title:"Join lecture",onClick:()=>s(!0),children:l.exports.jsx("span",{className:"sr-only",children:"Join lecture"})}),l.exports.jsx(um,{open:o,onClose:s,onSubmit:()=>n("lecture-info")}),t]})}const Zm=(e,t,n=0)=>{const{x:r,y:i,pageWidth:a,pageHeight:o}=e,{width:s,height:u}=t;return`translate(${r*(s/a)+n}px, ${i*(u/o)+n}px)`};function ev(){const[{showOnlyGroupCursors:t}]=lh(),[{group:n,members:r}]=Yh(),[{mousePositions:i}]=$h(),{slide:a}=qh(),o=e.useMemo((()=>{const e=i.filter((e=>Jh(e.slide,a)));return t&&n?.id?e.filter((({user:e})=>r.some((t=>t.id===e.id)))):e}),[i,a,n?.id,r,t]),s=No();return l.exports.jsx("div",{className:"fixed inset-0 pointer-events-none",children:l.exports.jsx("div",{className:"relative w-full h-full",children:o.map((({user:e,mouse:t})=>l.exports.jsxs(l.exports.Fragment,{children:[l.exports.jsx(te,{className:"absolute w-5 h-5 transition-transform",style:{transform:Zm(t,s),color:e.profileColor}},e.id),l.exports.jsx("span",{className:"absolute transition-transform text-white text-2xs p-0.5 rounded-sm",style:{transform:Zm(t,s,20),backgroundColor:e.profileColor},children:e.name})]})))})})}function tv(){const[{getSlidePresence:t}]=$h(),[n,r]=e.useState((()=>Reveal.isReady()));e.useEffect((()=>{const e=()=>r(!0);return Reveal.addEventListener("ready",e),()=>Reveal.removeEventListener("ready",e)}));const i=e.useMemo((()=>n?Reveal.getSlides():[]),[n]);return e.useEffect((()=>{if(n)return i.forEach((e=>{const n=Reveal.getIndices(e),r=t({horizontalIndex:n.h,verticalIndex:n.v});r>0&&e.appendChild((e=>{const t=document.createElement("span");return t.className="slide-presence-element hidden absolute left-4 bottom-4 rounded-full text-white bg-red-400 font-semibold inline-flex items-center justify-center text-7xl w-40 h-40",t.textContent=`+${e+1}`,t})(r))})),()=>{document.querySelectorAll(".slide-presence-element").forEach((e=>e.remove()))}}),[t,i,n]),null}function nv(){const[{isLoggedIn:t}]=nh(),[{view:n,showCursors:r,zenMode:i,showOnlyGroupCursors:a,showAnnotationHighlights:o},{switchView:s}]=lh(),u=ah(),[{lecture:c}]=ih(),[f,d]=e.useState(!1);return l.exports.jsx("div",{className:lt("absolute z-10 top-0 left-0 py-4 pl-4 w-[360px]",n&&"h-screen max-h-screen"),children:t?c?l.exports.jsxs(l.exports.Fragment,{children:[!i&&o&&u.annotations&&l.exports.jsx(Uh,{}),l.exports.jsxs("div",{className:"flex flex-col h-full",children:[l.exports.jsx(tm,{}),l.exports.jsx(Wm,{}),u.cursors&&(r||a)&&!i&&l.exports.jsx(ev,{}),!i&&l.exports.jsx(tv,{})]})]}):l.exports.jsxs("div",{className:"flex flex-col h-full",children:[l.exports.jsx(Xm,{children:l.exports.jsx(Vh,{color:"transparent",size:"md",icon:"profile"===n?.id?we:Ye,title:"Profile",onClick:()=>s("profile"),children:l.exports.jsx("span",{className:"sr-only",children:"Profile"})})}),l.exports.jsx(Wm,{})]}):l.exports.jsxs(l.exports.Fragment,{children:[l.exports.jsx(Vh,{title:"Login",color:"transparent",icon:_e,onClick:()=>d(!0),children:l.exports.jsx("span",{className:"sr-only",children:"Login"})}),l.exports.jsx(Ym,{open:f,onClose:d})]})})}var rv=function(e){return e.name.value},iv=function(e){return e.typeCondition.name.value},av=function(e){return e.alias?e.alias.value:e.name.value},ov=[],sv=function(e){return e.selectionSet?e.selectionSet.selections:ov},uv=function(e){return e.typeCondition?e.typeCondition.name.value:null},lv=function(e){return e.kind===_u.FIELD},cv=function(e){return e.kind===_u.INLINE_FRAGMENT},fv=function(e,t){var n=null;if(e.arguments)for(var r=0,i=e.arguments.length;r<i;r++){var a=e.arguments[r],o=Ml(a.value,t);null!=o&&(n||(n={}),n[rv(a)]=o)}return n},dv=function(e,t){if(t&&e.variableDefinitions){for(var n={},r=0,i=e.variableDefinitions.length;r<i;r++){var a=rv(e.variableDefinitions[r].variable);n[a]=t[a]}return n}},pv=function(e,t){var n={};if(!t)return n;if(e.variableDefinitions)for(var r=0,i=e.variableDefinitions.length;r<i;r++){var a=e.variableDefinitions[r],o=rv(a.variable);n[o]=void 0===t[o]&&a.defaultValue?Ml(a.defaultValue,t):t[o]}for(var s in t)s in n||(n[s]=t[s]);return n};function hv(e,t,n){if(!e){var r=new Error((t||"Minfied Error #"+n+"\n")+"\nhttps://bit.ly/2XbVrpR#"+n);throw r.name="Graphcache Error",r}}var mv=function(e){for(var t=0;t<e.definitions.length;t++)if(e.definitions[t].kind===_u.OPERATION_DEFINITION)return e.definitions[t];hv(!1,"",1)},vv=function(e){for(var t={},n=0;n<e.definitions.length;n++){var r=e.definitions[n];r.kind===_u.FRAGMENT_DEFINITION&&(t[rv(r)]=r)}return t},yv=function(e,t){for(var n=0;e.directives&&n<e.directives.length;n++){var r=e.directives[n],i=rv(r);if(("include"===i||"skip"===i)&&r.arguments&&r.arguments[0]&&"if"===rv(r.arguments[0])){var a=Ml(r.arguments[0].value,t);return"include"===i?!!a:!a}}return!0},gv=function(e,t){for(var n=0;e.directives&&n<e.directives.length;n++){var r=e.directives[n];if("defer"===rv(r)){for(var i=0;r.arguments&&i<r.arguments.length;i++){var a=r.arguments[n];if("if"===rv(a))return!!Ml(a.value,t)}return!0}}return!1},xv=function(e,t,n){var r=kv(e,t,n);return!!r&&"NON_NULL"!==r.type.kind},bv=function(e,t,n){var r=kv(e,t,n);if(!r)return!1;var i="NON_NULL"===r.type.kind?r.type.ofType:r.type;return"LIST"===i.kind&&"NON_NULL"!==i.ofType.kind},wv=function(e,t,n){if(!n)return!1;var r=uv(t);return!r||n===r||(e.types.has(r)&&"OBJECT"===e.types.get(r).kind?r===n:(function(e,t){hv(e.types.has(t)&&("INTERFACE"===e.types.get(t).kind||"UNION"===e.types.get(t).kind),"",5)}(e,r),Nv(e,n),e.isSubType(r,n)))},kv=function(e,t,n){if(0!==n.indexOf("__")&&0!==t.indexOf("__"))return Nv(e,t),e.types.get(t).fields()[n]};function Nv(e,t){hv(e.types.has(t)&&"OBJECT"===e.types.get(t).kind,"",3)}var Tv=function(e,t){return t?"".concat(e,"(").concat(Ff(t),")"):e},_v=function(e,t){return"".concat(e,".").concat(t)},Ev=function(e){var t=e.indexOf("(");return t>-1?{fieldKey:e,fieldName:e.slice(0,t),arguments:JSON.parse(e.slice(t+1,-1))}:{fieldKey:e,fieldName:e,arguments:null}},Sv=function(e){var t=e.indexOf(".");return{entityKey:e.slice(0,t).replace(/%2e/g,"."),fieldKey:e.slice(t+1)}},Lv=function(){return Object.create(null)},Av=null,Ov=null,Iv=null,Cv=null,Rv=null,jv=null,Dv=!1,Mv=function(e){var t;if(e){if(Av.has(e))return e;t=Ov.get(e)||d({},e),Ov.set(e,t)}else t={};return Av.add(t),t},Fv=function(e){return!!e&&Av.has(e)},Pv=function(e,t,n,r){Av=new WeakSet,Ov=new WeakMap,Iv=e,Cv=t,Rv=new Set,Dv=!!r,n?"read"===Iv?jv=n:r||t.optimisticOrder.length>1?(r||t.commutativeKeys.has(n)?r&&(-1===t.optimisticOrder.indexOf(n)||t.commutativeKeys.has(n)||t.optimisticOrder.splice(t.optimisticOrder.indexOf(n),1),t.commutativeKeys.delete(n)):ny(t,n),jv=n,ry(t,n)):(jv=null,ay(t,n)):jv=null},Uv=function e(){var t=Cv,n=jv;if(Dv=!1,jv=null,n&&t.optimisticOrder.indexOf(n)>-1)for(var r=t.optimisticOrder.length;--r>=0&&t.refLock.has(t.optimisticOrder[r])&&t.commutativeKeys.has(t.optimisticOrder[r])&&!t.deferredKeys.has(t.optimisticOrder[r]);)oy(t.optimisticOrder[r]);Av=null,Ov=null,Iv=null,Cv=null,Rv=null,t.defer||(t.defer=!0,setTimeout((function(){Pv("read",t,null),Kv(),uy(),e(),t.defer=!1})))},Vv=function(e,t,n){t&&!n&&e.deferredKeys.delete(t),Pv("write",e,t,n),Uv()},Bv=function(){return hv(null!==Iv,"",2),Iv},zv=function(){return hv(null!==Rv,"",2),Rv},qv=function(e,t,n,r){var i=jv?e.optimistic.get(jv):e.base,a=i.get(t);void 0===a&&i.set(t,a=Lv()),void 0!==r||jv?a[n]=r:delete a[n]},Jv=function(e,t,n){for(var r,i=!Dv&&"read"===Iv&&jv&&Cv.commutativeKeys.has(jv),a=0,o=Cv.optimisticOrder.length;a<o;a++){var s=Cv.optimisticOrder[a],u=e.optimistic.get(s);if(i=i&&s!==jv,u&&(!i||!Cv.commutativeKeys.has(s))&&(!Dv||"write"===Iv||Cv.commutativeKeys.has(s))&&void 0!==(r=u.get(t))&&n in r)return r[n]}return void 0!==(r=e.base.get(t))?r[n]:void 0},Gv=function(e,t,n,r){var i=t.get(n)||0,a=i+r;t.set(n,a),e&&(a<=0?e.add(n):i<=0&&a>0&&e.delete(n))},$v=function e(t,n,r,i){if("string"==typeof r)Gv(t,n,r,i);else if(Array.isArray(r))for(var a=0,o=r.length;a<o;a++)Array.isArray(r[a])?e(t,n,r[a],i):r[a]&&Gv(t,n,r[a],i)},Wv=function(e,t,n){if(void 0!==n)for(var r in n)t.has(r)||(e.push(Ev(r)),t.add(r))},Hv=function(e,t,n,r){Wv(e,t,r.base.get(n));for(var i=0,a=Cv.optimisticOrder.length;i<a;i++){var o=r.optimistic.get(Cv.optimisticOrder[i]);void 0!==o&&Wv(e,t,o.get(n))}},Kv=function(){var e,t=Cv.gc,n=D(t.keys());try{for(n.s();!(e=n.n()).done;){var r=e.value;if((Cv.refCount.get(r)||0)>0)return void t.delete(r);var i,a=D(Cv.refLock.keys());try{for(a.s();!(i=a.n()).done;){var o=i.value,s=Cv.refLock.get(o);if(s){if((s.get(r)||0)>0)return;s.delete(r)}}}catch(e){a.e(e)}finally{a.f()}Cv.refCount.delete(r),t.delete(r),Cv.records.base.delete(r);var u=Cv.links.base.get(r);if(u)for(var l in Cv.links.base.delete(r),u)$v(t,Cv.refCount,u[l],-1)}}catch(e){n.e(e)}finally{n.f()}},Qv=function(e,t){"__typename"!==t&&(e!==Cv.queryRootKey?Rv.add(e):void 0!==t&&Rv.add(_v(e,t)))},Yv=function(e,t){!Dv&&Cv.storage&&Cv.persist.add(function(e,t){return"".concat(e.replace(/\./g,"%2e"),".").concat(t)}(e,t))},Xv=function(e,t){return Qv(e,t),Jv(Cv.records,e,t)},Zv=function(e,t){return Qv(e,t),Jv(Cv.links,e,t)},ey=function(e,t,n){Qv(e,t),Yv(e,t),qv(Cv.records,e,t,n)},ty=function(e,t,n){var r,i,a,o=Cv;jv?((r=o.refLock.get(jv))||o.refLock.set(jv,r=new Map),i=o.links.optimistic.get(jv)):(r=o.refCount,i=o.links.base,a=o.gc);var s=i&&i.get(e),u=s&&s[t];Qv(e,t),Yv(e,t),qv(o.links,e,t,n),$v(a,r,u,-1),$v(a,r,n,1)},ny=function(e,t,n){n?e.deferredKeys.add(t):e.deferredKeys.delete(t);var r=e.optimisticOrder.indexOf(t);if(r>-1){if(e.commutativeKeys.has(t)||n)return;e.optimisticOrder.splice(r,1),iy(e,t)}for(r=0;n&&r<e.optimisticOrder.length&&!e.deferredKeys.has(e.optimisticOrder[r])&&(!e.refLock.has(e.optimisticOrder[r])||!e.commutativeKeys.has(e.optimisticOrder[r]));r++);e.optimisticOrder.splice(r,0,t),e.commutativeKeys.add(t)},ry=function(e,t){-1===e.optimisticOrder.indexOf(t)&&e.optimisticOrder.unshift(t),e.refLock.has(t)||(e.refLock.set(t,new Map),e.links.optimistic.set(t,new Map),e.records.optimistic.set(t,new Map))},iy=function(e,t){e.refLock.has(t)&&(e.refLock.delete(t),e.records.optimistic.delete(t),e.links.optimistic.delete(t),e.deferredKeys.delete(t))},ay=function(e,t){var n=e.optimisticOrder.indexOf(t);n>-1&&(e.optimisticOrder.splice(n,1),e.commutativeKeys.delete(t)),iy(e,t)},oy=function(e){var t=Rv;Rv=new Set;var n=Cv.links.optimistic.get(e);if(n){var r,i=D(n.entries());try{for(i.s();!(r=i.n()).done;){var a=r.value,o=a[0],s=a[1];for(var u in s)ty(o,u,s[u])}}catch(e){i.e(e)}finally{i.f()}}var l=Cv.records.optimistic.get(e);if(l){var c,f=D(l.entries());try{for(f.s();!(c=f.n()).done;){var d=c.value,p=d[0],h=d[1];for(var m in h)ey(p,m,h[m])}}catch(e){f.e(e)}finally{f.f()}}Rv=t,ay(Cv,e)},sy=function(e){var t=Cv,n=t.links,r=t.records,i=[],a=new Set;return Qv(e),Hv(i,a,e,n),Hv(i,a,e,r),i},uy=function(){if(Cv.storage){Dv=!0,Iv="read";var e,t=Lv(),n=D(Cv.persist.keys());try{for(n.s();!(e=n.n()).done;){var r=e.value,i=Sv(r),a=i.entityKey,o=i.fieldKey,s=void 0;void 0!==(s=Zv(a,o))?t[r]=":".concat(Ff(s)):void 0!==(s=Xv(a,o))?t[r]=Ff(s):t[r]=void 0}}catch(e){n.e(e)}finally{n.f()}Dv=!1,Cv.storage.writeData(t),Cv.persist.clear()}},ly={current:null},cy={current:!1},fy=function(e){return e.__internal.path.length>0&&e.__internal.errorMap?e.__internal.errorMap[e.__internal.path.join(".")]:void 0},dy=function(e,t,n,r,i,a,o){var s={store:e,variables:t,fragments:n,parent:{__typename:r},parentTypeName:r,parentKey:i,parentFieldKey:"",fieldName:"",error:void 0,partial:!1,optimistic:!!a,__internal:{path:[],errorMap:void 0}};if(o&&o.graphQLErrors)for(var u=0;u<o.graphQLErrors.length;u++){var l=o.graphQLErrors[u];l.path&&l.path.length&&(s.__internal.errorMap||(s.__internal.errorMap=Object.create(null)),s.__internal.errorMap[l.path.join(".")]=l)}return s},py=function(e,t,n,r,i,a){ly.current=e,e.parent=t,e.parentTypeName=n,e.parentKey=r,e.parentFieldKey=i,e.fieldName=a,e.error=fy(e)},hy=function(e,t,n,r){if(!t)return!1;var i=uv(e);return!i||t===i||("write"===Iv||!sv(e).some((function(e){if(!lv(e))return!1;var t=Tv(rv(e),fv(e,r));return!function(e,t){return void 0!==Xv(e,t)||void 0!==Zv(e,t)}(n,t)})))},my=function e(t,n,r,i){var a,o=!1,s=0;return function(){if(!cy.current&&o&&(cy.current=o),a){var u=a();if(null!=u)return u;a=void 0,o=!1}for(;s<r.length;){var l=r[s++];if(yv(l,i.variables)){if(lv(l))return l;var c=cv(l)?l:i.fragments[rv(l)];if(void 0!==c&&(i.store.schema?wv(i.store.schema,c,t):hy(c,t,n,i.variables)))return o=!!gv(l,i.variables),!cy.current&&o&&(cy.current=o),(a=e(t,n,sv(c),i))()}}}},vy=function(e){return null==e?null:e},yy=function e(t,n){if(null==n)return n;if(Array.isArray(n)){for(var r=new Array(n.length),i=0,a=r.length;i<a;i++)r[i]=e(t,n[i]);return r}return t.keyOfEntity(n)},gy=function(e,t,n,r,i){var a=mv(t.query),o={data:n,dependencies:zv()},s=e.rootFields[a.operation],u=dy(e,pv(a,t.variables),vv(t.query),s,s,!!i,r);return xy(u,s,sv(a),n),o},xy=function(e,t,n,r){var i=t===e.store.rootFields.query,a=!i&&!!e.store.rootNames[t],o=a||i?t:r.__typename;if(o){a||i||!t||ey(t,"__typename",o);for(var s,u=my(o,t||o,n,e);s=u();){var l=rv(s),c=fv(s,e.variables),f=Tv(l,c),d=av(s),p=r[e.optimistic?l:d];if(!("__typename"===l||void 0===p&&(cy.current||e.optimistic&&!a))){e.__internal.path.push(d);var h=void 0;if(e.optimistic&&a){if(!(h=e.store.optimisticMutations[l]))continue}else e.optimistic&&"function"==typeof p&&(h=p);if(h&&(py(e,r,o,o,f,l),p=vy(h(c||{},e.store,e))),s.selectionSet)if(t&&!a){var m=_v(t,f),v=by(e,sv(s),vy(p),m);ty(t||o,f,v)}else by(e,sv(s),vy(p));else t&&!a&&ey(t||o,f,null===p&&fy(e)?void 0:p);if(a){var y=e.store.updates[o][l];y&&(py(e,r,o,o,_v(o,f),l),r[l]=p,y(r,c||{},e.store,e))}e.__internal.path.pop()}}}},by=function e(t,n,r,i){if(Array.isArray(r)){for(var a=new Array(r.length),o=0,s=r.length;o<s;o++){t.__internal.path.push(o);var u=i?_v(i,"".concat(o)):void 0,l=e(t,n,r[o],u);a[o]=l,t.__internal.path.pop()}return a}if(null===r)return fy(t)?void 0:null;var c=t.store.keyOfEntity(r);r.__typename;var f=c||i;return xy(t,f,n,r),f||null},wy=function(){function e(t){var n,r;y(this,e),e.prototype.__init.call(this),e.prototype.__init2.call(this),t||(t={}),this.resolvers=t.resolvers||{},this.optimisticMutations=t.optimistic||{},this.keys=t.keys||{};var i,a="Query",o="Mutation",s="Subscription";if(t.schema){var u=function(e){var t=e.__schema,n=new Map,r=function(e){var t;return function(){if(!t){t={};for(var n=0;n<e.length;n++)t[e[n].name]=e[n]}return t}},i=function(e){switch(e.kind){case"OBJECT":case"INTERFACE":return{name:e.name,kind:e.kind,interfaces:r(e.interfaces||[]),fields:r(e.fields.map((function(e){return{name:e.name,type:e.type,args:r(e.args)}})))};case"UNION":return{name:e.name,kind:e.kind,types:r(e.possibleTypes||[])}}},a={query:t.queryType?t.queryType.name:null,mutation:t.mutationType?t.mutationType.name:null,subscription:t.subscriptionType?t.subscriptionType.name:null,types:void 0,isSubType:function(e,t){var r=n.get(e),i=n.get(t);return!(!r||!i)&&("UNION"===r.kind?!!r.types()[t]:"OBJECT"!==r.kind&&"OBJECT"===i.kind?!!i.interfaces()[e]:e===t)}};if(t.types){a.types=n;for(var o=0;o<t.types.length;o++){var s=t.types[o];if(s&&s.name){var u=i(s);u&&n.set(s.name,u)}}}return a}(t.schema);a=u.query||a,o=u.mutation||o,s=u.subscription||s,u.types&&(this.schema=u)}this.updates=(b(n={},o,t.updates&&t.updates.Mutation||{}),b(n,s,t.updates&&t.updates.Subscription||{}),n),this.rootFields={query:a,mutation:o,subscription:s},this.rootNames=(b(r={},a,"query"),b(r,o,"mutation"),b(r,s,"subscription"),r),this.data=(i=a,{defer:!1,gc:new Set,persist:new Set,queryRootKey:i,refCount:new Map,refLock:new Map,links:{optimistic:new Map,base:new Map},records:{optimistic:new Map,base:new Map},deferredKeys:new Set,commutativeKeys:new Set,optimisticOrder:[],storage:null}),this.schema}return x(e,[{key:"__init",value:function(){this.keyOfField=Tv}},{key:"keyOfEntity",value:function(e){return ly.current&&e===ly.current.parent?ly.current.parentKey:null==e||"string"==typeof e?e||null:e.__typename?this.rootNames[e.__typename]?e.__typename:(this.keys[e.__typename]?t=this.keys[e.__typename](e):null!=e.id?t="".concat(e.id):null!=e._id&&(t="".concat(e._id)),t?"".concat(e.__typename,":").concat(t):null):null;var t}},{key:"resolve",value:function(e,t,n){var r=Tv(t,n),i=this.keyOfEntity(e);if(!i)return null;var a=Xv(i,r);return void 0!==a?a:Zv(i,r)||null}},{key:"__init2",value:function(){this.resolveFieldByKey=this.resolve}},{key:"invalidate",value:function(e,t,n){var r=this.keyOfEntity(e);hv(r,"",19),function(e,t,n){for(var r=t?[{fieldKey:Tv(t,n)}]:sy(e),i=0,a=r.length;i<a;i++){var o=r[i].fieldKey;void 0!==Zv(e,o)?ty(e,o,void 0):ey(e,o,void 0)}}(r,t,n)}},{key:"inspectFields",value:function(e){var t=this.keyOfEntity(e);return t?sy(t):[]}},{key:"updateQuery",value:function(e,t){var n=Jf(e.query,e.variables);n.query=ad(n.query);var r=t(this.readQuery(n));null!==r&&gy(this,n,r)}},{key:"readQuery",value:function(e){var t=Jf(e.query,e.variables);return t.query=ad(t.query),Ny(this,t).data}},{key:"readFragment",value:function(e,t,n,r){return Ey(this,ad(e),t,n,r)}},{key:"writeFragment",value:function(e,t,n,r){!function(e,t,n,r,i){var a,o=vv(t);if(i){if(!(a=o[i]))return null}else if(!(a=o[Object.keys(o)[0]]))return null;var s=iv(a),u=d({__typename:s},n),l=e.keyOfEntity(u);if(l){var c=dy(e,r||{},o,s,l,void 0);xy(c,l,sv(a),u)}}(this,ad(e),t,n,r)}},{key:"link",value:function(e,t,n,r){var i=void 0!==r?n:null,a=void 0!==r?r:n,o=yy(this,e);"string"==typeof o&&ty(o,Tv(t,i),yy(this,a))}}]),e}(),ky=function(e,t,n,r,i){Pv("read",e.data,i);var a=Ny(e,t,n,r);return Uv(),a},Ny=function(e,t,n,r){var i=mv(t.query),a=e.rootFields[i.operation],o=sv(i),s=dy(e,pv(i,t.variables),vv(t.query),a,a,!1,r);n||(n=Mv());var u=a!==s.store.rootFields.query?Ty(s,a,o,n):Sy(s,a,o,n);return{dependencies:zv(),partial:s.partial||!u,data:u||null}},Ty=function(e,t,n,r){if("string"!=typeof(e.store.rootNames[t]?t:r.__typename))return r;for(var i,a=my(t,t,n,e),o=!1,s=Mv(r);i=a();){var u=av(i),l=r[u];e.__internal.path.push(u);var c=void 0;c=i.selectionSet&&null!==l?_y(e,sv(i),vy(l)):l,o=o||c!==l,void 0!==c&&(s[u]=c),e.__internal.path.pop()}return o?s:r},_y=function e(t,n,r){if(Array.isArray(r)){for(var i=new Array(r.length),a=!1,o=0,s=r.length;o<s;o++)t.__internal.path.push(o),i[o]=e(t,n,r[o]),a=a||i[o]!==r[o],t.__internal.path.pop();return a?i:r}if(null===r)return null;var u=t.store.keyOfEntity(r);return null!==u?Sy(t,u,n,r)||null:Ty(t,r.__typename,n,r)},Ey=function(e,t,n,r,i){var a,o=vv(t);if(i){if(!(a=o[i]))return null}else if(!(a=o[Object.keys(o)[0]]))return null;var s=iv(a);"string"==typeof n||n.__typename||(n.__typename=s);var u=e.keyOfEntity(n);if(!u)return null;var l=dy(e,r||{},o,s,u);return Sy(l,u,sv(a),Mv())||null},Sy=function(e,t,n,r,i){var a=e.store,o=t===a.rootFields.query,s=i&&a.keyOfEntity(i)||t,u=o?t:Xv(s,"__typename")||i&&i.__typename;if("string"==typeof u&&(!i||u===i.__typename)){for(var l,c=my(u,s,n,e),f=!1,d=!1,p=u!==r.__typename,m=Mv(r);void 0!==(l=c());){var v=rv(l),y=fv(l,e.variables),g=av(l),x=Tv(v,y),b=_v(s,x),w=Xv(s,x),k=i?i[v]:void 0,N=a.resolvers[u];e.__internal.path.push(g);var T=void 0;if("__typename"===v)T=u;else if(void 0!==k&&void 0===l.selectionSet)T=k;else if("read"===Bv()&&N&&"function"==typeof N[v]){if(py(e,m,u,s,b,v),void 0!==w&&(m[g]=w),T=N[v](m,y||{},a,e),l.selectionSet&&(T=Ly(e,u,v,b,sv(l),void 0!==m[g]?m[g]:r[g],T,Fv(r))),a.schema&&null===T&&!xv(a.schema,u,v))return}else if(l.selectionSet)if(void 0!==k)T=Ly(e,u,v,b,sv(l),void 0!==m[g]?m[g]:r[g],k,Fv(r));else{var _=Zv(s,x);void 0!==_?T=Ay(e,_,u,v,sv(l),void 0!==m[g]?m[g]:r[g],Fv(r)):"object"==h(w)&&null!==w&&(T=w)}else T=w;if(void 0===T&&cy.current)f=!0;else if(void 0===T&&(a.schema&&xv(a.schema,u,v)||fy(e)))d=!0,T=null;else{if(void 0===T)return void e.__internal.path.pop();f=f||"__typename"!==v}e.__internal.path.pop(),p=p||T!==r[g],void 0!==T&&(m[g]=T)}return e.partial=e.partial||d,o&&d&&!f?void 0:p?m:r}},Ly=function e(t,n,r,i,a,o,s,u){if(Array.isArray(s)){for(var l=t.store,c=!!l.schema&&bv(l.schema,n,r),f=new Array(s.length),d=!Array.isArray(o)||s.length!==o.length,p=0,h=s.length;p<h;p++){t.__internal.path.push(p);var m=e(t,n,r,_v(i,"".concat(p)),a,null!=o?o[p]:void 0,s[p],u);if(t.__internal.path.pop(),void 0===m&&!c)return;t.partial=t.partial||void 0===m&&c,f[p]=null!=m?m:null,d=d||f[p]!==o[p]}return d?f:o}if(null==s)return s;if(u&&null===o)return null;if(Oy(s)){var v=o||Mv();return"string"==typeof s?Sy(t,s,a,v):Sy(t,i,a,v,s)}},Ay=function e(t,n,r,i,a,o,s){if(Array.isArray(n)){for(var u=t.store,l=!!u.schema&&bv(u.schema,r,i),c=new Array(n.length),f=!Array.isArray(o)||c.length!==o.length,d=0,p=n.length;d<p;d++){t.__internal.path.push(d);var h=e(t,n[d],r,i,a,null!=o?o[d]:void 0,s);if(t.__internal.path.pop(),void 0===h&&!l)return;t.partial=t.partial||void 0===h&&l,c[d]=h||null,f=f||c[d]!==o[d]}return f?c:o}return null===n||null===o&&s?null:Sy(t,n,a,o||Mv())},Oy=function(e){return"string"==typeof e||"object"==h(e)&&"string"==typeof e.__typename},Iy=function(e,t){return ud(e.kind,e,d(d({},e.context),{},{meta:d(d({},e.context.meta),{},{cacheOutcome:t})}))},Cy=function(e,t){return ud(e.kind,e,d(d({},e.context),{},{requestPolicy:t}))},Ry=function(e){return function(t){var n=t.forward,r=t.client;t.dispatchDebug;var i=new wy(e);e&&e.storage&&e.storage.readData().then((function(t){!function(e,t,n){for(var r in Pv("write",e,null),n){var i=n[r];if(void 0!==i){var a=Sv(r),o=a.entityKey,s=a.fieldKey;":"===i[0]?void 0===Zv(o,s)&&ty(o,s,JSON.parse(i.slice(1))):void 0===Xv(o,s)&&ey(o,s,JSON.parse(i))}}Uv(),e.storage=t}(i.data,e.storage,t)}));var a=new Map,o=[],s=new Map,u=new Map,l=new Set,c=new Set,f=new Map,d=new Set,p=new Set,h=function(e){var t,n=D(e.values());try{for(n.s();!(t=n.n()).done;){var r=t.value;if(l.has(r))return!0}}catch(e){n.e(e)}finally{n.f()}return!1},m=function(e,t){if(t){var n,r=D(t.values());try{for(r.s();!(n=r.n()).done;){var i=n.value,a=f.get(i);if(a){var o,s=D(a.values());try{for(s.s();!(o=s.n()).done;){var u=o.value;e.add(u)}}catch(e){s.e(e)}finally{s.f()}}}}catch(e){r.e(e)}finally{r.f()}}},v=function(e,t){var n,i=D(t.values());try{for(i.s();!(n=i.n()).done;){var a=n.value;if(a!==e.key){var o=s.get(a);if(o){"query"===e.kind&&p.add(a),s.delete(a);var u="cache-first";c.has(a)&&(c.delete(a),u="cache-and-network"),r.reexecuteOperation(Cy(o,u))}}}}catch(e){i.e(e)}finally{i.f()}var l=d;"query"===e.kind&&(d=p).add(e.key),(p=l).clear()},y=function(e){if("query"===e.kind)ny(i.data,e.key);else if("teardown"===e.kind)s.delete(e.key),u.delete(e.key),Vv(i.data,e.key);else if("mutation"===e.kind&&"network-only"!==e.context.requestPolicy){var t=function(e,t,n){Pv("write",e.data,n,!0);var r=gy(e,t,{},void 0,!0);return Uv(),r}(i,e,e.key),n=t.dependencies;if(n.size){var r,o=D(n.values());try{for(o.s();!(r=o.n()).done;){var c=r.value;l.add(c)}}catch(e){o.e(e)}finally{o.f()}a.set(e.key,n);var f=new Set;m(f,n),v(e,f)}}return ud(e.kind,{key:e.key,query:ad(e.query),variables:e.variables?dv(mv(e.query),e.variables):e.variables},e.context)},g=function(e,t){var n,r=D(t.values());try{for(r.s();!(n=r.n()).done;){var i=n.value,a=f.get(i);a||f.set(i,a=new Set),a.add(e.key)}}catch(e){r.e(e)}finally{r.f()}},x=function(e){var t=ky(i,e,u.get(e.key)),n=t.data?t.partial?"partial":"hit":"miss";return u.set(e.key,t.data),s.set(e.key,e),g(e,t.dependencies),{outcome:n,operation:e,data:t.data,dependencies:t.dependencies}},b=function(e,t){var n,r=e.error,o=e.extensions,l=s.get(e.operation.key),c=l?ud(l.kind,l,e.operation.context):e.operation;if("mutation"===c.kind){var f=a.get(c.key);m(t,f),a.delete(c.key)}ny(i.data,c.key,"subscription"===c.kind||e.hasNext);var d=e.data;if(d){var p=function(e,t,n,r,i){Pv("write",e.data,i||null);var a=gy(e,t,n,r);return Uv(),a}(i,c,d,e.error,c.key).dependencies;m(t,p);var h=ky(i,c,"query"===c.kind&&u.get(c.key)||d,e.error,c.key);d=h.data,"query"===c.kind&&(m(t,n=h.dependencies),u.set(c.key,d))}else Vv(i.data,c.key);return n&&(s.set(c.key,c),g(e.operation,n)),{data:d,error:r,extensions:o,operation:c}};return function(e){var t=gf(e),s=gf(df(x)(ff((function(e){return"query"===e.kind&&"network-only"!==e.context.requestPolicy}))(t))),u=ff((function(e){return"query"!==e.kind||"network-only"===e.context.requestPolicy}))(t),f=df((function(e){return Iy(e.operation,"miss")}))(ff((function(e){return"miss"===e.outcome&&"cache-only"!==e.operation.context.requestPolicy&&!h(e.dependencies)&&!d.has(e.operation.key)}))(s)),p=df((function(e){var t=e.operation,n=e.outcome,i=e.dependencies,a={operation:Iy(t,n),data:e.data,error:e.error,extensions:e.extensions};return("cache-and-network"===t.context.requestPolicy||"cache-first"===t.context.requestPolicy&&"partial"===n)&&(a.stale=!0,h(i)?"cache-and-network"===t.context.requestPolicy&&c.add(t.key):r.reexecuteOperation(Cy(t,"network-only"))),a}))(ff((function(e){return"miss"!==e.outcome||"cache-only"===e.operation.context.requestPolicy}))(s)),m=gf(n(df(y)(hf([u,f])))),g=df((function(e){var t=new Set,n=b(e,t);return v(e.operation,t),n}))(ff((function(e){return!a.has(e.operation.key)}))(m)),w=pf((function(e){if(o.push(e)<a.size)return Sf;for(var t=0;t<o.length;t++)ny(i.data,o[t].operation.key);l.clear();for(var n,r=[],s=new Set;n=o.shift();)r.push(b(n,s));return v(e.operation,s),Nf(r)}))(ff((function(e){return a.has(e.operation.key)}))(m));return hf([g,w,p])}}},jy={__typename:"PageInfo",endCursor:null,startCursor:null,hasNextPage:!1,hasPreviousPage:!1},Dy=function(e){return"string"==typeof e?e:null},My=function(e,t,n){for(var r=new Set,i=0,a=t.length;i<a;i++){var o=e.resolve(t[i],"node");"string"==typeof o&&r.add(o)}for(var s=t.slice(),u=0,l=n.length;u<l;u++){var c=n[u],f=e.resolve(c,"node");"string"!=typeof f||r.has(f)||(r.add(f),s.push(c))}return s},Fy=function(e,t){for(var n=new Set,r=0,i=e.length;r<i;r++){var a=e[r];"string"==typeof a&&n.add(a)}for(var o=e.slice(),s=0,u=t.length;s<u;s++){var l=t[s];"string"!=typeof l||n.has(l)||(n.add(l),o.push(l))}return o},Py=function(e,t){for(var n in t)if("first"!==n&&"last"!==n&&"after"!==n&&"before"!==n){if(!(n in e))return!1;var r=e[n],i=t[n];if(h(r)!=h(i)||"object"!=h(r)?r!==i:Ff(r)!==Ff(i))return!1}for(var a in e)if("first"!==a&&"last"!==a&&"after"!==a&&"before"!==a&&!(a in t))return!1;return!0},Uy=function(e,t,n){var r=Dy(e.resolve(t,n));if(!r)return null;var i=e.resolve(r,"__typename"),a=e.resolve(r,"edges")||[],o=e.resolve(r,"nodes")||[];if("string"!=typeof i)return null;var s={__typename:i,edges:a,nodes:o,pageInfo:jy},u=e.resolve(r,"pageInfo");if("string"==typeof u){var l=Dy(e.resolve(u,"__typename")),c=Dy(e.resolve(u,"endCursor")),f=Dy(e.resolve(u,"startCursor")),d=e.resolve(u,"hasNextPage"),p=e.resolve(u,"hasPreviousPage"),h=s.pageInfo={__typename:"string"==typeof l?l:"PageInfo",hasNextPage:"boolean"==typeof d?d:!!c,hasPreviousPage:"boolean"==typeof p?p:!!f,endCursor:c,startCursor:f};if(null===h.endCursor){var m=a[a.length-1];if(m){var v=e.resolve(m,"cursor");h.endCursor=Dy(v)}}if(null===h.startCursor){var y=a[0];if(y){var g=e.resolve(y,"cursor");h.startCursor=Dy(g)}}}return s},Vy=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.mergeMode||"inwards";return function(e,n,r,i){var a=i.parentKey,o=i.fieldName,s=r.inspectFields(a).filter((function(e){return e.fieldName===o})),u=s.length;if(0!==u){for(var l=null,c=[],f=[],p=[],h=[],m=d({},jy),v=0;v<u;v++){var y=s[v],g=y.fieldKey,x=y.arguments;if(null!==x&&Py(n,x)){var b=Uy(r,a,g);if(null!==b&&(0!==b.nodes.length||0!==b.edges.length||!l)){if("inwards"===t&&"number"==typeof x.last&&"number"==typeof x.first){var w=b.edges.slice(0,x.first+1),k=b.edges.slice(-x.last),N=b.nodes.slice(0,x.first+1),T=b.nodes.slice(-x.last);c=My(r,c,w),f=My(r,k,f),p=Fy(p,N),h=Fy(T,h),m=b.pageInfo}else x.after?(c=My(r,c,b.edges),p=Fy(p,b.nodes),m.endCursor=b.pageInfo.endCursor,m.hasNextPage=b.pageInfo.hasNextPage):x.before?(f=My(r,b.edges,f),h=Fy(b.nodes,h),m.startCursor=b.pageInfo.startCursor,m.hasPreviousPage=b.pageInfo.hasPreviousPage):"number"==typeof x.last?(f=My(r,b.edges,f),h=Fy(b.nodes,h),m=b.pageInfo):(c=My(r,c,b.edges),p=Fy(p,b.nodes),m=b.pageInfo);b.pageInfo.__typename!==m.__typename&&(m.__typename=b.pageInfo.__typename),l!==b.__typename&&(l=b.__typename)}}}if("string"==typeof l){if(!Dy(r.resolve(a,o,n))){if(!i.store.schema)return;i.partial=!0}return{__typename:l,edges:"inwards"===t?My(r,c,f):My(r,f,c),nodes:"inwards"===t?Fy(p,h):Fy(h,p),pageInfo:{__typename:m.__typename,endCursor:m.endCursor,startCursor:m.startCursor,hasNextPage:m.hasNextPage,hasPreviousPage:m.hasPreviousPage}}}}}};function By(){return By=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},By.apply(this,arguments)}function zy(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function qy(e,t){var n;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return zy(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?zy(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0;return function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}return(n=e[Symbol.iterator]()).next.bind(n)}function Jy(e){return function(t){return!!Iu(t)&&t.kind===e}}var Gy=Jy(_u.FIELD),$y=Jy(_u.FRAGMENT_DEFINITION);function Wy(e,t,n){if(null==e)return e;for(var r=By({},e),i=r,a=0;a<t.length-1;a+=1){var o=t[a];if(Array.isArray(i[o])){var s=function(){var e=t.slice(a+1);return i[o]=i[o].map((function(t){return Wy(t,e,n)})),{v:r}}();if("object"===h(s))return s.v}else{if(null===i[o])return r;i[o]=By({},i[o])}i=i[o]}var u=t[t.length-1];return Array.isArray(i[u])?i[u]=i[u].map(n):null!=i[u]&&(i[u]=n(i[u])),r}function Hy(e){return $l(e)||Wl(e)?Hy(e.ofType):Vl(e)?e:void 0}function Ky(e){return Hy(e)}function Qy(e){var t=e.schema,n=e.scalars,r=af(t),i=new ef(r),a=function(e){return t=i,r={Field:function(t,r,a,o,s){var u=i.getType();if(null!=u){var l=Ky(u);if(null!=l){var c=l.name;if(null!=n[c]){for(var f,d,p=s[0],h=[],m=qy(o);!(d=m()).done;)if(p=p[d.value],Gy(p)){var v=p;v.alias?h.push(v.alias.value):h.push(v.name.value)}else $y(p)&&(f=p.name.value);e.push({fragmentName:f,kind:"Scalar",name:c,path:h})}}}},FragmentSpread:function(t,n,r,i,a){for(var o,s=a[0],u=[],l=qy(i);!(o=l()).done;)if(s=s[o.value],Gy(s)){var c=s;c.alias?u.push(c.alias.value):u.push(c.name.value)}e.push({kind:"FragmentSpread",name:t.name.value,path:u})}},{enter:function(){for(var e=arguments.length,n=new Array(e),i=0;i<e;i++)n[i]=arguments[i];var a=n[0];t.enter(a);var o=Ll(r,a.kind).enter;if(o){var s=o.apply(r,n);return void 0!==s&&(t.leave(a),Iu(s)&&t.enter(s)),s}},leave:function(){for(var e=arguments.length,n=new Array(e),i=0;i<e;i++)n[i]=arguments[i];var a,o=n[0],s=Ll(r,o.kind).leave;return s&&(a=s.apply(r,n)),t.leave(o),a}};var t,r};return function(e){var t=e.forward;return function(e){return function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];for(var r=t[0],i=1,a=t.length;i<a;i++)r=t[i](r);return r}(t(e),df((function(e){if(null==e.data)return e;var t=[];if(Sl(e.operation.query,a(t)),0===t.length)return e;for(var r={},i=[],o=0,s=t;o<s.length;o++){var u=s[o];if("Scalar"===u.kind)i.push(u);else{var l,c=u.name;r[c]=null!=(l=r[c])?l:[],r[c].push(u)}}for(var f=0,d=i;f<d.length;f++){var p=d[f],h=p.fragmentName,m=p.name,v=p.path;if(h&&r[h])for(var y,g=qy(r[h]);!(y=g()).done;){var x=y.value.path;e.data=Wy(e.data,[].concat(x,v),n[m])}else e.data=Wy(e.data,v,n[m])}return e})))}}}var Yy=x((function e(t){var n=t.uri,r=t.name,i=t.type;y(this,e),this.uri=n,this.name=r,this.type=i})),Xy=Yy,Zy=function(e){return"undefined"!=typeof File&&e instanceof File||"undefined"!=typeof Blob&&e instanceof Blob||e instanceof Xy},eg=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Zy,r=new Map,i=new Map;function a(e,t,o){var s=e;if(n(e)){s=null;var u=r.get(e);u?u.push(t):r.set(e,[t])}else{var l=Array.isArray(e)||"undefined"!=typeof FileList&&e instanceof FileList,c=e&&e.constructor===Object;if(l||c){var f=i.has(e);if(f?s=i.get(e):(s=l?[]:{},i.set(e,s)),!o.has(e)){var d=t?"".concat(t,"."):"",p=new Set(o).add(e);if(l){var h,m=0,v=D(e);try{for(v.s();!(h=v.n()).done;){var y=a(h.value,d+m++,p);f||s.push(y)}}catch(e){v.e(e)}finally{v.f()}}else for(var g in e){var x=a(e[g],d+g,p);f||(s[g]=x)}}}}return s}return{clone:a(e,t,new Set),files:r}},tg=function(e){var t=e.forward;return e.dispatchDebug,function(e){var n=gf(e),r=pf((function(e){var t,r,i=ff((function(t){return"teardown"===t.kind&&t.key===e.key}))(n),a=eg(d({},e.variables)),o=a.files,s=a.clone,u=Kf({query:e.query,variables:s});if(o.size){t=Qf(e),"application/json"===(r=Yf(e)).headers["content-type"]&&delete r.headers["content-type"],r.method="POST",r.body=new FormData,r.body.append("operations",JSON.stringify(u));var l={},c=0;o.forEach((function(e){l[++c]=e.map((function(e){return"variables.".concat(e)}))})),r.body.append("map",JSON.stringify(l)),c=0,o.forEach((function(e,t){r.body.append(""+ ++c,t,t.name)}))}else t=Qf(e,u),r=Yf(e,u);return vf((function(e){e.data||e.error}))(wf(i)(td(e,t,r)))}))(ff((function(e){return"query"===e.kind||"mutation"===e.kind}))(n)),i=t(ff((function(e){return"query"!==e.kind&&"mutation"!==e.kind}))(n));return hf([r,i])}};function ng(e){return null===e?"null":Array.isArray(e)?"array":h(e)}function rg(e){return"object"===ng(e)}function ig(e,t){return e.length<124?e:t}var ag,og,sg="graphql-transport-ws";function ug(e){if(!rg(e))throw new Error("Message is expected to be an object, but got ".concat(ng(e)));if(!e.type)throw new Error("Message is missing the 'type' property");if("string"!=typeof e.type)throw new Error("Message is expects the 'type' property to be a string, but got ".concat(ng(e.type)));switch(e.type){case og.ConnectionInit:case og.ConnectionAck:case og.Ping:case og.Pong:if("payload"in e&&!rg(e.payload))throw new Error('"'.concat(e.type,"\" message expects the 'payload' property to be an object or missing, but got \"").concat(e.payload,'"'));break;case og.Subscribe:if("string"!=typeof e.id)throw new Error('"'.concat(e.type,"\" message expects the 'id' property to be a string, but got ").concat(ng(e.id)));if(!e.id)throw new Error('"'.concat(e.type,"\" message requires a non-empty 'id' property"));if(!rg(e.payload))throw new Error('"'.concat(e.type,"\" message expects the 'payload' property to be an object, but got ").concat(ng(e.payload)));if("string"!=typeof e.payload.query)throw new Error('"'.concat(e.type,"\" message payload expects the 'query' property to be a string, but got ").concat(ng(e.payload.query)));if(null!=e.payload.variables&&!rg(e.payload.variables))throw new Error('"'.concat(e.type,"\" message payload expects the 'variables' property to be a an object or nullish or missing, but got ").concat(ng(e.payload.variables)));if(null!=e.payload.operationName&&"string"!==ng(e.payload.operationName))throw new Error('"'.concat(e.type,"\" message payload expects the 'operationName' property to be a string or nullish or missing, but got ").concat(ng(e.payload.operationName)));if(null!=e.payload.extensions&&!rg(e.payload.extensions))throw new Error('"'.concat(e.type,"\" message payload expects the 'extensions' property to be a an object or nullish or missing, but got ").concat(ng(e.payload.extensions)));break;case og.Next:if("string"!=typeof e.id)throw new Error('"'.concat(e.type,"\" message expects the 'id' property to be a string, but got ").concat(ng(e.id)));if(!e.id)throw new Error('"'.concat(e.type,"\" message requires a non-empty 'id' property"));if(!rg(e.payload))throw new Error('"'.concat(e.type,"\" message expects the 'payload' property to be an object, but got ").concat(ng(e.payload)));break;case og.Error:if("string"!=typeof e.id)throw new Error('"'.concat(e.type,"\" message expects the 'id' property to be a string, but got ").concat(ng(e.id)));if(!e.id)throw new Error('"'.concat(e.type,"\" message requires a non-empty 'id' property"));if(t=e.payload,!(Array.isArray(t)&&t.length>0&&t.every((function(e){return"message"in e}))))throw new Error('"'.concat(e.type,"\" message expects the 'payload' property to be an array of GraphQL errors, but got ").concat(JSON.stringify(e.payload)));break;case og.Complete:if("string"!=typeof e.id)throw new Error('"'.concat(e.type,"\" message expects the 'id' property to be a string, but got ").concat(ng(e.id)));if(!e.id)throw new Error('"'.concat(e.type,"\" message requires a non-empty 'id' property"));break;default:throw new Error("Invalid message 'type' property \"".concat(e.type,'"'))}var t;return e}function lg(e,t){return ug("string"==typeof e?JSON.parse(e,t):e)}function cg(e,t){return ug(e),JSON.stringify(e,t)}function fg(e){return rg(e)&&"code"in e&&"reason"in e}!function(e){e[e.InternalServerError=4500]="InternalServerError",e[e.InternalClientError=4005]="InternalClientError",e[e.BadRequest=4400]="BadRequest",e[e.BadResponse=4004]="BadResponse",e[e.Unauthorized=4401]="Unauthorized",e[e.Forbidden=4403]="Forbidden",e[e.SubprotocolNotAcceptable=4406]="SubprotocolNotAcceptable",e[e.ConnectionInitialisationTimeout=4408]="ConnectionInitialisationTimeout",e[e.ConnectionAcknowledgementTimeout=4504]="ConnectionAcknowledgementTimeout",e[e.SubscriberAlreadyExists=4409]="SubscriberAlreadyExists",e[e.TooManyInitialisationRequests=4429]="TooManyInitialisationRequests"}(ag||(ag={})),function(e){e.ConnectionInit="connection_init",e.ConnectionAck="connection_ack",e.Ping="ping",e.Pong="pong",e.Subscribe="subscribe",e.Next="next",e.Error="error",e.Complete="complete"}(og||(og={}));var dg={__schema:{queryType:{name:"Query"},mutationType:{name:"Mutation"},subscriptionType:{name:"Subscription"},types:[{kind:"OBJECT",name:"Annotation",description:null,fields:[{name:"author",description:null,args:[],type:{kind:"OBJECT",name:"User",ofType:null},isDeprecated:!1,deprecationReason:null},{name:"commentsCount",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"Int",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"createdAt",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"DateTime",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"id",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"ID",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"quote",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"String",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"target",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"Json",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"text",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"String",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"updatedAt",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"DateTime",ofType:null}},isDeprecated:!1,deprecationReason:null}],inputFields:null,interfaces:[],enumValues:null,possibleTypes:null},{kind:"INPUT_OBJECT",name:"AnnotationCreateInput",description:null,fields:null,inputFields:[{name:"quote",description:null,type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"String",ofType:null}},defaultValue:null,isDeprecated:!1,deprecationReason:null},{name:"target",description:null,type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"Json",ofType:null}},defaultValue:null,isDeprecated:!1,deprecationReason:null},{name:"text",description:null,type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"String",ofType:null}},defaultValue:null,isDeprecated:!1,deprecationReason:null}],interfaces:null,enumValues:null,possibleTypes:null},{kind:"SCALAR",name:"Boolean",description:"The `Boolean` scalar type represents `true` or `false`.",fields:null,inputFields:null,interfaces:null,enumValues:null,possibleTypes:null},{kind:"OBJECT",name:"Comment",description:null,fields:[{name:"annotationId",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"ID",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"author",description:null,args:[],type:{kind:"OBJECT",name:"User",ofType:null},isDeprecated:!1,deprecationReason:null},{name:"createdAt",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"DateTime",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"id",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"ID",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"text",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"String",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"updatedAt",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"DateTime",ofType:null}},isDeprecated:!1,deprecationReason:null}],inputFields:null,interfaces:[],enumValues:null,possibleTypes:null},{kind:"INPUT_OBJECT",name:"CommentCreateInput",description:null,fields:null,inputFields:[{name:"annotation",description:null,type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"ID",ofType:null}},defaultValue:null,isDeprecated:!1,deprecationReason:null},{name:"text",description:null,type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"String",ofType:null}},defaultValue:null,isDeprecated:!1,deprecationReason:null}],interfaces:null,enumValues:null,possibleTypes:null},{kind:"SCALAR",name:"DateTime",description:"A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.",fields:null,inputFields:null,interfaces:null,enumValues:null,possibleTypes:null},{kind:"OBJECT",name:"Group",description:null,fields:[{name:"createdAt",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"DateTime",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"id",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"ID",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"members",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"LIST",name:null,ofType:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"User",ofType:null}}}},isDeprecated:!1,deprecationReason:null},{name:"name",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"String",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"token",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"String",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"updatedAt",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"DateTime",ofType:null}},isDeprecated:!1,deprecationReason:null}],inputFields:null,interfaces:[],enumValues:null,possibleTypes:null},{kind:"INPUT_OBJECT",name:"GroupCreateInput",description:null,fields:null,inputFields:[{name:"name",description:null,type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"String",ofType:null}},defaultValue:null,isDeprecated:!1,deprecationReason:null}],interfaces:null,enumValues:null,possibleTypes:null},{kind:"INPUT_OBJECT",name:"GroupUpdateInput",description:null,fields:null,inputFields:[{name:"name",description:null,type:{kind:"SCALAR",name:"String",ofType:null},defaultValue:null,isDeprecated:!1,deprecationReason:null}],interfaces:null,enumValues:null,possibleTypes:null},{kind:"SCALAR",name:"ID",description:'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.',fields:null,inputFields:null,interfaces:null,enumValues:null,possibleTypes:null},{kind:"OBJECT",name:"IdentifierType",description:null,fields:[{name:"id",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"ID",ofType:null}},isDeprecated:!1,deprecationReason:null}],inputFields:null,interfaces:[],enumValues:null,possibleTypes:null},{kind:"SCALAR",name:"Int",description:"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.",fields:null,inputFields:null,interfaces:null,enumValues:null,possibleTypes:null},{kind:"SCALAR",name:"Json",description:"Any type",fields:null,inputFields:null,interfaces:null,enumValues:null,possibleTypes:null},{kind:"SCALAR",name:"JsonObject",description:"The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).",fields:null,inputFields:null,interfaces:null,enumValues:null,possibleTypes:null},{kind:"OBJECT",name:"Lecture",description:null,fields:[{name:"createdAt",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"DateTime",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"group",description:null,args:[],type:{kind:"OBJECT",name:"Group",ofType:null},isDeprecated:!1,deprecationReason:null},{name:"id",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"ID",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"name",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"String",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"owner",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"User",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"participants",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"LIST",name:null,ofType:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"User",ofType:null}}}},isDeprecated:!1,deprecationReason:null},{name:"updatedAt",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"DateTime",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"url",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"String",ofType:null}},isDeprecated:!1,deprecationReason:null}],inputFields:null,interfaces:[],enumValues:null,possibleTypes:null},{kind:"INPUT_OBJECT",name:"LectureCreateInput",description:null,fields:null,inputFields:[{name:"name",description:null,type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"String",ofType:null}},defaultValue:null,isDeprecated:!1,deprecationReason:null},{name:"url",description:null,type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"String",ofType:null}},defaultValue:null,isDeprecated:!1,deprecationReason:null}],interfaces:null,enumValues:null,possibleTypes:null},{kind:"INPUT_OBJECT",name:"LectureUpdateInput",description:null,fields:null,inputFields:[{name:"name",description:null,type:{kind:"SCALAR",name:"String",ofType:null},defaultValue:null,isDeprecated:!1,deprecationReason:null}],interfaces:null,enumValues:null,possibleTypes:null},{kind:"INPUT_OBJECT",name:"LoginInput",description:null,fields:null,inputFields:[{name:"email",description:null,type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"String",ofType:null}},defaultValue:null,isDeprecated:!1,deprecationReason:null},{name:"password",description:null,type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"String",ofType:null}},defaultValue:null,isDeprecated:!1,deprecationReason:null}],interfaces:null,enumValues:null,possibleTypes:null},{kind:"OBJECT",name:"Message",description:null,fields:[{name:"author",description:null,args:[],type:{kind:"OBJECT",name:"User",ofType:null},isDeprecated:!1,deprecationReason:null},{name:"createdAt",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"DateTime",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"groupId",description:null,args:[],type:{kind:"SCALAR",name:"ID",ofType:null},isDeprecated:!1,deprecationReason:null},{name:"id",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"ID",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"parent",description:null,args:[],type:{kind:"OBJECT",name:"Message",ofType:null},isDeprecated:!1,deprecationReason:null},{name:"text",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"String",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"updatedAt",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"DateTime",ofType:null}},isDeprecated:!1,deprecationReason:null}],inputFields:null,interfaces:[],enumValues:null,possibleTypes:null},{kind:"OBJECT",name:"MessageConnection",description:null,fields:[{name:"edges",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"LIST",name:null,ofType:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"MessageEdge",ofType:null}}}},isDeprecated:!1,deprecationReason:null},{name:"nodes",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"LIST",name:null,ofType:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"Message",ofType:null}}}},isDeprecated:!1,deprecationReason:null},{name:"pageInfo",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"PageInfo",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"totalCount",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"Int",ofType:null}},isDeprecated:!1,deprecationReason:null}],inputFields:null,interfaces:[],enumValues:null,possibleTypes:null},{kind:"INPUT_OBJECT",name:"MessageCreateInput",description:null,fields:null,inputFields:[{name:"group",description:null,type:{kind:"SCALAR",name:"ID",ofType:null},defaultValue:null,isDeprecated:!1,deprecationReason:null},{name:"parentMessage",description:null,type:{kind:"SCALAR",name:"ID",ofType:null},defaultValue:null,isDeprecated:!1,deprecationReason:null},{name:"text",description:null,type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"String",ofType:null}},defaultValue:null,isDeprecated:!1,deprecationReason:null}],interfaces:null,enumValues:null,possibleTypes:null},{kind:"OBJECT",name:"MessageEdge",description:null,fields:[{name:"cursor",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"String",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"node",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"Message",ofType:null}},isDeprecated:!1,deprecationReason:null}],inputFields:null,interfaces:[],enumValues:null,possibleTypes:null},{kind:"OBJECT",name:"Mutation",description:null,fields:[{name:"createAnnotation",description:null,args:[{name:"input",description:null,type:{kind:"NON_NULL",name:null,ofType:{kind:"INPUT_OBJECT",name:"AnnotationCreateInput",ofType:null}},defaultValue:null,isDeprecated:!1,deprecationReason:null}],type:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"Annotation",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"createComment",description:null,args:[{name:"input",description:null,type:{kind:"NON_NULL",name:null,ofType:{kind:"INPUT_OBJECT",name:"CommentCreateInput",ofType:null}},defaultValue:null,isDeprecated:!1,deprecationReason:null}],type:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"Comment",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"createGroup",description:null,args:[{name:"input",description:null,type:{kind:"NON_NULL",name:null,ofType:{kind:"INPUT_OBJECT",name:"GroupCreateInput",ofType:null}},defaultValue:null,isDeprecated:!1,deprecationReason:null}],type:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"Group",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"createLecture",description:null,args:[{name:"input",description:null,type:{kind:"NON_NULL",name:null,ofType:{kind:"INPUT_OBJECT",name:"LectureCreateInput",ofType:null}},defaultValue:null,isDeprecated:!1,deprecationReason:null}],type:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"Lecture",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"deleteAnnotation",description:null,args:[{name:"id",description:null,type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"ID",ofType:null}},defaultValue:null,isDeprecated:!1,deprecationReason:null}],type:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"SuccessType",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"deleteLecture",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"SuccessType",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"deleteProfile",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"SuccessType",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"joinGroup",description:null,args:[{name:"token",description:null,type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"String",ofType:null}},defaultValue:null,isDeprecated:!1,deprecationReason:null}],type:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"Group",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"joinLecture",description:null,args:[{name:"lectureId",description:null,type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"ID",ofType:null}},defaultValue:null,isDeprecated:!1,deprecationReason:null},{name:"url",description:null,type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"String",ofType:null}},defaultValue:null,isDeprecated:!1,deprecationReason:null}],type:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"Lecture",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"kickParticipant",description:null,args:[{name:"id",description:null,type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"ID",ofType:null}},defaultValue:null,isDeprecated:!1,deprecationReason:null}],type:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"SuccessType",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"leaveGroup",description:null,args:[{name:"id",description:null,type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"ID",ofType:null}},defaultValue:null,isDeprecated:!1,deprecationReason:null}],type:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"Group",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"leaveLecture",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"SuccessType",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"login",description:null,args:[{name:"input",description:null,type:{kind:"NON_NULL",name:null,ofType:{kind:"INPUT_OBJECT",name:"LoginInput",ofType:null}},defaultValue:null,isDeprecated:!1,deprecationReason:null}],type:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"Token",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"logout",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"SuccessType",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"refreshLogin",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"Token",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"register",description:null,args:[{name:"input",description:null,type:{kind:"NON_NULL",name:null,ofType:{kind:"INPUT_OBJECT",name:"RegisterInput",ofType:null}},defaultValue:null,isDeprecated:!1,deprecationReason:null}],type:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"User",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"sendMessage",description:null,args:[{name:"input",description:null,type:{kind:"NON_NULL",name:null,ofType:{kind:"INPUT_OBJECT",name:"MessageCreateInput",ofType:null}},defaultValue:null,isDeprecated:!1,deprecationReason:null}],type:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"Message",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"updateGroup",description:null,args:[{name:"id",description:null,type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"ID",ofType:null}},defaultValue:null,isDeprecated:!1,deprecationReason:null},{name:"input",description:null,type:{kind:"NON_NULL",name:null,ofType:{kind:"INPUT_OBJECT",name:"GroupUpdateInput",ofType:null}},defaultValue:null,isDeprecated:!1,deprecationReason:null}],type:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"Group",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"updateLecture",description:null,args:[{name:"input",description:null,type:{kind:"NON_NULL",name:null,ofType:{kind:"INPUT_OBJECT",name:"LectureUpdateInput",ofType:null}},defaultValue:null,isDeprecated:!1,deprecationReason:null}],type:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"Lecture",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"updateProfile",description:null,args:[{name:"input",description:null,type:{kind:"NON_NULL",name:null,ofType:{kind:"INPUT_OBJECT",name:"ProfileInput",ofType:null}},defaultValue:null,isDeprecated:!1,deprecationReason:null}],type:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"User",ofType:null}},isDeprecated:!1,deprecationReason:null}],inputFields:null,interfaces:[],enumValues:null,possibleTypes:null},{kind:"OBJECT",name:"PageInfo",description:null,fields:[{name:"endCursor",description:null,args:[],type:{kind:"SCALAR",name:"String",ofType:null},isDeprecated:!1,deprecationReason:null},{name:"hasNextPage",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"Boolean",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"hasPreviousPage",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"Boolean",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"startCursor",description:null,args:[],type:{kind:"SCALAR",name:"String",ofType:null},isDeprecated:!1,deprecationReason:null}],inputFields:null,interfaces:[],enumValues:null,possibleTypes:null},{kind:"INPUT_OBJECT",name:"ProfileInput",description:null,fields:null,inputFields:[{name:"avatar",description:null,type:{kind:"SCALAR",name:"Upload",ofType:null},defaultValue:null,isDeprecated:!1,deprecationReason:null},{name:"bio",description:null,type:{kind:"SCALAR",name:"String",ofType:null},defaultValue:null,isDeprecated:!1,deprecationReason:null},{name:"color",description:null,type:{kind:"SCALAR",name:"String",ofType:null},defaultValue:null,isDeprecated:!1,deprecationReason:null},{name:"deleteAvatar",description:null,type:{kind:"SCALAR",name:"Boolean",ofType:null},defaultValue:"false",isDeprecated:!1,deprecationReason:null},{name:"name",description:null,type:{kind:"SCALAR",name:"String",ofType:null},defaultValue:null,isDeprecated:!1,deprecationReason:null}],interfaces:null,enumValues:null,possibleTypes:null},{kind:"OBJECT",name:"Query",description:null,fields:[{name:"annotations",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"LIST",name:null,ofType:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"Annotation",ofType:null}}}},isDeprecated:!1,deprecationReason:null},{name:"comments",description:null,args:[{name:"annotationId",description:null,type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"ID",ofType:null}},defaultValue:null,isDeprecated:!1,deprecationReason:null}],type:{kind:"NON_NULL",name:null,ofType:{kind:"LIST",name:null,ofType:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"Comment",ofType:null}}}},isDeprecated:!1,deprecationReason:null},{name:"group",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"Group",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"groupMembers",description:null,args:[{name:"id",description:null,type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"ID",ofType:null}},defaultValue:null,isDeprecated:!1,deprecationReason:null}],type:{kind:"NON_NULL",name:null,ofType:{kind:"LIST",name:null,ofType:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"User",ofType:null}}}},isDeprecated:!1,deprecationReason:null},{name:"lecture",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"Lecture",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"me",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"User",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"messages",description:null,args:[{name:"after",description:"Paginate after opaque cursor",type:{kind:"SCALAR",name:"String",ofType:null},defaultValue:null,isDeprecated:!1,deprecationReason:null},{name:"before",description:"Paginate before opaque cursor",type:{kind:"SCALAR",name:"String",ofType:null},defaultValue:null,isDeprecated:!1,deprecationReason:null},{name:"first",description:"Paginate first",type:{kind:"SCALAR",name:"Int",ofType:null},defaultValue:null,isDeprecated:!1,deprecationReason:null},{name:"group",description:null,type:{kind:"SCALAR",name:"ID",ofType:null},defaultValue:'""',isDeprecated:!1,deprecationReason:null},{name:"last",description:"Paginate last",type:{kind:"SCALAR",name:"Int",ofType:null},defaultValue:null,isDeprecated:!1,deprecationReason:null}],type:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"MessageConnection",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"participants",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"LIST",name:null,ofType:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"User",ofType:null}}}},isDeprecated:!1,deprecationReason:null}],inputFields:null,interfaces:[],enumValues:null,possibleTypes:null},{kind:"INPUT_OBJECT",name:"RegisterInput",description:null,fields:null,inputFields:[{name:"avatar",description:null,type:{kind:"SCALAR",name:"Upload",ofType:null},defaultValue:null,isDeprecated:!1,deprecationReason:null},{name:"bio",description:null,type:{kind:"SCALAR",name:"String",ofType:null},defaultValue:null,isDeprecated:!1,deprecationReason:null},{name:"color",description:null,type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"String",ofType:null}},defaultValue:null,isDeprecated:!1,deprecationReason:null},{name:"email",description:null,type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"String",ofType:null}},defaultValue:null,isDeprecated:!1,deprecationReason:null},{name:"name",description:null,type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"String",ofType:null}},defaultValue:null,isDeprecated:!1,deprecationReason:null},{name:"password",description:null,type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"String",ofType:null}},defaultValue:null,isDeprecated:!1,deprecationReason:null}],interfaces:null,enumValues:null,possibleTypes:null},{kind:"SCALAR",name:"String",description:"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.",fields:null,inputFields:null,interfaces:null,enumValues:null,possibleTypes:null},{kind:"OBJECT",name:"Subscription",description:null,fields:[{name:"annotationWasCreated",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"Annotation",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"annotationWasRemoved",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"IdentifierType",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"commentWasAdded",description:null,args:[{name:"annotationId",description:null,type:{kind:"SCALAR",name:"ID",ofType:null},defaultValue:null,isDeprecated:!1,deprecationReason:null}],type:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"Comment",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"groupMemberJoined",description:null,args:[{name:"id",description:null,type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"ID",ofType:null}},defaultValue:null,isDeprecated:!1,deprecationReason:null}],type:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"User",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"groupMemberLeft",description:null,args:[{name:"id",description:null,type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"ID",ofType:null}},defaultValue:null,isDeprecated:!1,deprecationReason:null}],type:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"User",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"groupWasUpdated",description:null,args:[{name:"id",description:null,type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"ID",ofType:null}},defaultValue:null,isDeprecated:!1,deprecationReason:null}],type:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"Group",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"lectureWasUpdated",description:null,args:[{name:"ids",description:null,type:{kind:"LIST",name:null,ofType:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"ID",ofType:null}}},defaultValue:null,isDeprecated:!1,deprecationReason:null}],type:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"Lecture",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"messageWasSent",description:null,args:[{name:"groupId",description:null,type:{kind:"SCALAR",name:"ID",ofType:null},defaultValue:null,isDeprecated:!1,deprecationReason:null}],type:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"Message",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"participantJoined",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"User",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"participantLeft",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"User",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"userWasRemoved",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"IdentifierType",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"userWasUpdated",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"User",ofType:null}},isDeprecated:!1,deprecationReason:null}],inputFields:null,interfaces:[],enumValues:null,possibleTypes:null},{kind:"OBJECT",name:"SuccessType",description:null,fields:[{name:"success",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"Boolean",ofType:null}},isDeprecated:!1,deprecationReason:null}],inputFields:null,interfaces:[],enumValues:null,possibleTypes:null},{kind:"OBJECT",name:"Token",description:null,fields:[{name:"accessToken",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"String",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"accessTokenExpiresAt",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"DateTime",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"user",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"User",ofType:null}},isDeprecated:!1,deprecationReason:null}],inputFields:null,interfaces:[],enumValues:null,possibleTypes:null},{kind:"SCALAR",name:"Upload",description:"The `Upload` scalar type represents a file upload.",fields:null,inputFields:null,interfaces:null,enumValues:null,possibleTypes:null},{kind:"OBJECT",name:"User",description:null,fields:[{name:"avatarUrl",description:null,args:[],type:{kind:"SCALAR",name:"String",ofType:null},isDeprecated:!1,deprecationReason:null},{name:"bio",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"String",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"createdAt",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"DateTime",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"email",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"String",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"id",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"ID",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"isInstructor",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"Boolean",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"isStudent",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"Boolean",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"name",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"String",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"profileColor",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"String",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"role",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"ENUM",name:"UserRole",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"updatedAt",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"DateTime",ofType:null}},isDeprecated:!1,deprecationReason:null}],inputFields:null,interfaces:[],enumValues:null,possibleTypes:null},{kind:"ENUM",name:"UserRole",description:null,fields:null,inputFields:null,interfaces:null,enumValues:[{name:"Instructor",description:null,isDeprecated:!1,deprecationReason:null},{name:"Student",description:null,isDeprecated:!1,deprecationReason:null}],possibleTypes:null},{kind:"OBJECT",name:"__Directive",description:"A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\n\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.",fields:[{name:"name",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"String",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"description",description:null,args:[],type:{kind:"SCALAR",name:"String",ofType:null},isDeprecated:!1,deprecationReason:null},{name:"isRepeatable",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"Boolean",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"locations",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"LIST",name:null,ofType:{kind:"NON_NULL",name:null,ofType:{kind:"ENUM",name:"__DirectiveLocation",ofType:null}}}},isDeprecated:!1,deprecationReason:null},{name:"args",description:null,args:[{name:"includeDeprecated",description:null,type:{kind:"SCALAR",name:"Boolean",ofType:null},defaultValue:"false",isDeprecated:!1,deprecationReason:null}],type:{kind:"NON_NULL",name:null,ofType:{kind:"LIST",name:null,ofType:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"__InputValue",ofType:null}}}},isDeprecated:!1,deprecationReason:null}],inputFields:null,interfaces:[],enumValues:null,possibleTypes:null},{kind:"ENUM",name:"__DirectiveLocation",description:"A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.",fields:null,inputFields:null,interfaces:null,enumValues:[{name:"QUERY",description:"Location adjacent to a query operation.",isDeprecated:!1,deprecationReason:null},{name:"MUTATION",description:"Location adjacent to a mutation operation.",isDeprecated:!1,deprecationReason:null},{name:"SUBSCRIPTION",description:"Location adjacent to a subscription operation.",isDeprecated:!1,deprecationReason:null},{name:"FIELD",description:"Location adjacent to a field.",isDeprecated:!1,deprecationReason:null},{name:"FRAGMENT_DEFINITION",description:"Location adjacent to a fragment definition.",isDeprecated:!1,deprecationReason:null},{name:"FRAGMENT_SPREAD",description:"Location adjacent to a fragment spread.",isDeprecated:!1,deprecationReason:null},{name:"INLINE_FRAGMENT",description:"Location adjacent to an inline fragment.",isDeprecated:!1,deprecationReason:null},{name:"VARIABLE_DEFINITION",description:"Location adjacent to a variable definition.",isDeprecated:!1,deprecationReason:null},{name:"SCHEMA",description:"Location adjacent to a schema definition.",isDeprecated:!1,deprecationReason:null},{name:"SCALAR",description:"Location adjacent to a scalar definition.",isDeprecated:!1,deprecationReason:null},{name:"OBJECT",description:"Location adjacent to an object type definition.",isDeprecated:!1,deprecationReason:null},{name:"FIELD_DEFINITION",description:"Location adjacent to a field definition.",isDeprecated:!1,deprecationReason:null},{name:"ARGUMENT_DEFINITION",description:"Location adjacent to an argument definition.",isDeprecated:!1,deprecationReason:null},{name:"INTERFACE",description:"Location adjacent to an interface definition.",isDeprecated:!1,deprecationReason:null},{name:"UNION",description:"Location adjacent to a union definition.",isDeprecated:!1,deprecationReason:null},{name:"ENUM",description:"Location adjacent to an enum definition.",isDeprecated:!1,deprecationReason:null},{name:"ENUM_VALUE",description:"Location adjacent to an enum value definition.",isDeprecated:!1,deprecationReason:null},{name:"INPUT_OBJECT",description:"Location adjacent to an input object type definition.",isDeprecated:!1,deprecationReason:null},{name:"INPUT_FIELD_DEFINITION",description:"Location adjacent to an input object field definition.",isDeprecated:!1,deprecationReason:null}],possibleTypes:null},{kind:"OBJECT",name:"__EnumValue",description:"One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.",fields:[{name:"name",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"String",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"description",description:null,args:[],type:{kind:"SCALAR",name:"String",ofType:null},isDeprecated:!1,deprecationReason:null},{name:"isDeprecated",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"Boolean",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"deprecationReason",description:null,args:[],type:{kind:"SCALAR",name:"String",ofType:null},isDeprecated:!1,deprecationReason:null}],inputFields:null,interfaces:[],enumValues:null,possibleTypes:null},{kind:"OBJECT",name:"__Field",description:"Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.",fields:[{name:"name",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"String",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"description",description:null,args:[],type:{kind:"SCALAR",name:"String",ofType:null},isDeprecated:!1,deprecationReason:null},{name:"args",description:null,args:[{name:"includeDeprecated",description:null,type:{kind:"SCALAR",name:"Boolean",ofType:null},defaultValue:"false",isDeprecated:!1,deprecationReason:null}],type:{kind:"NON_NULL",name:null,ofType:{kind:"LIST",name:null,ofType:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"__InputValue",ofType:null}}}},isDeprecated:!1,deprecationReason:null},{name:"type",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"__Type",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"isDeprecated",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"Boolean",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"deprecationReason",description:null,args:[],type:{kind:"SCALAR",name:"String",ofType:null},isDeprecated:!1,deprecationReason:null}],inputFields:null,interfaces:[],enumValues:null,possibleTypes:null},{kind:"OBJECT",name:"__InputValue",description:"Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.",fields:[{name:"name",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"String",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"description",description:null,args:[],type:{kind:"SCALAR",name:"String",ofType:null},isDeprecated:!1,deprecationReason:null},{name:"type",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"__Type",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"defaultValue",description:"A GraphQL-formatted string representing the default value for this input value.",args:[],type:{kind:"SCALAR",name:"String",ofType:null},isDeprecated:!1,deprecationReason:null},{name:"isDeprecated",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"Boolean",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"deprecationReason",description:null,args:[],type:{kind:"SCALAR",name:"String",ofType:null},isDeprecated:!1,deprecationReason:null}],inputFields:null,interfaces:[],enumValues:null,possibleTypes:null},{kind:"OBJECT",name:"__Schema",description:"A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.",fields:[{name:"description",description:null,args:[],type:{kind:"SCALAR",name:"String",ofType:null},isDeprecated:!1,deprecationReason:null},{name:"types",description:"A list of all types supported by this server.",args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"LIST",name:null,ofType:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"__Type",ofType:null}}}},isDeprecated:!1,deprecationReason:null},{name:"queryType",description:"The type that query operations will be rooted at.",args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"__Type",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"mutationType",description:"If this server supports mutation, the type that mutation operations will be rooted at.",args:[],type:{kind:"OBJECT",name:"__Type",ofType:null},isDeprecated:!1,deprecationReason:null},{name:"subscriptionType",description:"If this server support subscription, the type that subscription operations will be rooted at.",args:[],type:{kind:"OBJECT",name:"__Type",ofType:null},isDeprecated:!1,deprecationReason:null},{name:"directives",description:"A list of all directives supported by this server.",args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"LIST",name:null,ofType:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"__Directive",ofType:null}}}},isDeprecated:!1,deprecationReason:null}],inputFields:null,interfaces:[],enumValues:null,possibleTypes:null},{kind:"OBJECT",name:"__Type",description:"The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.",fields:[{name:"kind",description:null,args:[],type:{kind:"NON_NULL",name:null,ofType:{kind:"ENUM",name:"__TypeKind",ofType:null}},isDeprecated:!1,deprecationReason:null},{name:"name",description:null,args:[],type:{kind:"SCALAR",name:"String",ofType:null},isDeprecated:!1,deprecationReason:null},{name:"description",description:null,args:[],type:{kind:"SCALAR",name:"String",ofType:null},isDeprecated:!1,deprecationReason:null},{name:"specifiedByURL",description:null,args:[],type:{kind:"SCALAR",name:"String",ofType:null},isDeprecated:!1,deprecationReason:null},{name:"fields",description:null,args:[{name:"includeDeprecated",description:null,type:{kind:"SCALAR",name:"Boolean",ofType:null},defaultValue:"false",isDeprecated:!1,deprecationReason:null}],type:{kind:"LIST",name:null,ofType:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"__Field",ofType:null}}},isDeprecated:!1,deprecationReason:null},{name:"interfaces",description:null,args:[],type:{kind:"LIST",name:null,ofType:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"__Type",ofType:null}}},isDeprecated:!1,deprecationReason:null},{name:"possibleTypes",description:null,args:[],type:{kind:"LIST",name:null,ofType:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"__Type",ofType:null}}},isDeprecated:!1,deprecationReason:null},{name:"enumValues",description:null,args:[{name:"includeDeprecated",description:null,type:{kind:"SCALAR",name:"Boolean",ofType:null},defaultValue:"false",isDeprecated:!1,deprecationReason:null}],type:{kind:"LIST",name:null,ofType:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"__EnumValue",ofType:null}}},isDeprecated:!1,deprecationReason:null},{name:"inputFields",description:null,args:[{name:"includeDeprecated",description:null,type:{kind:"SCALAR",name:"Boolean",ofType:null},defaultValue:"false",isDeprecated:!1,deprecationReason:null}],type:{kind:"LIST",name:null,ofType:{kind:"NON_NULL",name:null,ofType:{kind:"OBJECT",name:"__InputValue",ofType:null}}},isDeprecated:!1,deprecationReason:null},{name:"ofType",description:null,args:[],type:{kind:"OBJECT",name:"__Type",ofType:null},isDeprecated:!1,deprecationReason:null}],inputFields:null,interfaces:[],enumValues:null,possibleTypes:null},{kind:"ENUM",name:"__TypeKind",description:"An enum describing what kind of type a given `__Type` is.",fields:null,inputFields:null,interfaces:null,enumValues:[{name:"SCALAR",description:"Indicates this type is a scalar.",isDeprecated:!1,deprecationReason:null},{name:"OBJECT",description:"Indicates this type is an object. `fields` and `interfaces` are valid fields.",isDeprecated:!1,deprecationReason:null},{name:"INTERFACE",description:"Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields.",isDeprecated:!1,deprecationReason:null},{name:"UNION",description:"Indicates this type is a union. `possibleTypes` is a valid field.",isDeprecated:!1,deprecationReason:null},{name:"ENUM",description:"Indicates this type is an enum. `enumValues` is a valid field.",isDeprecated:!1,deprecationReason:null},{name:"INPUT_OBJECT",description:"Indicates this type is an input object. `inputFields` is a valid field.",isDeprecated:!1,deprecationReason:null},{name:"LIST",description:"Indicates this type is a list. `ofType` is a valid field.",isDeprecated:!1,deprecationReason:null},{name:"NON_NULL",description:"Indicates this type is a non-null. `ofType` is a valid field.",isDeprecated:!1,deprecationReason:null}],possibleTypes:null}],directives:[{name:"deprecated",description:"Marks an element of a GraphQL schema as no longer supported.",isRepeatable:!1,locations:["ARGUMENT_DEFINITION","ENUM_VALUE","FIELD_DEFINITION","INPUT_FIELD_DEFINITION"],args:[{name:"reason",description:"Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).",type:{kind:"SCALAR",name:"String",ofType:null},defaultValue:'"No longer supported"',isDeprecated:!1,deprecationReason:null}]},{name:"include",description:"Directs the executor to include this field or fragment only when the `if` argument is true.",isRepeatable:!1,locations:["FIELD","FRAGMENT_SPREAD","INLINE_FRAGMENT"],args:[{name:"if",description:"Included when true.",type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"Boolean",ofType:null}},defaultValue:null,isDeprecated:!1,deprecationReason:null}]},{name:"skip",description:"Directs the executor to skip this field or fragment when the `if` argument is true.",isRepeatable:!1,locations:["FIELD","FRAGMENT_SPREAD","INLINE_FRAGMENT"],args:[{name:"if",description:"Skipped when true.",type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"Boolean",ofType:null}},defaultValue:null,isDeprecated:!1,deprecationReason:null}]},{name:"specifiedBy",description:"Exposes a URL that specifies the behavior of this scalar.",isRepeatable:!1,locations:["SCALAR"],args:[{name:"url",description:"The URL that specifies the behavior of this scalar.",type:{kind:"NON_NULL",name:null,ofType:{kind:"SCALAR",name:"String",ofType:null}},defaultValue:null,isDeprecated:!1,deprecationReason:null}]}]}},pg=function(e,t){return ud(e.kind,e,d(d({},e.context),{},{authAttempt:t}))};function hg(e){var t=e.addAuthToOperation,n=e.getAuth,r=e.didAuthError,i=e.willAuthError;return function(e){var a=e.client,o=e.forward,s=new Map,u=Ef(),l=u.source,c=u.next,f=null;return function(e){function u(e,t,n){var r=a.createRequestOperation("mutation",Jf(e,t),n);return Af(bf(1)(ff((function(e){return e.operation.key===r.key}))(yf((function(){return c(r)}))(x))))}var d=function(e){f=e,p=void 0,s.forEach(c),s.clear()},p=Promise.resolve().then((function(){return n({authState:f,mutate:u})})).then(d),h=function(e){e=pg(e,!0),s.set(e.key,e),p||(p=n({authState:f,mutate:u}).then(d).catch((function(){return d(null)})))},m=gf(e),v=ff((function(e){return"teardown"===e.kind}))(m),y=ff((function(e){return"teardown"!==e.kind}))(m),g=df((function(e){return t({operation:e,authState:f})}))(hf([l,pf((function(e){return s.has(e.key)?Sf:!p&&i&&i({operation:e,authState:f})?(h(e),Sf):p?wf(ff((function(t){return"teardown"===t.kind&&t.key===e.key}))(m))(df((function(){return pg(e,!1)}))(function(e){return _f((function(t){return e.then((function(e){Promise.resolve(e).then((function(){t.next(e),t.complete()}))})),of}))}(p))):Tf(pg(e,!1))}))(y)])),x=gf(o(hf([g,v])));return ff((function(e){var t=e.error,n=e.operation;return!(t&&r&&r({error:t,authState:f})&&!n.context.authAttempt)||(h(n),!1)}))(x)}}}const mg=["login","joinLecture"],vg=e=>{const{onLogout:t}=e??{};return hg({getAuth:async({authState:e,mutate:n})=>{if(!e){const e=Qp();return e||null}const r=await n(pp);if(r.data?.refreshLogin){const{accessToken:e,accessTokenExpiresAt:t}=r.data.refreshLogin,n={token:e,tokenExpiresAt:new Date(t)};return(({token:e,tokenExpiresAt:t})=>{localStorage.setItem(Hp,JSON.stringify(e)),localStorage.setItem(Kp,JSON.stringify(t.toISOString()))})(n),n}return localStorage.removeItem(Hp),localStorage.removeItem(Kp),await(t?.()),null},addAuthToOperation:({operation:e,authState:t})=>{if(!t)return e;const n="function"==typeof e.context.fetchOptions?e.context.fetchOptions():e.context.fetchOptions||{};return ud(e.kind,e,{...e.context,fetchOptions:{...n,headers:{...n.headers,Authorization:t.token?`Bearer ${t.token}`:""}}})},didAuthError:({error:e})=>e.graphQLErrors.some((({extensions:e})=>"UNAUTHENTICATED"===e.code)),willAuthError:({authState:e,operation:t})=>e?new Date>e.tokenExpiresAt:!("mutation"===t.kind&&t.query.definitions.some((e=>"OperationDefinition"===e.kind&&e.selectionSet.selections.some((e=>"Field"===e.kind&&mg.includes(e.name.value))))))})},yg=(e,t)=>{e.invalidate({__typename:"User",id:t})},gg={participantJoined:(e,t,n)=>{((e,t)=>{t&&(e.writeFragment(np,t),e.updateQuery({query:Rp},(e=>e?.participants?e.participants.find((e=>e.id===t.id))?e:{...e,participants:[t,...e.participants]}:e)))})(n,e?.participantJoined)},participantLeft:(e,t,n)=>{yg(n,e.participantLeft.id)},userWasRemoved:(e,t,n)=>{yg(n,e.userWasRemoved.id)}},xg=(e,t)=>{t&&(e.writeFragment(sp,t),e.updateQuery({query:jp,variables:{first:20,after:null,groupId:t.groupId}},(e=>(e?.messages?.nodes?.unshift(t),e))))},bg={groupMemberJoined:(e,t,n)=>{((e,t,n)=>{t&&(e.writeFragment(np,t),e.updateQuery({query:Cp,variables:{id:n}},(e=>e?{...e,groupMembers:[t,...e.groupMembers]}:e)))})(n,e?.groupMemberJoined,t.id)},groupMemberLeft:(e,t,n)=>{((e,t,n)=>{e.updateQuery({query:Cp,variables:{id:n}},(e=>e?{...e,groupMembers:e.groupMembers.filter((e=>e.id!==t))}:e))})(n,e.groupMemberLeft.id,t.id)}},wg=(e,t)=>{t&&(e.writeFragment(rp,t),e.updateQuery({query:Lp},(e=>e?{...e,annotations:[...e.annotations,t]}:e)))},kg=(e,t)=>{if(!t)return;e.writeFragment(ip,t),e.updateQuery({query:Ap,variables:{annotationId:t.annotationId}},(e=>e?{...e,comments:[...e.comments,t]}:e));const n=e.readFragment(rp,{__typename:"Annotation",id:t.annotationId});n&&e.writeFragment(rp,{...n,commentsCount:n.commentsCount+1})},Ng={Mutation:{...{deleteProfile:(e,t,n)=>{yg(n,t.id)},kickParticipant:(e,t,n)=>{yg(n,t.userId)}},...{sendMessage:(e,t,n)=>{xg(n,e?.sendMessage)}},...{leaveGroup:(e,t,n)=>{n.invalidate({__typename:"Group",id:e.leaveGroup.id})}},...{createAnnotation:(e,t,n)=>{wg(n,e?.createAnnotation)},deleteAnnotation:(e,t,n)=>{e?.deleteAnnotation.success&&n.invalidate({__typename:"Annotation",id:t.id})}},...{createComment:(e,t,n)=>{kg(n,e?.createComment)}}},Subscription:{...gg,...{messageWasSent:(e,t,n)=>{xg(n,e?.messageWasSent)}},...bg,...{annotationWasCreated:(e,t,n)=>{wg(n,e?.annotationWasCreated)},annotationWasRemoved:(e,t,n)=>{n.invalidate({__typename:"Annotation",id:e?.annotationWasRemoved?.id})}},...{commentWasAdded:(e,t,n)=>{kg(n,e?.commentWasAdded)}}}},Tg=(e={})=>{const t=ah().apiUrl,{onLogout:n,lecture:r}=e,i=function(e){var t,n,r=e.url,i=e.connectionParams,a=e.lazy,o=void 0===a||a,s=e.onNonLazyError,u=void 0===s?console.error:s,l=e.lazyCloseTimeout,c=void 0===l?0:l,f=e.keepAlive,d=void 0===f?0:f,m=e.disablePong,y=e.connectionAckWaitTimeout,g=void 0===y?0:y,x=e.retryAttempts,b=void 0===x?5:x,w=e.retryWait,k=void 0===w?function(){var e=v(p().mark((function e(t){var n,r;return p().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:for(n=1e3,r=0;r<t;r++)n*=2;return e.next=4,new Promise((function(e){return setTimeout(e,n+Math.floor(2700*Math.random()+300))}));case 4:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}():w,N=e.shouldRetry,T=void 0===N?fg:N,_=e.isFatalConnectionProblem,E=e.on,S=e.webSocketImpl,L=e.generateID,A=void 0===L?function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){var t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)}))}:L,O=e.jsonMessageReplacer,R=e.jsonMessageReviver;if(S){if(!("function"==typeof(n=S)&&"constructor"in n&&"CLOSED"in n&&"CLOSING"in n&&"CONNECTING"in n&&"OPEN"in n))throw new Error("Invalid WebSocket implementation provided");t=S}else"undefined"!=typeof WebSocket?t=WebSocket:"undefined"!=typeof global?t=global.WebSocket||global.MozWebSocket:"undefined"!=typeof window&&(t=window.WebSocket||window.MozWebSocket);if(!t)throw new Error("WebSocket implementation missing; on Node you can `import WebSocket from 'ws';` and pass `webSocketImpl: WebSocket` to `createClient`");var j=t,D=function(){var e=function(){var e={};return{on:function(t,n){return e[t]=n,function(){delete e[t]}},emit:function(t){var n;"id"in t&&(null===(n=e[t.id])||void 0===n||n.call(e,t))}}}(),t={connecting:(null==E?void 0:E.connecting)?[E.connecting]:[],opened:(null==E?void 0:E.opened)?[E.opened]:[],connected:(null==E?void 0:E.connected)?[E.connected]:[],ping:(null==E?void 0:E.ping)?[E.ping]:[],pong:(null==E?void 0:E.pong)?[E.pong]:[],message:(null==E?void 0:E.message)?[e.emit,E.message]:[e.emit],closed:(null==E?void 0:E.closed)?[E.closed]:[],error:(null==E?void 0:E.error)?[E.error]:[]};return{onMessage:e.on,on:function(e,n){var r=t[e];return r.push(n),function(){r.splice(r.indexOf(n),1)}},emit:function(e){for(var n=arguments.length,r=new Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];for(var a=0,o=C(t[e]);a<o.length;a++){o[a].apply(void 0,r)}}}}();function M(e){var t=[D.on("error",(function(n){t.forEach((function(e){return e()})),e(n)})),D.on("closed",(function(n){t.forEach((function(e){return e()})),e(n)}))]}var F,P,U=0,V=!1,B=0,z=!1;function q(){return J.apply(this,arguments)}function J(){return(J=v(p().mark((function e(){var t,n,a,o,s,u;return p().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return clearTimeout(P),e.next=3,null!=F?F:F=new Promise((function(e,t){return v(p().mark((function n(){var a,o,s,u,l;return p().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(u=function(){isFinite(d)&&d>0&&(clearTimeout(s),s=setTimeout((function(){a.readyState===j.OPEN&&(a.send(cg({type:og.Ping})),D.emit("ping",!1,void 0))}),d))},!V){n.next=8;break}return n.next=4,k(B);case 4:if(U){n.next=7;break}return F=void 0,n.abrupt("return",t({code:1e3,reason:"All Subscriptions Gone"}));case 7:B++;case 8:if(D.emit("connecting"),n.t0=j,"function"!=typeof r){n.next=16;break}return n.next=13,r();case 13:n.t1=n.sent,n.next=17;break;case 16:n.t1=r;case 17:n.t2=n.t1,n.t3=sg,a=new n.t0(n.t2,n.t3),M((function(e){F=void 0,clearTimeout(o),clearTimeout(s),t(e),fg(e)&&4499===e.code&&(a.close(4499,"Terminated"),a.onerror=null,a.onclose=null)})),a.onerror=function(e){return D.emit("error",e)},a.onclose=function(e){return D.emit("closed",e)},a.onopen=v(p().mark((function e(){var t;return p().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(e.prev=0,D.emit("opened",a),"function"!=typeof i){e.next=8;break}return e.next=5,i();case 5:e.t0=e.sent,e.next=9;break;case 8:e.t0=i;case 9:if(t=e.t0,a.readyState===j.OPEN){e.next=12;break}return e.abrupt("return");case 12:a.send(cg(t?{type:og.ConnectionInit,payload:t}:{type:og.ConnectionInit},O)),isFinite(g)&&g>0&&(o=setTimeout((function(){a.close(ag.ConnectionAcknowledgementTimeout,"Connection acknowledgement timeout")}),g)),u(),e.next=21;break;case 17:e.prev=17,e.t1=e.catch(0),D.emit("error",e.t1),a.close(ag.InternalClientError,ig(e.t1 instanceof Error?e.t1.message:new Error(e.t1).message,"Internal client error"));case 21:case"end":return e.stop()}}),e,null,[[0,17]])}))),l=!1,a.onmessage=function(t){var n=t.data;try{var r=lg(n,R);if(D.emit("message",r),"ping"===r.type||"pong"===r.type)return D.emit(r.type,!0,r.payload),void("pong"===r.type?u():m||(a.send(cg(r.payload?{type:og.Pong,payload:r.payload}:{type:og.Pong})),D.emit("pong",!1,r.payload)));if(l)return;if(r.type!==og.ConnectionAck)throw new Error("First message cannot be of type ".concat(r.type));clearTimeout(o),l=!0,D.emit("connected",a,r.payload),V=!1,B=0,e([a,new Promise((function(e,t){return M(t)}))])}catch(e){a.onmessage=null,D.emit("error",e),a.close(ag.BadResponse,ig(e instanceof Error?e.message:new Error(e).message,"Bad response"))}};case 26:case"end":return n.stop()}}),n)})))()}));case 3:if(t=e.sent,n=I(t,2),a=n[0],o=n[1],a.readyState!==j.CLOSING){e.next=10;break}return e.next=10,o;case 10:return s=function(){},u=new Promise((function(e){return s=e})),e.abrupt("return",[a,s,Promise.race([u.then((function(){if(!U){var e=function(){return a.close(1e3,"Normal Closure")};isFinite(c)&&c>0?P=setTimeout((function(){a.readyState===j.OPEN&&e()}),c):e()}})),o])]);case 13:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function G(e){if(fg(e)&&(t=e.code,![1e3,1001,1006,1005,1012,1013,1013].includes(t)&&t>=1e3&&t<=1999||[ag.InternalServerError,ag.InternalClientError,ag.BadRequest,ag.BadResponse,ag.Unauthorized,ag.SubprotocolNotAcceptable,ag.SubscriberAlreadyExists,ag.TooManyInitialisationRequests].includes(e.code)))throw e;var t;if(z)return!1;if(fg(e)&&1e3===e.code)return U>0;if(!b||B>=b)throw e;if(!T(e))throw e;if(null==_?void 0:_(e))throw e;return V=!0}return o||v(p().mark((function e(){var t,n,r;return p().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:U++;case 1:return e.prev=1,e.next=4,q();case 4:return t=e.sent,n=I(t,3),r=n[2],e.next=9,r;case 9:e.next=21;break;case 11:if(e.prev=11,e.t0=e.catch(1),e.prev=13,G(e.t0)){e.next=16;break}return e.abrupt("return");case 16:e.next=21;break;case 18:return e.prev=18,e.t1=e.catch(13),e.abrupt("return",null==u?void 0:u(e.t1));case 21:e.next=1;break;case 23:case"end":return e.stop()}}),e,null,[[1,11],[13,18]])})))(),{on:D.on,subscribe:function(e,t){var n=A(e),r=!1,i=!1,a=function(){U--,r=!0};return v(p().mark((function o(){var s;return p().wrap((function(o){for(;;)switch(o.prev=o.next){case 0:U++;case 1:return o.prev=1,o.delegateYield(p().mark((function o(){var s,u,l,c,f,d;return p().wrap((function(o){for(;;)switch(o.prev=o.next){case 0:return o.next=2,q();case 2:if(s=o.sent,u=I(s,3),l=u[0],c=u[1],f=u[2],!r){o.next=9;break}return o.abrupt("return",{v:c()});case 9:return d=D.onMessage(n,(function(e){switch(e.type){case og.Next:return void t.next(e.payload);case og.Error:return i=!0,r=!0,t.error(e.payload),void a();case og.Complete:return r=!0,void a()}})),l.send(cg({id:n,type:og.Subscribe,payload:e},O)),a=function(){r||l.readyState!==j.OPEN||l.send(cg({id:n,type:og.Complete},O)),U--,r=!0,c()},o.next=14,f.finally(d);case 14:return o.abrupt("return",{v:void 0});case 15:case"end":return o.stop()}}),o)}))(),"t0",3);case 3:if("object"!==h(s=o.t0)){o.next=6;break}return o.abrupt("return",s.v);case 6:o.next=12;break;case 8:if(o.prev=8,o.t1=o.catch(1),G(o.t1)){o.next=12;break}return o.abrupt("return");case 12:o.next=1;break;case 14:case"end":return o.stop()}}),o,null,[[1,8]])})))().then((function(){i||t.complete()})).catch((function(e){t.error(e)})),function(){r||a()}},dispose:function(){return v(p().mark((function e(){var t;return p().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(z=!0,!F){e.next=8;break}return e.next=4,F;case 4:t=e.sent,I(t,1)[0].close(1e3,"Normal Closure");case 8:case"end":return e.stop()}}),e)})))()},terminate:function(){F&&D.emit("closed",{code:4499,reason:"Terminated",wasClean:!1})}}}({url:`${t.replace(/^http/,"ws")}/graphql`,connectionParams:()=>{const{token:e}=Qp()??{};return{authToken:e??"",lecture:r??""}}});return yd({url:`${t}/graphql`,fetchOptions:{credentials:"include",headers:{"x-lecture":r??""}},exchanges:[hd,Qy({schema:dg,scalars:{DateTime:e=>"string"==typeof e?new Date(e):null}}),Ry({resolvers:{Query:{messages:Vy()}},updates:Ng,schema:dg}),vg({onLogout:n}),tg,pd({forwardSubscription:e=>({subscribe:t=>({unsubscribe:i.subscribe(e,t)})})})]})},_g=((...e)=>e.reduce(((e,t)=>({children:n})=>l.exports.jsx(e,{children:l.exports.jsx(t,{children:n})}))))((({children:t})=>{const{success:n}=Cd(),[r,i]=e.useState(null),{auth:a,setAuth:o,removeAuth:s}=Yp(),[u,c]=e.useState(!1),[f,d]=e.useState(!1),[p,h]=e.useState(!0),{client:m,resetClient:v}=eh();e.useEffect((()=>{c(Boolean(a?.token))}),[a?.token]);const y=e.useCallback((async({email:e,password:t})=>{d(!0);const{data:n,error:r}=await m.mutation(fp,{email:e,password:t}).toPromise();if(!n||r)return d(!1),null;const{user:a,accessToken:s,accessTokenExpiresAt:u}=n.login;return v(),i(a),c(!0),o({token:s,tokenExpiresAt:u}),d(!1),a}),[m,v,o]),g=e.useCallback((async()=>{await m.mutation(dp,{}).toPromise(),i(null),c(!1),s(),v(),n("You have been logged out successfully.")}),[m,s,v,n]),x=e.useCallback((async()=>{d(!0);const{data:e,error:t}=await m.query(Op,{}).toPromise();if(!e||t)return i(null),c(!1),s(),d(!1),null;const{me:n}=e;return i(n),c(!0),d(!1),n}),[m,s]);e.useEffect((()=>{x().then((()=>h(!1))).finally((()=>h(!1)))}),[]);const b=e.useMemo((()=>[{user:r,isLoggedIn:u&&Boolean(r?.id),loading:f},{setUser:i,login:y,logout:g,fetchUser:x}]),[r,u,f,y,x,g]);return l.exports.jsx(th.Provider,{value:b,children:p?null:t})}),(({children:t})=>{const[{isLoggedIn:n}]=nh(),r=go("recent_lectures",{defaultValue:{},initializeWithValue:!0,parse:e=>jd(e,{}),stringify:JSON.stringify}),i=e.useCallback((e=>{r.set((t=>({...t,[window.location.pathname]:e})))}),[]),a=e.useCallback((()=>{r.set((e=>{const t={...e};return delete t[window.location.pathname],t})),window.location.search.includes("lectureId")&&(window.location.search="")}),[]),{resetClient:o}=eh(),[s,u]=e.useState(null);!function(e={},t){Ld({query:zp,...e},t)}({pause:!s});const[,c]=_d(xp),f=e.useCallback((async e=>{const t=window.location.origin+window.location.pathname,{data:n}=await c({name:e,url:t});n?.createLecture&&(u(n.createLecture),o({lecture:n.createLecture.id}),i(n.createLecture))}),[i,c,o]),[,d]=_d(Tp),p=e.useCallback((async e=>{const{data:t}=await d({name:e});t?.updateLecture&&u(t.updateLecture)}),[d]),[,h]=_d(bp),m=e.useCallback((async()=>{await h({}),u(null),o(),a()}),[h,a,o]),[,v]=_d(wp),y=e.useCallback((async e=>{const t=window.location.origin+window.location.pathname;o({lecture:e});const{data:n}=await v({id:e,url:t});return n?(u(n.joinLecture),i(n.joinLecture),n.joinLecture):null}),[i,v,o]),[,g]=_d(Np),x=e.useCallback((async()=>{await g({}),o(),u(null),a()}),[g,o,a]);e.useEffect((()=>{if(n){const e=new URLSearchParams(window.location.search).get("lectureId")||r.value?.[window.location.pathname]?.id;e&&y(e).then((e=>{e||a()}))}else u(null)}),[n]);const[b]=(w={pause:!s},Sd({query:Rp,...w}));var w;const k=e.useMemo((()=>b.data?.participants??[]),[b]);!function(e={},t){Ld({query:qp,...e},t)}({pause:!s}),function(e={},t){Ld({query:Jp,...e},t)}({pause:!s}),function(e={},t){Ld({query:Wp,...e},t)}({pause:!s}),function(e={},t){Ld({query:$p,...e},t)}({pause:!s});const[,N]=_d(kp),T=e.useCallback((async e=>{await N({userId:e})}),[N]),_=e.useMemo((()=>[{lecture:s,participants:k},{createLecture:f,updateLecture:p,deleteLecture:m,joinLecture:y,leaveLecture:x,kickParticipant:T}]),[s,k,f,p,m,y,x,T]);return l.exports.jsx(rh.Provider,{value:_,children:t})}),(({children:t})=>{const[n,r]=e.useState(null),[i,a]=oh("zen_mode",!1),[o,s]=oh("show_cursors",!0),[u,c]=oh("show_group_cursors_only",!1),[f,d]=oh("show_annotation_highlights",!0),p=e.useCallback(((e,t=!0)=>{const n="string"==typeof e?sh.find((t=>t.id===e)):e;r((e=>e===n&&t?null:n))}),[]),h=e.useCallback((e=>{switch(e){case"zenMode":a((e=>!e));break;case"showCursors":s((e=>!e));break;case"showOnlyGroupCursors":c((e=>!e));break;case"showAnnotationHighlights":d((e=>!e))}}),[]);return l.exports.jsx(uh.Provider,{value:[{view:n,zenMode:i,showCursors:o,showOnlyGroupCursors:u,showAnnotationHighlights:f},{switchView:p,toggle:h}],children:t})}),(({children:t})=>{const[{lecture:n}]=ih(),[r,i]=e.useState(null);e.useEffect((()=>{n||i(null)}),[n]);const{client:a}=eh();e.useEffect((()=>{a.query(Ip,{}).toPromise().then((({data:e})=>{i(e?.group??null)}))}),[a]),function(e={},t){Ld({query:Bp,...e},t)}({pause:!r,variables:{id:r?.id}});const[o]=(s={pause:!r,variables:{id:r?.id}},Sd({query:Cp,...s}));var s;const u=e.useMemo((()=>o.data?.groupMembers??[]),[o]);!function(e={},t){Ld({query:Up,...e},t)}({pause:!r,variables:{id:r?.id}}),function(e={},t){Ld({query:Vp,...e},t)}({pause:!r,variables:{id:r?.id}});const[,c]=_d(mp),f=e.useCallback((async e=>{const{data:t}=await c({name:e});t?.createGroup&&i(t.createGroup)}),[c]),[,d]=_d(gp),p=e.useCallback((async e=>{const{data:t}=await d({id:r?.id,name:e});t?.updateGroup&&i(t.updateGroup)}),[r,d]),[,h]=_d(vp),m=e.useCallback((async e=>{const{data:t}=await h({token:e});return t?.joinGroup&&i(t.joinGroup),t?.joinGroup??null}),[h]),[,v]=_d(yp),y=e.useCallback((async()=>{await v({id:r?.id}),i(null)}),[r,v]),g=e.useMemo((()=>[{group:r,members:u},{createGroup:f,updateGroup:p,joinGroup:m,leaveGroup:y}]),[r,u,f,p,m,y]);return l.exports.jsx(Qh.Provider,{value:g,children:t})}),(function({children:t}){const[r,i]=e.useState((()=>new Map)),a=e.useMemo((()=>r.size),[r]),o=e.useCallback((e=>Array.from(r).filter((([,t])=>!!t.slide&&Jh(e,t.slide))).length),[r]),s=e.useCallback((e=>r.has(e)),[r]),[{lecture:u,participants:c}]=ih(),f=e.useMemo((()=>{const e=[];return r.forEach(((t,n)=>{if(!t.mouse||!t.slide)return;const r=c.find((e=>e.id===n));r&&e.push({user:r,mouse:t.mouse,slide:t.slide})})),e}),[c,r]),d=e.useCallback((e=>{if(!r.has(e))return;const{slide:t}=r.get(e);if(!t)return;const{horizontalIndex:n,verticalIndex:i,fragmentIndex:a}=t;Reveal.slide(n,i,a)}),[r]),p=(({pause:t=!1,namespace:r,path:i,lecture:a,query:o})=>{const{socketUrl:s}=ah(),{auth:u,refresh:l}=Yp(),c=e.useCallback((()=>n.io(r?`${s}/${r}`:s,{auth:{token:u?.token},transports:["websocket"],path:i,query:{...o||{},...a?{lecture:a}:{}}})),[r,s,u?.token,i,o,a]),[f,d]=e.useState(null),[p,h]=to(!1);return e.useEffect((()=>{if(t)return;const e=c();return e.on("ack",(()=>{h(!0),e?.off("ack")})),d(e),()=>{h(!1),e.close()}}),[c,t]),e.useEffect((()=>{f?.connected||l()}),[f?.connected,l]),e.useMemo((()=>p?f:null),[p,f])})({pause:!u,lecture:u?.id??void 0,namespace:"activity",path:"/presence"});e.useEffect((()=>{if(p)return p.on("online-users",(e=>{const t=new Map;e.forEach((e=>t.set(e.userId,e.location))),i(t)})),p.on("online",(e=>{i((t=>{const n=new Map(t);return n.set(e.userId,e.location),n}))})),p.on("offline",(e=>{i((t=>{const n=new Map(t);return n.delete(e.userId),n}))})),p.on("switch-slide",(e=>{i((t=>{const n=new Map(t),r=n.get(e.userId);return r?(n.set(e.userId,{...r,slide:e.location.slide}),n):t}))})),()=>{p.off("online-users"),p.off("online"),p.off("offline"),p.off("switch-slide")}}),[p]),e.useEffect((()=>{p&&p.emit("online-users")}),[p]);const{slide:h}=qh();e.useEffect((()=>{p&&p.emit("switch-slide",h)}),[p,h]);const[{showCursors:m,zenMode:v}]=lh();e.useEffect((()=>{if(p&&m&&!v)return p.on("mouse-move",zh.exports.throttle((e=>{i((t=>{const n=new Map(t),r=n.get(e.userId);return r?(n.set(e.userId,{...r,mouse:e.location.mouse}),n):t}))}),50)),()=>{p.off("mouse-move")}}),[p,m,v]);const y=(()=>{const[t,n]=e.useState({x:0,y:0});e.useEffect((()=>{const e=e=>{n({x:e.clientX,y:e.clientY})};return document.addEventListener("mousemove",e),()=>document.removeEventListener("mousemove",e)}),[]);const r=No();return e.useMemo((()=>({x:t.x,y:t.y,pageWidth:r.width,pageHeight:r.height})),[t,r])})();return e.useEffect((()=>{p&&p.emit("mouse-move",y)}),[p,y]),l.exports.jsx(Gh.Provider,{value:[{presence:a,getSlidePresence:o,isOnline:s,mousePositions:f},{follow:d}],children:t})}),(({children:t})=>{const[n]=e.useState((()=>cu())),{messages:r,fetching:i,error:a,fetchMoreMessages:o,sendMessage:s,sending:u}=Wh({onMessageReceived:e=>{n.emit("message-received",e)}});return l.exports.jsx(Hh.Provider,{value:[{messages:r,fetching:i,error:a,sending:u,events:n},{fetchMoreMessages:o,sendMessage:s}],children:t})}),(({children:t})=>{const[{group:n}]=Yh(),[r]=e.useState((()=>cu())),{messages:i,fetching:a,error:o,fetchMoreMessages:s,sendMessage:u,sending:c}=Wh({groupId:n?.id,pause:!n,onMessageReceived:e=>{r.emit("message-received",e)}});return l.exports.jsx(Xh.Provider,{value:[{messages:i,fetching:a,error:o,sending:c,events:r},{fetchMoreMessages:s,sendMessage:u}],children:t})}),(function({children:t}){const[{lecture:n}]=ih(),[r]=e.useState((()=>cu())),[i,a]=e.useState([]),[o]=(s={pause:!n},Sd({query:Lp,...s}));var s;e.useEffect((()=>{a(n?o.data?.annotations??[]:[])}),[o,n]),function(e={},t){Ld({query:Dp,...e},t)}({pause:!n},((e,t)=>t?(r.emit("annotation:created",t.annotationWasCreated),t):t)),Pp({pause:!n},((e,t)=>t?(r.emit("comment:created",t.commentWasAdded),t):t)),function(e={},t){Ld({query:Mp,...e},t)}({pause:!n}),(t=>{const[{zenMode:n,showAnnotationHighlights:r}]=lh(),i=ah().annotations,a=e.useMemo((()=>t.map((({target:e,id:t})=>({selectors:e,tag:t})))),[t]);e.useEffect((()=>{if(!i)return;const e=jh(a);return()=>{e.then(Dh)}}),[a,i]),e.useEffect((()=>{!n&&r?window.document.body.classList.remove("no-annotations"):window.document.body.classList.add("no-annotations")}),[n,r])})(i);const[,u]=_d(up),c=e.useCallback((async({quote:e,target:t,text:n})=>{await u({quote:e,target:t,text:n})}),[u]),[,f]=_d(cp),d=e.useCallback((async e=>{await f({id:e})}),[f]);return l.exports.jsx(Mh.Provider,{value:[{annotations:i,events:r},{addAnnotation:c,removeAnnotation:d}],children:t})})),Eg=()=>{const{apiUrl:e,socketUrl:t}=ah();if(!e)throw new Error("Social Presence Plugin: No API URL provided. Please provide `socialPresence.apiUrl` in your reveal.js configuration.");if(!t)throw new Error("Social Presence Plugin: No Socket URL provided. Please provide `socialPresence.socketUrl` in your reveal.js configuration.");return!0};return Object.freeze({VERSION:"1.0.0",validateConfig:Eg,install:()=>{Eg();const t=document.getElementById("social-presence");a(t).render(l.exports.jsx(e.StrictMode,{children:l.exports.jsx(Zp,{makeClient:Tg,children:l.exports.jsxs(_g,{children:[l.exports.jsx(nv,{}),l.exports.jsx(Rd,{})]})})}))}})}(React,ReactDOM,io);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
